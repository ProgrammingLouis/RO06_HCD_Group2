-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_accel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of HLS_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_accel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=1.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.562000,HLS_SYN_LAT=9753144,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=14,HLS_SYN_FF=4035,HLS_SYN_LUT=5624,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (99 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (99 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (99 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (99 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (99 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (99 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (99 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (99 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (99 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (99 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv64_3FA47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100100011110101110000101000111101011100001010001111011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv64_407F400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001111111010000000000000000000000000000000000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_1C8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111001000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal Ix2_window_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal Ix2_window_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal Iy2_window_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_703 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_713 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_fu_663_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_720 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_fu_659_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_726 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_750 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_758 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_768_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_1439 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln127_fu_782_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln127_reg_1444 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln126_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_792_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_reg_1452 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln131_fu_802_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln131_reg_1457 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln127_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_822_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_1465 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln137_fu_836_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln137_reg_1470 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln136_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_846_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_reg_1478 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln141_fu_856_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln141_reg_1483 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln137_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_4_fu_882_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln57_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln64_fu_888_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln64_reg_1499 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ky_fu_898_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ky_reg_1507 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln64_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal yy_fu_904_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal yy_reg_1514 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sub_ln68_fu_919_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln68_reg_1519 : STD_LOGIC_VECTOR (4 downto 0);
    signal xx_fu_935_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xx_reg_1527 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln65_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kx_fu_941_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kx_reg_1532 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln68_1_fu_962_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln68_1_reg_1548 : STD_LOGIC_VECTOR (4 downto 0);
    signal I_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_load_reg_1553 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal I_y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_load_reg_1560 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_fu_967_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_reg_1567 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal mul_ln69_fu_971_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln69_reg_1572 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_fu_975_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_reg_1577 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_1_reg_1582 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_9_reg_1587 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_17_reg_1592 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_2_fu_985_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_2_reg_1597 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_10_fu_990_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_10_reg_1602 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_18_fu_995_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_18_reg_1607 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_load_7_reg_1612 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_load_7_reg_1617 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_load_7_reg_1622 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_4_fu_1000_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_4_reg_1627 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln41_12_fu_1005_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_12_reg_1632 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_20_fu_1010_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_20_reg_1637 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_5_fu_1015_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_5_reg_1642 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln41_13_fu_1020_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_13_reg_1647 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_21_fu_1025_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_21_reg_1652 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_6_fu_1030_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_6_reg_1657 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln41_14_fu_1035_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_14_reg_1662 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_22_fu_1040_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_22_reg_1667 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_fu_1045_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_1672 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal sum_3_fu_1049_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_1677 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_fu_1053_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_reg_1682 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1687 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_13_reg_1693 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_1699 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln81_fu_1114_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln81_reg_1704 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln81_fu_1118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal mul_ln80_fu_1139_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_reg_1714 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal mul_ln80_1_fu_1149_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_1_reg_1719 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln80_2_fu_1155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1734 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln85_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1739 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal icmp_ln85_1_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_1_reg_1744 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal and_ln85_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_reg_1754 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal x_3_fu_1215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal y_3_fu_1227_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_3_reg_1767 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal shl_ln_fu_1237_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_1772 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln149_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln150_1_fu_1253_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln150_1_reg_1777 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_2_fu_1267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_2_reg_1785 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal idx_fu_1273_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_reg_1790 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln150_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln152_fu_1282_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln152_reg_1795 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal icmp_ln153_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_1805 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ix2_window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ix2_window_ce0 : STD_LOGIC;
    signal Ix2_window_we0 : STD_LOGIC;
    signal Ix2_window_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ix2_window_ce1 : STD_LOGIC;
    signal Iy2_window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Iy2_window_ce0 : STD_LOGIC;
    signal Iy2_window_we0 : STD_LOGIC;
    signal Iy2_window_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Iy2_window_ce1 : STD_LOGIC;
    signal Ixy_window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ixy_window_ce0 : STD_LOGIC;
    signal Ixy_window_we0 : STD_LOGIC;
    signal Ixy_window_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ixy_window_ce1 : STD_LOGIC;
    signal I_x_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce0 : STD_LOGIC;
    signal I_x_we0 : STD_LOGIC;
    signal I_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce0 : STD_LOGIC;
    signal I_y_we0 : STD_LOGIC;
    signal I_y_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_img_ce0 : STD_LOGIC;
    signal output_img_we0 : STD_LOGIC;
    signal output_img_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_0_i_reg_547 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_0_i_reg_558 : STD_LOGIC_VECTOR (8 downto 0);
    signal y1_0_i_reg_569 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_0_i_reg_580 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_0_i_i_reg_591 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_i_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln56_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_0_i_i_reg_615 : STD_LOGIC_VECTOR (2 downto 0);
    signal kx_0_i_i_reg_626 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal y5_0_i_reg_637 : STD_LOGIC_VECTOR (8 downto 0);
    signal x6_0_i_reg_648 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln131_1_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_1_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_1_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_fu_1210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_1_fu_1287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_fu_659_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_fu_663_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_673_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_676_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_774_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln131_fu_798_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_828_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln141_fu_852_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_fu_912_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_fu_909_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln65_fu_925_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_947_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_2_fu_959_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln44_fu_1060_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln44_fu_1060_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln44_1_fu_1079_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln44_1_fu_1079_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln44_2_fu_1098_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln44_2_fu_1098_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln44_fu_1122_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln44_1_fu_1125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln80_fu_1139_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln80_fu_1139_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln44_2_fu_1128_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln80_1_fu_1149_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln80_3_fu_1145_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_1_fu_1149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln85_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_1167_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln85_fu_1177_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln85_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1202_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln151_fu_1233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1245_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln150_fu_1257_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln152_fu_1278_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (99 downto 0);
    signal regslice_both_INPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_TVALID_int : STD_LOGIC;
    signal INPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TUSER_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDEST_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_TVALID_int : STD_LOGIC;
    signal OUTPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal mul_ln44_1_fu_1079_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln44_2_fu_1098_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln44_fu_1060_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln80_fu_1139_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_fu_1139_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component HLS_accel_dsub_64fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dmul_64g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dcmp_64hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_sitodp_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_Ix2_winbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component HLS_accel_I_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component HLS_accel_output_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    HLS_accel_CONTROL_BUS_s_axi_U : component HLS_accel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Ix2_window_U : component HLS_accel_Ix2_winbkb
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Ix2_window_address0,
        ce0 => Ix2_window_ce0,
        we0 => Ix2_window_we0,
        d0 => mul_ln68_reg_1567,
        q0 => Ix2_window_q0,
        address1 => Ix2_window_address1,
        ce1 => Ix2_window_ce1,
        q1 => Ix2_window_q1);

    Iy2_window_U : component HLS_accel_Ix2_winbkb
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Iy2_window_address0,
        ce0 => Iy2_window_ce0,
        we0 => Iy2_window_we0,
        d0 => mul_ln69_reg_1572,
        q0 => Iy2_window_q0,
        address1 => Iy2_window_address1,
        ce1 => Iy2_window_ce1,
        q1 => Iy2_window_q1);

    Ixy_window_U : component HLS_accel_Ix2_winbkb
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Ixy_window_address0,
        ce0 => Ixy_window_ce0,
        we0 => Ixy_window_we0,
        d0 => mul_ln70_reg_1577,
        q0 => Ixy_window_q0,
        address1 => Ixy_window_address1,
        ce1 => Ixy_window_ce1,
        q1 => Ixy_window_q1);

    I_x_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_x_address0,
        ce0 => I_x_ce0,
        we0 => I_x_we0,
        d0 => I_x_d0,
        q0 => I_x_q0);

    I_y_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_y_address0,
        ce0 => I_y_ce0,
        we0 => I_y_we0,
        d0 => I_y_d0,
        q0 => I_y_q0);

    output_img_U : component HLS_accel_output_eOg
    generic map (
        DataWidth => 1,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_img_address0,
        ce0 => output_img_ce0,
        we0 => output_img_we0,
        d0 => and_ln85_reg_1754,
        q0 => output_img_q0);

    HLS_accel_dsub_64fYi_U1 : component HLS_accel_dsub_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_659_p0,
        din1 => grp_fu_659_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_659_p2);

    HLS_accel_dmul_64g8j_U2 : component HLS_accel_dmul_64g8j
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_663_p0,
        din1 => grp_fu_663_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_663_p2);

    HLS_accel_dcmp_64hbi_U3 : component HLS_accel_dcmp_64hbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_726,
        din1 => ap_const_lv64_407F400000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_668_p2);

    HLS_accel_sitodp_ibs_U4 : component HLS_accel_sitodp_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_673_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_673_p1);

    HLS_accel_sitodp_ibs_U5 : component HLS_accel_sitodp_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_676_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_676_p1);

    regslice_both_INPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDATA,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_data_V_U_ack_in,
        data_out => INPUT_STREAM_TDATA_int,
        vld_out => INPUT_STREAM_TVALID_int,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TKEEP,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_keep_V_U_ack_in,
        data_out => INPUT_STREAM_TKEEP_int,
        vld_out => regslice_both_INPUT_STREAM_keep_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TSTRB,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_strb_V_U_ack_in,
        data_out => INPUT_STREAM_TSTRB_int,
        vld_out => regslice_both_INPUT_STREAM_strb_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TUSER,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_user_V_U_ack_in,
        data_out => INPUT_STREAM_TUSER_int,
        vld_out => regslice_both_INPUT_STREAM_user_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TLAST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_last_V_U_ack_in,
        data_out => INPUT_STREAM_TLAST_int,
        vld_out => regslice_both_INPUT_STREAM_last_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TID,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_id_V_U_ack_in,
        data_out => INPUT_STREAM_TID_int,
        vld_out => regslice_both_INPUT_STREAM_id_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDEST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_dest_V_U_ack_in,
        data_out => INPUT_STREAM_TDEST_int,
        vld_out => regslice_both_INPUT_STREAM_dest_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_STREAM_TDATA_int,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => OUTPUT_STREAM_TREADY_int,
        data_out => OUTPUT_STREAM_TDATA,
        vld_out => regslice_both_OUTPUT_STREAM_data_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TKEEP,
        vld_out => regslice_both_OUTPUT_STREAM_keep_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TSTRB,
        vld_out => regslice_both_OUTPUT_STREAM_strb_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TUSER,
        vld_out => regslice_both_OUTPUT_STREAM_user_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => icmp_ln153_reg_1805,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TLAST,
        vld_out => regslice_both_OUTPUT_STREAM_last_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TID,
        vld_out => regslice_both_OUTPUT_STREAM_id_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TDEST,
        vld_out => regslice_both_OUTPUT_STREAM_dest_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    kx_0_i_i_reg_626_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                kx_0_i_i_reg_626 <= kx_reg_1532;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                kx_0_i_i_reg_626 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    ky_0_i_i_reg_615_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_929_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                ky_0_i_i_reg_615 <= ky_reg_1507;
            elsif (((icmp_ln57_fu_876_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                ky_0_i_i_reg_615 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    reg_683_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                reg_683 <= Ix2_window_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_683 <= Ix2_window_q0;
            end if; 
        end if;
    end process;

    reg_688_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                reg_688 <= Ix2_window_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_688 <= Ix2_window_q1;
            end if; 
        end if;
    end process;

    reg_693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                reg_693 <= Iy2_window_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_693 <= Iy2_window_q0;
            end if; 
        end if;
    end process;

    reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                reg_698 <= Iy2_window_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_698 <= Iy2_window_q1;
            end if; 
        end if;
    end process;

    reg_703_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                reg_703 <= Ixy_window_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_703 <= Ixy_window_q0;
            end if; 
        end if;
    end process;

    reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                reg_708 <= Ixy_window_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_708 <= Ixy_window_q1;
            end if; 
        end if;
    end process;

    x2_0_i_reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x2_0_i_reg_580 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then 
                x2_0_i_reg_580 <= x_1_reg_1478;
            end if; 
        end if;
    end process;

    x6_0_i_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln149_fu_1221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                x6_0_i_reg_648 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state100) and (ap_const_logic_1 = OUTPUT_STREAM_TREADY_int))) then 
                x6_0_i_reg_648 <= x_2_reg_1785;
            end if; 
        end if;
    end process;

    x_0_i_i_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                x_0_i_i_reg_603 <= x_3_fu_1215_p2;
            elsif (((icmp_ln56_fu_870_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_0_i_i_reg_603 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    x_0_i_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_i_reg_558 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then 
                x_0_i_reg_558 <= x_reg_1452;
            end if; 
        end if;
    end process;

    y1_0_i_reg_569_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y1_0_i_reg_569 <= ap_const_lv9_0;
            elsif (((icmp_ln137_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                y1_0_i_reg_569 <= y_1_reg_1465;
            end if; 
        end if;
    end process;

    y5_0_i_reg_637_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_870_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                y5_0_i_reg_637 <= ap_const_lv9_0;
            elsif (((icmp_ln150_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                y5_0_i_reg_637 <= y_3_reg_1767;
            end if; 
        end if;
    end process;

    y_0_i_i_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_816_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_i_i_reg_591 <= ap_const_lv8_1;
            elsif (((icmp_ln57_fu_876_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                y_0_i_i_reg_591 <= y_4_fu_882_p2;
            end if; 
        end if;
    end process;

    y_0_i_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_786_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_i_reg_547 <= y_reg_1439;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_i_reg_547 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                I_x_load_reg_1553 <= I_x_q0;
                I_y_load_reg_1560 <= I_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                Ix2_window_load_7_reg_1612 <= Ix2_window_q1;
                Ixy_window_load_7_reg_1622 <= Ixy_window_q1;
                Iy2_window_load_7_reg_1617 <= Iy2_window_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_786_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln131_reg_1457 <= add_ln131_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln141_reg_1483 <= add_ln141_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln150_fu_1261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                add_ln152_reg_1795 <= add_ln152_fu_1282_p2;
                idx_reg_1790 <= idx_fu_1273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln41_10_reg_1602 <= add_ln41_10_fu_990_p2;
                add_ln41_18_reg_1607 <= add_ln41_18_fu_995_p2;
                add_ln41_2_reg_1597 <= add_ln41_2_fu_985_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln41_12_reg_1632 <= add_ln41_12_fu_1005_p2;
                add_ln41_20_reg_1637 <= add_ln41_20_fu_1010_p2;
                add_ln41_4_reg_1627 <= add_ln41_4_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln41_13_reg_1647 <= add_ln41_13_fu_1020_p2;
                add_ln41_21_reg_1652 <= add_ln41_21_fu_1025_p2;
                add_ln41_5_reg_1642 <= add_ln41_5_fu_1015_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln41_14_reg_1662 <= add_ln41_14_fu_1035_p2;
                add_ln41_22_reg_1667 <= add_ln41_22_fu_1040_p2;
                add_ln41_6_reg_1657 <= add_ln41_6_fu_1030_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln41_17_reg_1592 <= grp_fu_744_p2;
                add_ln41_1_reg_1582 <= grp_fu_732_p2;
                add_ln41_9_reg_1587 <= grp_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln68_1_reg_1548 <= add_ln68_1_fu_962_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln81_reg_1704 <= add_ln81_fu_1114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                and_ln85_reg_1754 <= and_ln85_fu_1197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                icmp_ln153_reg_1805 <= icmp_ln153_fu_1291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                icmp_ln85_1_reg_1744 <= icmp_ln85_1_fu_1187_p2;
                icmp_ln85_reg_1739 <= icmp_ln85_fu_1181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_929_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                kx_reg_1532 <= kx_fu_941_p2;
                xx_reg_1527 <= xx_fu_935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_892_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                ky_reg_1507 <= ky_fu_898_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_ln68_reg_1567 <= mul_ln68_fu_967_p2;
                mul_ln69_reg_1572 <= mul_ln69_fu_971_p2;
                mul_ln70_reg_1577 <= mul_ln70_fu_975_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                mul_ln80_1_reg_1719 <= mul_ln80_1_fu_1149_p2;
                mul_ln80_reg_1714 <= mul_ln80_fu_1139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state36))) then
                reg_713 <= grp_fu_673_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state54))) then
                reg_720 <= grp_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state72))) then
                reg_726 <= grp_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_750 <= grp_fu_732_p2;
                reg_754 <= grp_fu_738_p2;
                reg_758 <= grp_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                sext_ln64_reg_1499 <= sext_ln64_fu_888_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln149_fu_1221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    shl_ln_reg_1772(15 downto 8) <= shl_ln_fu_1237_p3(15 downto 8);
                    zext_ln150_1_reg_1777(16 downto 8) <= zext_ln150_1_fu_1253_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sub_ln68_reg_1519 <= sub_ln68_fu_919_p2;
                yy_reg_1514 <= yy_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                sum_1_reg_1672 <= sum_1_fu_1045_p2;
                sum_3_reg_1677 <= sum_3_fu_1049_p2;
                sum_5_reg_1682 <= sum_5_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_11_reg_1687 <= mul_ln44_fu_1060_p2(17 downto 12);
                tmp_13_reg_1693 <= mul_ln44_1_fu_1079_p2(17 downto 12);
                tmp_16_reg_1699 <= mul_ln44_2_fu_1098_p2(17 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                tmp_1_reg_1734 <= grp_fu_676_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                tmp_8_reg_1749 <= grp_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                x_1_reg_1478 <= x_1_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                x_2_reg_1785 <= x_2_fu_1267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_1452 <= x_fu_792_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                y_1_reg_1465 <= y_1_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                y_3_reg_1767 <= y_3_fu_1227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_reg_1439 <= y_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln127_reg_1444(16 downto 8) <= zext_ln127_fu_782_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln137_reg_1470(16 downto 8) <= zext_ln137_fu_836_p1(16 downto 8);
            end if;
        end if;
    end process;
    zext_ln127_reg_1444(7 downto 0) <= "00000000";
    zext_ln127_reg_1444(17) <= '0';
    zext_ln137_reg_1470(7 downto 0) <= "00000000";
    zext_ln137_reg_1470(17) <= '0';
    shl_ln_reg_1772(7 downto 0) <= "00000000";
    zext_ln150_1_reg_1777(7 downto 0) <= "00000000";
    zext_ln150_1_reg_1777(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state2, icmp_ln126_fu_762_p2, ap_CS_fsm_state3, icmp_ln127_fu_786_p2, ap_CS_fsm_state5, icmp_ln136_fu_816_p2, ap_CS_fsm_state6, icmp_ln137_fu_840_p2, ap_CS_fsm_state9, icmp_ln57_fu_876_p2, ap_CS_fsm_state10, icmp_ln64_fu_892_p2, ap_CS_fsm_state12, icmp_ln65_fu_929_p2, ap_CS_fsm_state95, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk, icmp_ln149_fu_1221_p2, ap_CS_fsm_state96, icmp_ln150_fu_1261_p2, ap_CS_fsm_state8, icmp_ln56_fu_870_p2, INPUT_STREAM_TVALID_int, OUTPUT_STREAM_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln126_fu_762_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln127_fu_786_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln136_fu_816_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln137_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln56_fu_870_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln57_fu_876_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln64_fu_892_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln65_fu_929_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state95 => 
                if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln149_fu_1221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln149_fu_1221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                if (((icmp_ln150_fu_1261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state99) and (ap_const_logic_1 = OUTPUT_STREAM_TREADY_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state100) and (ap_const_logic_1 = OUTPUT_STREAM_TREADY_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, INPUT_STREAM_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_TVALID_int;
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_STREAM_TREADY_assign_proc : process(INPUT_STREAM_TVALID, regslice_both_INPUT_STREAM_data_V_U_ack_in)
    begin
        if (((regslice_both_INPUT_STREAM_data_V_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = INPUT_STREAM_TVALID))) then 
            INPUT_STREAM_TREADY <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_TREADY_int_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, INPUT_STREAM_TVALID_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)))) then 
            INPUT_STREAM_TREADY_int <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    I_x_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, zext_ln131_1_fu_812_p1, zext_ln68_1_fu_953_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            I_x_address0 <= zext_ln68_1_fu_953_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_x_address0 <= zext_ln131_1_fu_812_p1(16 - 1 downto 0);
        else 
            I_x_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state14, INPUT_STREAM_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)))) then 
            I_x_ce0 <= ap_const_logic_1;
        else 
            I_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    I_x_d0 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);

    I_x_we0_assign_proc : process(ap_CS_fsm_state4, INPUT_STREAM_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then 
            I_x_we0 <= ap_const_logic_1;
        else 
            I_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state13, zext_ln141_1_fu_866_p1, zext_ln68_1_fu_953_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            I_y_address0 <= zext_ln68_1_fu_953_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            I_y_address0 <= zext_ln141_1_fu_866_p1(16 - 1 downto 0);
        else 
            I_y_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state14, INPUT_STREAM_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)))) then 
            I_y_ce0 <= ap_const_logic_1;
        else 
            I_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    I_y_d0 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);

    I_y_we0_assign_proc : process(ap_CS_fsm_state7, INPUT_STREAM_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then 
            I_y_we0 <= ap_const_logic_1;
        else 
            I_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Ix2_window_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state17, sext_ln68_fu_979_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Ix2_window_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Ix2_window_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Ix2_window_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Ix2_window_address0 <= sext_ln68_fu_979_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ix2_window_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Ix2_window_address0 <= "XXXX";
        end if; 
    end process;


    Ix2_window_address1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Ix2_window_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Ix2_window_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Ix2_window_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Ix2_window_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ix2_window_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            Ix2_window_address1 <= "XXXX";
        end if; 
    end process;


    Ix2_window_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Ix2_window_ce0 <= ap_const_logic_1;
        else 
            Ix2_window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ix2_window_ce1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Ix2_window_ce1 <= ap_const_logic_1;
        else 
            Ix2_window_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Ix2_window_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Ix2_window_we0 <= ap_const_logic_1;
        else 
            Ix2_window_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Ixy_window_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state17, sext_ln68_fu_979_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Ixy_window_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Ixy_window_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Ixy_window_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Ixy_window_address0 <= sext_ln68_fu_979_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ixy_window_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Ixy_window_address0 <= "XXXX";
        end if; 
    end process;


    Ixy_window_address1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Ixy_window_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Ixy_window_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Ixy_window_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Ixy_window_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ixy_window_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            Ixy_window_address1 <= "XXXX";
        end if; 
    end process;


    Ixy_window_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Ixy_window_ce0 <= ap_const_logic_1;
        else 
            Ixy_window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ixy_window_ce1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Ixy_window_ce1 <= ap_const_logic_1;
        else 
            Ixy_window_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Ixy_window_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Ixy_window_we0 <= ap_const_logic_1;
        else 
            Ixy_window_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Iy2_window_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state17, sext_ln68_fu_979_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Iy2_window_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Iy2_window_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Iy2_window_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Iy2_window_address0 <= sext_ln68_fu_979_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Iy2_window_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Iy2_window_address0 <= "XXXX";
        end if; 
    end process;


    Iy2_window_address1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Iy2_window_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Iy2_window_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Iy2_window_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Iy2_window_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Iy2_window_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            Iy2_window_address1 <= "XXXX";
        end if; 
    end process;


    Iy2_window_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Iy2_window_ce0 <= ap_const_logic_1;
        else 
            Iy2_window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Iy2_window_ce1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            Iy2_window_ce1 <= ap_const_logic_1;
        else 
            Iy2_window_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Iy2_window_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Iy2_window_we0 <= ap_const_logic_1;
        else 
            Iy2_window_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state100, OUTPUT_STREAM_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUTPUT_STREAM_TREADY_int;
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_STREAM_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_q0),32));
    OUTPUT_STREAM_TVALID <= regslice_both_OUTPUT_STREAM_data_V_U_vld_out;

    OUTPUT_STREAM_TVALID_int_assign_proc : process(ap_CS_fsm_state99, OUTPUT_STREAM_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) and (ap_const_logic_1 = OUTPUT_STREAM_TREADY_int))) then 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln131_fu_802_p2 <= std_logic_vector(unsigned(zext_ln127_reg_1444) + unsigned(zext_ln131_fu_798_p1));
    add_ln141_fu_856_p2 <= std_logic_vector(unsigned(zext_ln137_reg_1470) + unsigned(zext_ln141_fu_852_p1));
    add_ln152_fu_1282_p2 <= std_logic_vector(unsigned(zext_ln150_1_reg_1777) + unsigned(zext_ln152_fu_1278_p1));
    add_ln41_10_fu_990_p2 <= std_logic_vector(unsigned(add_ln41_9_reg_1587) + unsigned(reg_754));
    add_ln41_12_fu_1005_p2 <= std_logic_vector(unsigned(reg_698) + unsigned(Iy2_window_load_7_reg_1617));
    add_ln41_13_fu_1020_p2 <= std_logic_vector(unsigned(add_ln41_12_reg_1632) + unsigned(reg_693));
    add_ln41_14_fu_1035_p2 <= std_logic_vector(unsigned(add_ln41_13_reg_1647) + unsigned(reg_754));
    add_ln41_18_fu_995_p2 <= std_logic_vector(unsigned(add_ln41_17_reg_1592) + unsigned(reg_758));
    add_ln41_20_fu_1010_p2 <= std_logic_vector(unsigned(reg_708) + unsigned(Ixy_window_load_7_reg_1622));
    add_ln41_21_fu_1025_p2 <= std_logic_vector(unsigned(add_ln41_20_reg_1637) + unsigned(reg_703));
    add_ln41_22_fu_1040_p2 <= std_logic_vector(unsigned(add_ln41_21_reg_1652) + unsigned(reg_758));
    add_ln41_2_fu_985_p2 <= std_logic_vector(unsigned(add_ln41_1_reg_1582) + unsigned(reg_750));
    add_ln41_4_fu_1000_p2 <= std_logic_vector(unsigned(reg_688) + unsigned(Ix2_window_load_7_reg_1612));
    add_ln41_5_fu_1015_p2 <= std_logic_vector(unsigned(add_ln41_4_reg_1627) + unsigned(reg_683));
    add_ln41_6_fu_1030_p2 <= std_logic_vector(unsigned(add_ln41_5_reg_1642) + unsigned(reg_750));
    add_ln68_1_fu_962_p2 <= std_logic_vector(unsigned(sub_ln68_reg_1519) + unsigned(zext_ln68_2_fu_959_p1));
    add_ln81_fu_1114_p2 <= std_logic_vector(signed(tmp_11_reg_1687) + signed(tmp_13_reg_1693));
    and_ln85_fu_1197_p2 <= (tmp_8_reg_1749 and or_ln85_fu_1193_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_CS_fsm_state95, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk, icmp_ln149_fu_1221_p2)
    begin
        if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln149_fu_1221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state95, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk, icmp_ln149_fu_1221_p2)
    begin
        if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln149_fu_1221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln85_fu_1163_p1 <= reg_726;

    grp_fu_659_p0_assign_proc : process(reg_713, reg_726, ap_CS_fsm_state57, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_659_p0 <= reg_726;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_659_p0 <= reg_713;
        else 
            grp_fu_659_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_659_p1_assign_proc : process(reg_720, tmp_1_reg_1734, ap_CS_fsm_state57, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_659_p1 <= reg_720;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_659_p1 <= tmp_1_reg_1734;
        else 
            grp_fu_659_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_663_p0_assign_proc : process(reg_713, reg_720, ap_CS_fsm_state37, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_663_p0 <= reg_720;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_663_p0 <= reg_713;
        else 
            grp_fu_663_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_663_p1_assign_proc : process(reg_713, ap_CS_fsm_state37, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_663_p1 <= ap_const_lv64_3FA47AE147AE147B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_663_p1 <= reg_713;
        else 
            grp_fu_663_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_673_p0_assign_proc : process(zext_ln81_fu_1118_p1, ap_CS_fsm_state29, zext_ln80_2_fu_1155_p1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_673_p0 <= zext_ln80_2_fu_1155_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_673_p0 <= zext_ln81_fu_1118_p1;
        else 
            grp_fu_673_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_676_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_1_reg_1719),32));
    grp_fu_732_p2 <= std_logic_vector(unsigned(reg_683) + unsigned(reg_688));
    grp_fu_738_p2 <= std_logic_vector(unsigned(reg_693) + unsigned(reg_698));
    grp_fu_744_p2 <= std_logic_vector(unsigned(reg_703) + unsigned(reg_708));
    icmp_ln126_fu_762_p2 <= "1" when (y_0_i_reg_547 = ap_const_lv9_100) else "0";
    icmp_ln127_fu_786_p2 <= "1" when (x_0_i_reg_558 = ap_const_lv9_100) else "0";
    icmp_ln136_fu_816_p2 <= "1" when (y1_0_i_reg_569 = ap_const_lv9_100) else "0";
    icmp_ln137_fu_840_p2 <= "1" when (x2_0_i_reg_580 = ap_const_lv9_100) else "0";
    icmp_ln149_fu_1221_p2 <= "1" when (y5_0_i_reg_637 = ap_const_lv9_100) else "0";
    icmp_ln150_fu_1261_p2 <= "1" when (x6_0_i_reg_648 = ap_const_lv9_100) else "0";
    icmp_ln153_fu_1291_p2 <= "1" when (idx_reg_1790 = ap_const_lv16_FFFF) else "0";
    icmp_ln56_fu_870_p2 <= "1" when (y_0_i_i_reg_591 = ap_const_lv8_FF) else "0";
    icmp_ln57_fu_876_p2 <= "1" when (x_0_i_i_reg_603 = ap_const_lv8_FF) else "0";
    icmp_ln64_fu_892_p2 <= "1" when (ky_0_i_i_reg_615 = ap_const_lv3_2) else "0";
    icmp_ln65_fu_929_p2 <= "1" when (kx_0_i_i_reg_626 = ap_const_lv3_2) else "0";
    icmp_ln85_1_fu_1187_p2 <= "1" when (trunc_ln85_fu_1177_p1 = ap_const_lv52_0) else "0";
    icmp_ln85_fu_1181_p2 <= "0" when (tmp_4_fu_1167_p4 = ap_const_lv11_7FF) else "1";
    idx_fu_1273_p2 <= std_logic_vector(unsigned(zext_ln150_fu_1257_p1) + unsigned(shl_ln_reg_1772));
    kx_fu_941_p2 <= std_logic_vector(signed(kx_0_i_i_reg_626) + signed(ap_const_lv3_1));
    ky_fu_898_p2 <= std_logic_vector(signed(ky_0_i_i_reg_615) + signed(ap_const_lv3_1));
    mul_ln44_1_fu_1079_p1 <= mul_ln44_1_fu_1079_p10(8 - 1 downto 0);
    mul_ln44_1_fu_1079_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_reg_1677),18));
    mul_ln44_1_fu_1079_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln44_1_fu_1079_p1), 18));
    mul_ln44_2_fu_1098_p1 <= mul_ln44_2_fu_1098_p10(8 - 1 downto 0);
    mul_ln44_2_fu_1098_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_reg_1682),18));
    mul_ln44_2_fu_1098_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln44_2_fu_1098_p1), 18));
    mul_ln44_fu_1060_p1 <= mul_ln44_fu_1060_p10(8 - 1 downto 0);
    mul_ln44_fu_1060_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_reg_1672),18));
    mul_ln44_fu_1060_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln44_fu_1060_p1), 18));
    mul_ln68_fu_967_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_x_load_reg_1553) * signed(I_x_load_reg_1553))), 8));
    mul_ln69_fu_971_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_y_load_reg_1560) * signed(I_y_load_reg_1560))), 8));
    mul_ln70_fu_975_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_y_load_reg_1560) * signed(I_x_load_reg_1553))), 8));
    mul_ln80_1_fu_1149_p0 <= zext_ln80_3_fu_1145_p1(8 - 1 downto 0);
    mul_ln80_1_fu_1149_p1 <= zext_ln80_3_fu_1145_p1(8 - 1 downto 0);
    mul_ln80_1_fu_1149_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_1_fu_1149_p0) * unsigned(mul_ln80_1_fu_1149_p1), 16));
    mul_ln80_fu_1139_p0 <= mul_ln80_fu_1139_p00(8 - 1 downto 0);
    mul_ln80_fu_1139_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_fu_1122_p1),16));
    mul_ln80_fu_1139_p1 <= mul_ln80_fu_1139_p10(8 - 1 downto 0);
    mul_ln80_fu_1139_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_1_fu_1125_p1),16));
    mul_ln80_fu_1139_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_fu_1139_p0) * unsigned(mul_ln80_fu_1139_p1), 16));
    or_ln85_fu_1193_p2 <= (icmp_ln85_reg_1739 or icmp_ln85_1_reg_1744);

    output_img_address0_assign_proc : process(ap_CS_fsm_state94, ap_CS_fsm_state97, zext_ln86_fu_1210_p1, zext_ln152_1_fu_1287_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            output_img_address0 <= zext_ln152_1_fu_1287_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            output_img_address0 <= zext_ln86_fu_1210_p1(16 - 1 downto 0);
        else 
            output_img_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_img_ce0_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state94, ap_CS_fsm_state97, ap_CS_fsm_state98, OUTPUT_STREAM_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state94) or ((ap_const_logic_1 = ap_CS_fsm_state99) and (ap_const_logic_1 = OUTPUT_STREAM_TREADY_int)))) then 
            output_img_ce0 <= ap_const_logic_1;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_img_we0_assign_proc : process(ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            output_img_we0 <= ap_const_logic_1;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln44_1_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_1693),8));

        sext_ln44_2_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_1699),8));

        sext_ln44_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_1687),8));

        sext_ln64_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ky_0_i_i_reg_615),8));

        sext_ln65_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kx_0_i_i_reg_626),8));

        sext_ln68_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln68_1_reg_1548),64));

    shl_ln_fu_1237_p3 <= (trunc_ln151_fu_1233_p1 & ap_const_lv8_0);
    sub_ln68_fu_919_p2 <= std_logic_vector(unsigned(tmp_14_fu_912_p3) - unsigned(zext_ln68_fu_909_p1));
    sum_1_fu_1045_p2 <= std_logic_vector(unsigned(add_ln41_6_reg_1657) + unsigned(add_ln41_2_reg_1597));
    sum_3_fu_1049_p2 <= std_logic_vector(unsigned(add_ln41_14_reg_1662) + unsigned(add_ln41_10_reg_1602));
    sum_5_fu_1053_p2 <= std_logic_vector(unsigned(add_ln41_22_reg_1667) + unsigned(add_ln41_18_reg_1607));
    tmp_10_fu_1245_p3 <= (y5_0_i_reg_637 & ap_const_lv8_0);
    tmp_12_fu_1202_p3 <= (y_0_i_i_reg_591 & x_0_i_i_reg_603);
    tmp_14_fu_912_p3 <= (ky_reg_1507 & ap_const_lv2_0);
    tmp_15_fu_947_p3 <= (yy_reg_1514 & xx_reg_1527);
    tmp_4_fu_1167_p4 <= bitcast_ln85_fu_1163_p1(62 downto 52);
    tmp_9_fu_774_p3 <= (y_0_i_reg_547 & ap_const_lv8_0);
    tmp_s_fu_828_p3 <= (y1_0_i_reg_569 & ap_const_lv8_0);
    trunc_ln151_fu_1233_p1 <= y5_0_i_reg_637(8 - 1 downto 0);
    trunc_ln85_fu_1177_p1 <= bitcast_ln85_fu_1163_p1(52 - 1 downto 0);
    x_1_fu_846_p2 <= std_logic_vector(unsigned(x2_0_i_reg_580) + unsigned(ap_const_lv9_1));
    x_2_fu_1267_p2 <= std_logic_vector(unsigned(x6_0_i_reg_648) + unsigned(ap_const_lv9_1));
    x_3_fu_1215_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(x_0_i_i_reg_603));
    x_fu_792_p2 <= std_logic_vector(unsigned(x_0_i_reg_558) + unsigned(ap_const_lv9_1));
    xx_fu_935_p2 <= std_logic_vector(signed(sext_ln65_fu_925_p1) + signed(x_0_i_i_reg_603));
    y_1_fu_822_p2 <= std_logic_vector(unsigned(y1_0_i_reg_569) + unsigned(ap_const_lv9_1));
    y_3_fu_1227_p2 <= std_logic_vector(unsigned(y5_0_i_reg_637) + unsigned(ap_const_lv9_1));
    y_4_fu_882_p2 <= std_logic_vector(unsigned(y_0_i_i_reg_591) + unsigned(ap_const_lv8_1));
    y_fu_768_p2 <= std_logic_vector(unsigned(y_0_i_reg_547) + unsigned(ap_const_lv9_1));
    yy_fu_904_p2 <= std_logic_vector(signed(sext_ln64_reg_1499) + signed(y_0_i_i_reg_591));
    zext_ln127_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_774_p3),18));
    zext_ln131_1_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_reg_1457),64));
    zext_ln131_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_i_reg_558),18));
    zext_ln137_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_828_p3),18));
    zext_ln141_1_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln141_reg_1483),64));
    zext_ln141_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x2_0_i_reg_580),18));
    zext_ln150_1_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1245_p3),18));
    zext_ln150_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x6_0_i_reg_648),16));
    zext_ln152_1_fu_1287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln152_reg_1795),64));
    zext_ln152_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x6_0_i_reg_648),18));
    zext_ln68_1_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_947_p3),64));
    zext_ln68_2_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_reg_1532),5));
    zext_ln68_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_reg_1507),5));
    zext_ln80_2_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_reg_1714),32));
    zext_ln80_3_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_2_fu_1128_p1),16));
    zext_ln81_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_reg_1704),32));
    zext_ln86_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1202_p3),64));
end behav;
