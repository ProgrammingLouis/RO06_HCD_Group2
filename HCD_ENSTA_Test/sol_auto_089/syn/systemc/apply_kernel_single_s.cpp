// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "apply_kernel_single_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic apply_kernel_single_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic apply_kernel_single_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> apply_kernel_single_s::ap_ST_fsm_state1 = "1";
const sc_lv<6> apply_kernel_single_s::ap_ST_fsm_state2 = "10";
const sc_lv<6> apply_kernel_single_s::ap_ST_fsm_state3 = "100";
const sc_lv<6> apply_kernel_single_s::ap_ST_fsm_state4 = "1000";
const sc_lv<6> apply_kernel_single_s::ap_ST_fsm_state5 = "10000";
const sc_lv<6> apply_kernel_single_s::ap_ST_fsm_state6 = "100000";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_1 = "1";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_2 = "10";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_3 = "11";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_4 = "100";
const sc_lv<18> apply_kernel_single_s::ap_const_lv18_1C8 = "111001000";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_C = "1100";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_10 = "10000";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_5 = "101";
const bool apply_kernel_single_s::ap_const_boolean_1 = true;

apply_kernel_single_s::apply_kernel_single_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln40_1_fu_106_p2);
    sensitive << ( input_0_1_read );
    sensitive << ( input_2_0_read );

    SC_METHOD(thread_add_ln40_2_fu_123_p2);
    sensitive << ( add_ln40_reg_159 );
    sensitive << ( add_ln40_1_reg_164 );

    SC_METHOD(thread_add_ln40_3_fu_112_p2);
    sensitive << ( input_1_1_read );
    sensitive << ( input_2_1_read );

    SC_METHOD(thread_add_ln40_4_fu_94_p2);
    sensitive << ( input_1_2_read );
    sensitive << ( input_2_2_read );

    SC_METHOD(thread_add_ln40_5_fu_118_p2);
    sensitive << ( input_0_2_read );
    sensitive << ( add_ln40_4_reg_154 );

    SC_METHOD(thread_add_ln40_6_fu_127_p2);
    sensitive << ( add_ln40_3_reg_169 );
    sensitive << ( add_ln40_5_reg_174 );

    SC_METHOD(thread_add_ln40_fu_100_p2);
    sensitive << ( input_0_0_read );
    sensitive << ( input_1_0_read );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_mul_ln43_fu_138_p0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln43_fu_138_p00 );

    SC_METHOD(thread_mul_ln43_fu_138_p00);
    sensitive << ( sum_reg_189 );

    SC_METHOD(thread_mul_ln43_fu_138_p2);
    sensitive << ( mul_ln43_fu_138_p0 );

    SC_METHOD(thread_sum_fu_131_p2);
    sensitive << ( add_ln40_2_reg_179 );
    sensitive << ( add_ln40_6_reg_184 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "apply_kernel_single_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_0_0_read, "(port)input_0_0_read");
    sc_trace(mVcdFile, input_0_1_read, "(port)input_0_1_read");
    sc_trace(mVcdFile, input_0_2_read, "(port)input_0_2_read");
    sc_trace(mVcdFile, input_1_0_read, "(port)input_1_0_read");
    sc_trace(mVcdFile, input_1_1_read, "(port)input_1_1_read");
    sc_trace(mVcdFile, input_1_2_read, "(port)input_1_2_read");
    sc_trace(mVcdFile, input_2_0_read, "(port)input_2_0_read");
    sc_trace(mVcdFile, input_2_1_read, "(port)input_2_1_read");
    sc_trace(mVcdFile, input_2_2_read, "(port)input_2_2_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, add_ln40_4_fu_94_p2, "add_ln40_4_fu_94_p2");
    sc_trace(mVcdFile, add_ln40_4_reg_154, "add_ln40_4_reg_154");
    sc_trace(mVcdFile, add_ln40_fu_100_p2, "add_ln40_fu_100_p2");
    sc_trace(mVcdFile, add_ln40_reg_159, "add_ln40_reg_159");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln40_1_fu_106_p2, "add_ln40_1_fu_106_p2");
    sc_trace(mVcdFile, add_ln40_1_reg_164, "add_ln40_1_reg_164");
    sc_trace(mVcdFile, add_ln40_3_fu_112_p2, "add_ln40_3_fu_112_p2");
    sc_trace(mVcdFile, add_ln40_3_reg_169, "add_ln40_3_reg_169");
    sc_trace(mVcdFile, add_ln40_5_fu_118_p2, "add_ln40_5_fu_118_p2");
    sc_trace(mVcdFile, add_ln40_5_reg_174, "add_ln40_5_reg_174");
    sc_trace(mVcdFile, add_ln40_2_fu_123_p2, "add_ln40_2_fu_123_p2");
    sc_trace(mVcdFile, add_ln40_2_reg_179, "add_ln40_2_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln40_6_fu_127_p2, "add_ln40_6_fu_127_p2");
    sc_trace(mVcdFile, add_ln40_6_reg_184, "add_ln40_6_reg_184");
    sc_trace(mVcdFile, sum_fu_131_p2, "sum_fu_131_p2");
    sc_trace(mVcdFile, sum_reg_189, "sum_reg_189");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, mul_ln43_fu_138_p0, "mul_ln43_fu_138_p0");
    sc_trace(mVcdFile, mul_ln43_fu_138_p2, "mul_ln43_fu_138_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_ln43_fu_138_p00, "mul_ln43_fu_138_p00");
#endif

    }
}

apply_kernel_single_s::~apply_kernel_single_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void apply_kernel_single_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln40_1_reg_164 = add_ln40_1_fu_106_p2.read();
        add_ln40_3_reg_169 = add_ln40_3_fu_112_p2.read();
        add_ln40_5_reg_174 = add_ln40_5_fu_118_p2.read();
        add_ln40_reg_159 = add_ln40_fu_100_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        add_ln40_2_reg_179 = add_ln40_2_fu_123_p2.read();
        add_ln40_6_reg_184 = add_ln40_6_fu_127_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        add_ln40_4_reg_154 = add_ln40_4_fu_94_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_return = mul_ln43_fu_138_p2.read().range(16, 12);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sum_reg_189 = sum_fu_131_p2.read();
    }
}

void apply_kernel_single_s::thread_add_ln40_1_fu_106_p2() {
    add_ln40_1_fu_106_p2 = (!input_2_0_read.read().is_01() || !input_0_1_read.read().is_01())? sc_lv<8>(): (sc_biguint<8>(input_2_0_read.read()) + sc_biguint<8>(input_0_1_read.read()));
}

void apply_kernel_single_s::thread_add_ln40_2_fu_123_p2() {
    add_ln40_2_fu_123_p2 = (!add_ln40_1_reg_164.read().is_01() || !add_ln40_reg_159.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln40_1_reg_164.read()) + sc_biguint<8>(add_ln40_reg_159.read()));
}

void apply_kernel_single_s::thread_add_ln40_3_fu_112_p2() {
    add_ln40_3_fu_112_p2 = (!input_1_1_read.read().is_01() || !input_2_1_read.read().is_01())? sc_lv<8>(): (sc_biguint<8>(input_1_1_read.read()) + sc_biguint<8>(input_2_1_read.read()));
}

void apply_kernel_single_s::thread_add_ln40_4_fu_94_p2() {
    add_ln40_4_fu_94_p2 = (!input_1_2_read.read().is_01() || !input_2_2_read.read().is_01())? sc_lv<8>(): (sc_biguint<8>(input_1_2_read.read()) + sc_biguint<8>(input_2_2_read.read()));
}

void apply_kernel_single_s::thread_add_ln40_5_fu_118_p2() {
    add_ln40_5_fu_118_p2 = (!input_0_2_read.read().is_01() || !add_ln40_4_reg_154.read().is_01())? sc_lv<8>(): (sc_biguint<8>(input_0_2_read.read()) + sc_biguint<8>(add_ln40_4_reg_154.read()));
}

void apply_kernel_single_s::thread_add_ln40_6_fu_127_p2() {
    add_ln40_6_fu_127_p2 = (!add_ln40_5_reg_174.read().is_01() || !add_ln40_3_reg_169.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln40_5_reg_174.read()) + sc_biguint<8>(add_ln40_3_reg_169.read()));
}

void apply_kernel_single_s::thread_add_ln40_fu_100_p2() {
    add_ln40_fu_100_p2 = (!input_1_0_read.read().is_01() || !input_0_0_read.read().is_01())? sc_lv<8>(): (sc_biguint<8>(input_1_0_read.read()) + sc_biguint<8>(input_0_0_read.read()));
}

void apply_kernel_single_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void apply_kernel_single_s::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void apply_kernel_single_s::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void apply_kernel_single_s::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void apply_kernel_single_s::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void apply_kernel_single_s::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void apply_kernel_single_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void apply_kernel_single_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void apply_kernel_single_s::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void apply_kernel_single_s::thread_mul_ln43_fu_138_p0() {
    mul_ln43_fu_138_p0 =  (sc_lv<8>) (mul_ln43_fu_138_p00.read());
}

void apply_kernel_single_s::thread_mul_ln43_fu_138_p00() {
    mul_ln43_fu_138_p00 = esl_zext<18,8>(sum_reg_189.read());
}

void apply_kernel_single_s::thread_mul_ln43_fu_138_p2() {
    mul_ln43_fu_138_p2 = (!mul_ln43_fu_138_p0.read().is_01() || !ap_const_lv18_1C8.is_01())? sc_lv<18>(): sc_biguint<8>(mul_ln43_fu_138_p0.read()) * sc_biguint<18>(ap_const_lv18_1C8);
}

void apply_kernel_single_s::thread_sum_fu_131_p2() {
    sum_fu_131_p2 = (!add_ln40_6_reg_184.read().is_01() || !add_ln40_2_reg_179.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln40_6_reg_184.read()) + sc_biguint<8>(add_ln40_2_reg_179.read()));
}

void apply_kernel_single_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

