-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_accel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of HLS_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_accel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=521782,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=14,HLS_SYN_FF=2559,HLS_SYN_LUT=4806,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_pp3_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_3FA47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_407F400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001111111010000000000000000000000000000000000000000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv16_FC04 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln122_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln132_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal icmp_ln145_reg_1778 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage3 : signal is "none";
    signal ap_block_pp3_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln145_reg_1778_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_497 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_0_i_i_reg_508 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_i_reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal x6_0_i_0_reg_542 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln121_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal y_fu_630_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_1327 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln122_fu_644_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln122_reg_1332 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_22_fu_654_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_22_reg_1340 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal add_ln122_fu_746_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln131_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_1_fu_758_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_1356 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln132_fu_772_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln132_reg_1361 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_31_fu_782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_reg_1369 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal add_ln132_fu_874_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln54_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1381 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state14_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_1381_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1381_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1381_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1381_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1381_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1381_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_886_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln73_fu_898_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_reg_1390 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_1_fu_912_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_1_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_2_fu_926_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_2_reg_1405 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_3_fu_940_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_3_reg_1410 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_fu_948_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_reg_1417 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state15_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state20_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state25_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state30_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_state35_pp2_stage1_iter4 : BOOLEAN;
    signal ap_block_state40_pp2_stage1_iter5 : BOOLEAN;
    signal ap_block_state45_pp2_stage1_iter6 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal grp_fu_588_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_0_0_reg_1453 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_0_reg_1458 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_0_reg_1458_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_0_reg_1463 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_0_reg_1463_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_0_1_reg_1468 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_1_reg_1473 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_1_reg_1473_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_1_reg_1478 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_1_reg_1478_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_994_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_1483 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln66_4_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1500 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state16_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state21_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_state26_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_state31_pp2_stage2_iter3 : BOOLEAN;
    signal ap_block_state36_pp2_stage2_iter4 : BOOLEAN;
    signal ap_block_state41_pp2_stage2_iter5 : BOOLEAN;
    signal ap_block_state46_pp2_stage2_iter6 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal zext_ln66_4_reg_1500_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1500_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1500_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1500_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1500_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1500_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Ix2_window_0_2_reg_1525 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_2_reg_1530 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_2_reg_1535 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_2_reg_1535_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_1_0_reg_1540 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_1_0_reg_1545 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_0_reg_1550 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_0_reg_1550_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state17_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_state27_pp2_stage3_iter2 : BOOLEAN;
    signal ap_block_state32_pp2_stage3_iter3 : BOOLEAN;
    signal ap_block_state37_pp2_stage3_iter4 : BOOLEAN;
    signal ap_block_state42_pp2_stage3_iter5 : BOOLEAN;
    signal ap_block_state47_pp2_stage3_iter6 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal Ix2_window_1_1_reg_1575 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_1_1_reg_1580 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_1_reg_1585 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_1_2_reg_1590 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_1_2_reg_1595 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_2_reg_1600 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_state18_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage4_iter1 : BOOLEAN;
    signal ap_block_state28_pp2_stage4_iter2 : BOOLEAN;
    signal ap_block_state33_pp2_stage4_iter3 : BOOLEAN;
    signal ap_block_state38_pp2_stage4_iter4 : BOOLEAN;
    signal ap_block_state43_pp2_stage4_iter5 : BOOLEAN;
    signal ap_block_state48_pp2_stage4_iter6 : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal Ix2_window_2_0_reg_1615 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_2_0_reg_1620 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_2_0_reg_1625 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_2_1_reg_1630 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_2_1_reg_1635 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_2_1_reg_1640 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_2_2_reg_1645 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal Iy2_window_2_2_reg_1650 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_2_2_reg_1655 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_1660 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_1666 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_reg_1672 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln79_fu_1084_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_fu_1095_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_reg_1682 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_1_fu_1104_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_1_reg_1687 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln78_4_fu_1110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln78_6_fu_1114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_M_reg_1702 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal tmp_3_reg_1708 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal tmp_4_reg_1713 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1718 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal det_M_reg_1723 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1728 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal R_reg_1733 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal icmp_ln83_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1739 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_reg_1744 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_reg_1749 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal y_2_fu_1163_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_2_reg_1758 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln146_fu_1169_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln146_reg_1763 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_1173_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_1768 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln145_fu_1189_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln145_reg_1773 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln145_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state51_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state55_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state55_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal empty_42_fu_1199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_42_reg_1782 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln148_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_1793 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln102_fu_1251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state52_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state52_io : BOOLEAN;
    signal ap_block_state56_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_state56_io : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal output_img_q1 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_img_load_1_reg_1808 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_fu_1299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_reg_1823 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln102_1_fu_1305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state53_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_state53_io : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal output_img_load_2_reg_1833 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_img_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_img_load_3_reg_1838 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln102_2_fu_1309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state54_pp3_stage3_iter0 : BOOLEAN;
    signal ap_block_state54_io : BOOLEAN;
    signal ap_block_pp3_stage3_11001 : BOOLEAN;
    signal add_ln145_fu_1313_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln145_reg_1848 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln102_3_fu_1319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state14 : STD_LOGIC;
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state51 : STD_LOGIC;
    signal ap_block_pp3_stage3_subdone : BOOLEAN;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal I_x_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce0 : STD_LOGIC;
    signal I_x_we0 : STD_LOGIC;
    signal I_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce1 : STD_LOGIC;
    signal I_x_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce0 : STD_LOGIC;
    signal I_y_we0 : STD_LOGIC;
    signal I_y_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce1 : STD_LOGIC;
    signal I_y_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_img_ce0 : STD_LOGIC;
    signal output_img_we0 : STD_LOGIC;
    signal output_img_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_img_ce1 : STD_LOGIC;
    signal grp_apply_kernel_single_s_fu_554_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_554_ap_ce : STD_LOGIC;
    signal ap_block_state15_pp2_stage1_iter0_ignore_call97 : BOOLEAN;
    signal ap_block_state20_pp2_stage1_iter1_ignore_call97 : BOOLEAN;
    signal ap_block_state25_pp2_stage1_iter2_ignore_call97 : BOOLEAN;
    signal ap_block_state30_pp2_stage1_iter3_ignore_call97 : BOOLEAN;
    signal ap_block_state35_pp2_stage1_iter4_ignore_call97 : BOOLEAN;
    signal ap_block_state40_pp2_stage1_iter5_ignore_call97 : BOOLEAN;
    signal ap_block_state45_pp2_stage1_iter6_ignore_call97 : BOOLEAN;
    signal ap_block_pp2_stage1_11001_ignoreCallOp307 : BOOLEAN;
    signal ap_block_state16_pp2_stage2_iter0_ignore_call97 : BOOLEAN;
    signal ap_block_state21_pp2_stage2_iter1_ignore_call97 : BOOLEAN;
    signal ap_block_state26_pp2_stage2_iter2_ignore_call97 : BOOLEAN;
    signal ap_block_state31_pp2_stage2_iter3_ignore_call97 : BOOLEAN;
    signal ap_block_state36_pp2_stage2_iter4_ignore_call97 : BOOLEAN;
    signal ap_block_state41_pp2_stage2_iter5_ignore_call97 : BOOLEAN;
    signal ap_block_state46_pp2_stage2_iter6_ignore_call97 : BOOLEAN;
    signal ap_block_pp2_stage2_11001_ignoreCallOp308 : BOOLEAN;
    signal ap_block_state17_pp2_stage3_iter0_ignore_call98 : BOOLEAN;
    signal ap_block_state22_pp2_stage3_iter1_ignore_call98 : BOOLEAN;
    signal ap_block_state27_pp2_stage3_iter2_ignore_call98 : BOOLEAN;
    signal ap_block_state32_pp2_stage3_iter3_ignore_call98 : BOOLEAN;
    signal ap_block_state37_pp2_stage3_iter4_ignore_call98 : BOOLEAN;
    signal ap_block_state42_pp2_stage3_iter5_ignore_call98 : BOOLEAN;
    signal ap_block_state47_pp2_stage3_iter6_ignore_call98 : BOOLEAN;
    signal ap_block_pp2_stage3_11001_ignoreCallOp310 : BOOLEAN;
    signal ap_block_state18_pp2_stage4_iter0_ignore_call99 : BOOLEAN;
    signal ap_block_state23_pp2_stage4_iter1_ignore_call99 : BOOLEAN;
    signal ap_block_state28_pp2_stage4_iter2_ignore_call99 : BOOLEAN;
    signal ap_block_state33_pp2_stage4_iter3_ignore_call99 : BOOLEAN;
    signal ap_block_state38_pp2_stage4_iter4_ignore_call99 : BOOLEAN;
    signal ap_block_state43_pp2_stage4_iter5_ignore_call99 : BOOLEAN;
    signal ap_block_state48_pp2_stage4_iter6_ignore_call99 : BOOLEAN;
    signal ap_block_pp2_stage4_11001_ignoreCallOp312 : BOOLEAN;
    signal y_0_i_reg_449 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal x_0_i_0_reg_461 : STD_LOGIC_VECTOR (8 downto 0);
    signal y1_0_i_reg_473 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal x2_0_i_0_reg_485 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_501_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_y_0_i_i_phi_fu_512_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_x_0_i_i_phi_fu_523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal y5_0_i_reg_530 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_phi_mux_x6_0_i_0_phi_fu_546_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal zext_ln126_1_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln126_2_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln126_3_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln126_4_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_2_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_3_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_4_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_3_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_1_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_6_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_7_fu_1030_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_2_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_5_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_8_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal zext_ln147_1_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_2_fu_1246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_3_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_4_fu_1294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage1_01001 : BOOLEAN;
    signal ap_block_pp3_stage2_01001 : BOOLEAN;
    signal ap_block_pp3_stage3_01001 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal trunc_ln96_fu_658_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_1_fu_682_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_2_fu_705_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_3_fu_728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_4_fu_786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_5_fu_810_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_6_fu_833_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_7_fu_856_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_567_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_571_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_581_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_588_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_588_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_600_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_606_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_612_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_612_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_618_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_636_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln126_fu_663_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln126_fu_667_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln122_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_687_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln122_1_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_710_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln122_2_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_733_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_764_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln136_fu_791_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln136_fu_795_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln132_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_815_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln132_1_fu_828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_838_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln132_2_fu_851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_861_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln55_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_906_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln64_1_fu_920_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln64_2_fu_934_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_954_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_968_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_982_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_999_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_1012_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1024_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_1036_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_1048_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_1060_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln78_fu_1072_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln78_2_fu_1075_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_fu_1078_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln78_fu_1095_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln78_fu_1095_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln78_1_fu_1104_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln78_5_fu_1101_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_1_fu_1104_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln83_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1121_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln83_fu_1131_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln83_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1181_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal x6_0_i_0_cast4_fu_1203_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln147_fu_1212_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln147_fu_1216_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln146_fu_1207_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln145_fu_1232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_1238_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln145_1_fu_1256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_1261_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln145_2_fu_1274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_1286_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln146_3_fu_1279_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp2_stage2_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_TVALID_int : STD_LOGIC;
    signal INPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TUSER_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDEST_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_TVALID_int : STD_LOGIC;
    signal OUTPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal OUTPUT_STREAM_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal mul_ln78_fu_1095_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_fu_1095_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_condition_953 : BOOLEAN;
    signal ap_condition_958 : BOOLEAN;
    signal ap_condition_963 : BOOLEAN;
    signal ap_condition_968 : BOOLEAN;

    component apply_kernel_single_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component HLS_accel_dsub_64cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dmul_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dcmp_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_sitodp_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_I_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component HLS_accel_output_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    HLS_accel_CONTROL_BUS_s_axi_U : component HLS_accel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    I_x_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_x_address0,
        ce0 => I_x_ce0,
        we0 => I_x_we0,
        d0 => I_x_d0,
        q0 => I_x_q0,
        address1 => I_x_address1,
        ce1 => I_x_ce1,
        q1 => I_x_q1);

    I_y_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_y_address0,
        ce0 => I_y_ce0,
        we0 => I_y_we0,
        d0 => I_y_d0,
        q0 => I_y_q0,
        address1 => I_y_address1,
        ce1 => I_y_ce1,
        q1 => I_y_q1);

    output_img_U : component HLS_accel_output_bkb
    generic map (
        DataWidth => 1,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_img_address0,
        ce0 => output_img_ce0,
        we0 => output_img_we0,
        d0 => and_ln83_reg_1749,
        q0 => output_img_q0,
        address1 => output_img_address1,
        ce1 => output_img_ce1,
        q1 => output_img_q1);

    grp_apply_kernel_single_s_fu_554 : component apply_kernel_single_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_read => grp_apply_kernel_single_s_fu_554_p_read,
        p_read1 => grp_apply_kernel_single_s_fu_554_p_read1,
        p_read2 => grp_apply_kernel_single_s_fu_554_p_read2,
        p_read3 => grp_apply_kernel_single_s_fu_554_p_read3,
        p_read4 => grp_apply_kernel_single_s_fu_554_p_read4,
        p_read5 => grp_apply_kernel_single_s_fu_554_p_read5,
        p_read6 => grp_apply_kernel_single_s_fu_554_p_read6,
        p_read7 => grp_apply_kernel_single_s_fu_554_p_read7,
        p_read8 => grp_apply_kernel_single_s_fu_554_p_read8,
        ap_return => grp_apply_kernel_single_s_fu_554_ap_return,
        ap_ce => grp_apply_kernel_single_s_fu_554_ap_ce);

    HLS_accel_dsub_64cud_U10 : component HLS_accel_dsub_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_567_p0,
        din1 => grp_fu_567_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p2);

    HLS_accel_dmul_64dEe_U11 : component HLS_accel_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_571_p0,
        din1 => grp_fu_571_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p2);

    HLS_accel_dcmp_64eOg_U12 : component HLS_accel_dcmp_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => R_reg_1733,
        din1 => ap_const_lv64_407F400000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_576_p2);

    HLS_accel_sitodp_fYi_U13 : component HLS_accel_sitodp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_581_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_581_p1);

    regslice_both_INPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDATA,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_data_V_U_ack_in,
        data_out => INPUT_STREAM_TDATA_int,
        vld_out => INPUT_STREAM_TVALID_int,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TKEEP,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_keep_V_U_ack_in,
        data_out => INPUT_STREAM_TKEEP_int,
        vld_out => regslice_both_INPUT_STREAM_keep_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TSTRB,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_strb_V_U_ack_in,
        data_out => INPUT_STREAM_TSTRB_int,
        vld_out => regslice_both_INPUT_STREAM_strb_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TUSER,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_user_V_U_ack_in,
        data_out => INPUT_STREAM_TUSER_int,
        vld_out => regslice_both_INPUT_STREAM_user_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TLAST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_last_V_U_ack_in,
        data_out => INPUT_STREAM_TLAST_int,
        vld_out => regslice_both_INPUT_STREAM_last_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TID,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_id_V_U_ack_in,
        data_out => INPUT_STREAM_TID_int,
        vld_out => regslice_both_INPUT_STREAM_id_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDEST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_dest_V_U_ack_in,
        data_out => INPUT_STREAM_TDEST_int,
        vld_out => regslice_both_INPUT_STREAM_dest_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_STREAM_TDATA_int,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => OUTPUT_STREAM_TREADY_int,
        data_out => OUTPUT_STREAM_TDATA,
        vld_out => regslice_both_OUTPUT_STREAM_data_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TKEEP,
        vld_out => regslice_both_OUTPUT_STREAM_keep_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TSTRB,
        vld_out => regslice_both_OUTPUT_STREAM_strb_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TUSER,
        vld_out => regslice_both_OUTPUT_STREAM_user_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_STREAM_TLAST_int,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TLAST,
        vld_out => regslice_both_OUTPUT_STREAM_last_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TID,
        vld_out => regslice_both_OUTPUT_STREAM_id_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TDEST,
        vld_out => regslice_both_OUTPUT_STREAM_dest_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln131_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                elsif (((icmp_ln131_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state51) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln144_fu_1157_p2 = ap_const_lv1_0) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp3_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((icmp_ln144_fu_1157_p2 = ap_const_lv1_0) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvar_flatten_reg_497 <= ap_const_lv16_0;
            elsif (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_497 <= add_ln54_reg_1385;
            end if; 
        end if;
    end process;

    x2_0_i_0_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then 
                x2_0_i_0_reg_485 <= add_ln132_fu_874_p2;
            elsif (((icmp_ln131_fu_752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x2_0_i_0_reg_485 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x6_0_i_0_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                x6_0_i_0_reg_542 <= add_ln145_reg_1848;
            elsif (((icmp_ln144_fu_1157_p2 = ap_const_lv1_0) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                x6_0_i_0_reg_542 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x_0_i_0_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then 
                x_0_i_0_reg_461 <= add_ln122_fu_746_p2;
            elsif (((icmp_ln121_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_i_0_reg_461 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x_0_i_i_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_0_i_i_reg_519 <= ap_const_lv8_1;
            elsif (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                x_0_i_i_reg_519 <= x_reg_1483;
            end if; 
        end if;
    end process;

    y1_0_i_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y1_0_i_reg_473 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                y1_0_i_reg_473 <= y_1_reg_1356;
            end if; 
        end if;
    end process;

    y5_0_i_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                y5_0_i_reg_530 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                y5_0_i_reg_530 <= y_2_reg_1758;
            end if; 
        end if;
    end process;

    y_0_i_i_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                y_0_i_i_reg_508 <= ap_const_lv8_1;
            elsif (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_0_i_i_reg_508 <= select_ln73_1_reg_1397;
            end if; 
        end if;
    end process;

    y_0_i_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_0_i_reg_449 <= y_reg_1327;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_i_reg_449 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_0_0_reg_1453 <= grp_fu_588_p2;
                Ix2_window_0_1_reg_1468 <= grp_fu_606_p2;
                Ixy_window_0_0_reg_1463 <= grp_fu_600_p2;
                Ixy_window_0_1_reg_1478 <= grp_fu_618_p2;
                Iy2_window_0_0_reg_1458 <= grp_fu_594_p2;
                Iy2_window_0_1_reg_1473 <= grp_fu_612_p2;
                x_reg_1483 <= x_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_0_2_reg_1525 <= grp_fu_606_p2;
                Ix2_window_1_0_reg_1540 <= grp_fu_588_p2;
                Ixy_window_0_2_reg_1535 <= grp_fu_618_p2;
                Ixy_window_1_0_reg_1550 <= grp_fu_600_p2;
                Iy2_window_0_2_reg_1530 <= grp_fu_612_p2;
                Iy2_window_1_0_reg_1545 <= grp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_1_1_reg_1575 <= grp_fu_606_p2;
                Ix2_window_1_2_reg_1590 <= grp_fu_588_p2;
                Ixy_window_1_1_reg_1585 <= grp_fu_618_p2;
                Ixy_window_1_2_reg_1600 <= grp_fu_600_p2;
                Iy2_window_1_1_reg_1580 <= grp_fu_612_p2;
                Iy2_window_1_2_reg_1595 <= grp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_2_0_reg_1615 <= grp_fu_606_p2;
                Ix2_window_2_1_reg_1630 <= grp_fu_588_p2;
                Ixy_window_2_0_reg_1625 <= grp_fu_618_p2;
                Ixy_window_2_1_reg_1640 <= grp_fu_600_p2;
                Iy2_window_2_0_reg_1620 <= grp_fu_612_p2;
                Iy2_window_2_1_reg_1635 <= grp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                Ix2_window_2_2_reg_1645 <= grp_fu_606_p2;
                Ixy_window_2_2_reg_1655 <= grp_fu_618_p2;
                Iy2_window_2_2_reg_1650 <= grp_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                Ixy_window_0_0_reg_1463_pp2_iter1_reg <= Ixy_window_0_0_reg_1463;
                Ixy_window_0_1_reg_1478_pp2_iter1_reg <= Ixy_window_0_1_reg_1478;
                Iy2_window_0_0_reg_1458_pp2_iter1_reg <= Iy2_window_0_0_reg_1458;
                Iy2_window_0_1_reg_1473_pp2_iter1_reg <= Iy2_window_0_1_reg_1473;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                Ixy_window_0_2_reg_1535_pp2_iter1_reg <= Ixy_window_0_2_reg_1535;
                Ixy_window_1_0_reg_1550_pp2_iter1_reg <= Ixy_window_1_0_reg_1550;
                    zext_ln66_4_reg_1500_pp2_iter1_reg(15 downto 0) <= zext_ln66_4_reg_1500(15 downto 0);
                    zext_ln66_4_reg_1500_pp2_iter2_reg(15 downto 0) <= zext_ln66_4_reg_1500_pp2_iter1_reg(15 downto 0);
                    zext_ln66_4_reg_1500_pp2_iter3_reg(15 downto 0) <= zext_ln66_4_reg_1500_pp2_iter2_reg(15 downto 0);
                    zext_ln66_4_reg_1500_pp2_iter4_reg(15 downto 0) <= zext_ln66_4_reg_1500_pp2_iter3_reg(15 downto 0);
                    zext_ln66_4_reg_1500_pp2_iter5_reg(15 downto 0) <= zext_ln66_4_reg_1500_pp2_iter4_reg(15 downto 0);
                    zext_ln66_4_reg_1500_pp2_iter6_reg(15 downto 0) <= zext_ln66_4_reg_1500_pp2_iter5_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                R_reg_1733 <= grp_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                add_ln145_reg_1848 <= add_ln145_fu_1313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln54_reg_1385 <= add_ln54_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_880_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln65_reg_1417 <= add_ln65_fu_948_p2;
                select_ln73_2_reg_1405 <= select_ln73_2_fu_926_p3;
                select_ln73_3_reg_1410 <= select_ln73_3_fu_940_p3;
                select_ln73_reg_1390 <= select_ln73_fu_898_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                and_ln83_reg_1749 <= and_ln83_fu_1151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                det_M_reg_1723 <= grp_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                empty_22_reg_1340 <= empty_22_fu_654_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                empty_31_reg_1369 <= empty_31_fu_782_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_1193_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                empty_42_reg_1782 <= empty_42_fu_1199_p1;
                icmp_ln148_reg_1793 <= icmp_ln148_fu_1226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln145_reg_1778 <= icmp_ln145_fu_1193_p2;
                icmp_ln145_reg_1778_pp3_iter1_reg <= icmp_ln145_reg_1778;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then
                icmp_ln148_1_reg_1823 <= icmp_ln148_1_fu_1299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln54_reg_1381 <= icmp_ln54_fu_880_p2;
                icmp_ln54_reg_1381_pp2_iter1_reg <= icmp_ln54_reg_1381;
                icmp_ln54_reg_1381_pp2_iter2_reg <= icmp_ln54_reg_1381_pp2_iter1_reg;
                icmp_ln54_reg_1381_pp2_iter3_reg <= icmp_ln54_reg_1381_pp2_iter2_reg;
                icmp_ln54_reg_1381_pp2_iter4_reg <= icmp_ln54_reg_1381_pp2_iter3_reg;
                icmp_ln54_reg_1381_pp2_iter5_reg <= icmp_ln54_reg_1381_pp2_iter4_reg;
                icmp_ln54_reg_1381_pp2_iter6_reg <= icmp_ln54_reg_1381_pp2_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                icmp_ln83_1_reg_1744 <= icmp_ln83_1_fu_1141_p2;
                icmp_ln83_reg_1739 <= icmp_ln83_fu_1135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                mul_ln78_1_reg_1687 <= mul_ln78_1_fu_1104_p2;
                mul_ln78_reg_1682 <= mul_ln78_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then
                output_img_load_1_reg_1808 <= output_img_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                output_img_load_2_reg_1833 <= output_img_q1;
                output_img_load_3_reg_1838 <= output_img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_880_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln73_1_reg_1397 <= select_ln73_1_fu_912_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_1157_p2 = ap_const_lv1_0) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    shl_ln_reg_1768(15 downto 8) <= shl_ln_fu_1173_p3(15 downto 8);
                trunc_ln146_reg_1763 <= trunc_ln146_fu_1169_p1;
                    zext_ln145_reg_1773(16 downto 8) <= zext_ln145_fu_1189_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                tmp_10_reg_1666 <= grp_apply_kernel_single_s_fu_554_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                tmp_11_reg_1672 <= grp_apply_kernel_single_s_fu_554_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_3_reg_1708 <= grp_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                tmp_4_reg_1713 <= grp_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_5_reg_1718 <= grp_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_6_reg_1728 <= grp_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                tmp_7_reg_1660 <= grp_apply_kernel_single_s_fu_554_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                trace_M_reg_1702 <= grp_fu_581_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                y_1_reg_1356 <= y_1_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                y_2_reg_1758 <= y_2_fu_1163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_reg_1327 <= y_fu_630_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln122_reg_1332(16 downto 8) <= zext_ln122_fu_644_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    zext_ln132_reg_1361(16 downto 8) <= zext_ln132_fu_772_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    zext_ln66_4_reg_1500(15 downto 0) <= zext_ln66_4_fu_1018_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln122_reg_1332(7 downto 0) <= "00000000";
    zext_ln122_reg_1332(17) <= '0';
    zext_ln132_reg_1361(7 downto 0) <= "00000000";
    zext_ln132_reg_1361(17) <= '0';
    zext_ln66_4_reg_1500(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1500_pp2_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1500_pp2_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1500_pp2_iter3_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1500_pp2_iter4_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1500_pp2_iter5_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1500_pp2_iter6_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    shl_ln_reg_1768(7 downto 0) <= "00000000";
    zext_ln145_reg_1773(7 downto 0) <= "00000000";
    zext_ln145_reg_1773(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln122_fu_648_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln132_fu_776_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, icmp_ln121_fu_624_p2, ap_CS_fsm_state2, icmp_ln131_fu_752_p2, ap_CS_fsm_state8, icmp_ln54_fu_880_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, icmp_ln144_fu_1157_p2, ap_CS_fsm_state50, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk, icmp_ln145_fu_1193_p2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage4_subdone, ap_block_pp3_stage0_subdone, ap_block_pp3_stage3_subdone, ap_block_pp3_stage1_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone, ap_block_pp2_stage3_subdone, ap_block_pp3_stage2_subdone, INPUT_STREAM_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln121_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln122_fu_648_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln131_fu_752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln132_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln54_fu_880_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln54_fu_880_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) and (ap_const_boolean_0 = ap_block_pp2_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln144_fu_1157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln144_fu_1157_p2 = ap_const_lv1_0) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln145_fu_1193_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln145_fu_1193_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp3_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_pp3_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage3;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln122_fu_648_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln132_fu_776_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, INPUT_STREAM_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_TVALID_int;
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_STREAM_TREADY_assign_proc : process(INPUT_STREAM_TVALID, regslice_both_INPUT_STREAM_data_V_U_ack_in)
    begin
        if (((ap_const_logic_1 = INPUT_STREAM_TVALID) and (regslice_both_INPUT_STREAM_data_V_U_ack_in = ap_const_logic_1))) then 
            INPUT_STREAM_TREADY <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_TREADY_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln122_fu_648_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, icmp_ln132_fu_776_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, INPUT_STREAM_TVALID_int)
    begin
        if (((not(((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or (not(((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)))) then 
            INPUT_STREAM_TREADY_int <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    I_x_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln126_1_fu_672_p1, zext_ln126_2_fu_695_p1, zext_ln126_3_fu_718_p1, zext_ln126_4_fu_741_p1, zext_ln66_fu_962_p1, zext_ln66_1_fu_988_p1, zext_ln66_7_fu_1030_p1, zext_ln66_5_fu_1054_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln66_5_fu_1054_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln66_7_fu_1030_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln66_1_fu_988_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            I_x_address0 <= zext_ln66_fu_962_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            I_x_address0 <= zext_ln126_4_fu_741_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            I_x_address0 <= zext_ln126_3_fu_718_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_x_address0 <= zext_ln126_2_fu_695_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            I_x_address0 <= zext_ln126_1_fu_672_p1(16 - 1 downto 0);
        else 
            I_x_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, zext_ln66_4_fu_1018_p1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln66_3_fu_976_p1, zext_ln66_6_fu_1006_p1, zext_ln66_2_fu_1042_p1, zext_ln66_8_fu_1066_p1, ap_block_pp2_stage4)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                I_x_address1 <= zext_ln66_8_fu_1066_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                I_x_address1 <= zext_ln66_2_fu_1042_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                I_x_address1 <= zext_ln66_4_fu_1018_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                I_x_address1 <= zext_ln66_6_fu_1006_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                I_x_address1 <= zext_ln66_3_fu_976_p1(16 - 1 downto 0);
            else 
                I_x_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            I_x_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln122_fu_648_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, INPUT_STREAM_TVALID_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or (not(((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            I_x_ce0 <= ap_const_logic_1;
        else 
            I_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_x_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            I_x_ce1 <= ap_const_logic_1;
        else 
            I_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    I_x_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, trunc_ln96_fu_658_p1, trunc_ln96_1_fu_682_p1, trunc_ln96_2_fu_705_p1, trunc_ln96_3_fu_728_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            I_x_d0 <= trunc_ln96_3_fu_728_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            I_x_d0 <= trunc_ln96_2_fu_705_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_x_d0 <= trunc_ln96_1_fu_682_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            I_x_d0 <= trunc_ln96_fu_658_p1;
        else 
            I_x_d0 <= "XXXXXXXX";
        end if; 
    end process;


    I_x_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln122_fu_648_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, INPUT_STREAM_TVALID_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or (not(((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            I_x_we0 <= ap_const_logic_1;
        else 
            I_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln136_1_fu_800_p1, zext_ln136_2_fu_823_p1, zext_ln136_3_fu_846_p1, zext_ln136_4_fu_869_p1, zext_ln66_fu_962_p1, zext_ln66_1_fu_988_p1, zext_ln66_7_fu_1030_p1, zext_ln66_5_fu_1054_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln66_5_fu_1054_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln66_7_fu_1030_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln66_1_fu_988_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            I_y_address0 <= zext_ln66_fu_962_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            I_y_address0 <= zext_ln136_4_fu_869_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            I_y_address0 <= zext_ln136_3_fu_846_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            I_y_address0 <= zext_ln136_2_fu_823_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            I_y_address0 <= zext_ln136_1_fu_800_p1(16 - 1 downto 0);
        else 
            I_y_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, zext_ln66_4_fu_1018_p1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln66_3_fu_976_p1, zext_ln66_6_fu_1006_p1, zext_ln66_2_fu_1042_p1, zext_ln66_8_fu_1066_p1, ap_block_pp2_stage4)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                I_y_address1 <= zext_ln66_8_fu_1066_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                I_y_address1 <= zext_ln66_2_fu_1042_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                I_y_address1 <= zext_ln66_4_fu_1018_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                I_y_address1 <= zext_ln66_6_fu_1006_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                I_y_address1 <= zext_ln66_3_fu_976_p1(16 - 1 downto 0);
            else 
                I_y_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            I_y_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_ce0_assign_proc : process(ap_CS_fsm_state9, icmp_ln132_fu_776_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, INPUT_STREAM_TVALID_int)
    begin
        if (((not(((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)))) then 
            I_y_ce0 <= ap_const_logic_1;
        else 
            I_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            I_y_ce1 <= ap_const_logic_1;
        else 
            I_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, trunc_ln96_4_fu_786_p1, trunc_ln96_5_fu_810_p1, trunc_ln96_6_fu_833_p1, trunc_ln96_7_fu_856_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            I_y_d0 <= trunc_ln96_7_fu_856_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            I_y_d0 <= trunc_ln96_6_fu_833_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            I_y_d0 <= trunc_ln96_5_fu_810_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            I_y_d0 <= trunc_ln96_4_fu_786_p1;
        else 
            I_y_d0 <= "XXXXXXXX";
        end if; 
    end process;


    I_y_we0_assign_proc : process(ap_CS_fsm_state9, icmp_ln132_fu_776_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, INPUT_STREAM_TVALID_int)
    begin
        if (((not(((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = INPUT_STREAM_TVALID_int)))) then 
            I_y_we0 <= ap_const_logic_1;
        else 
            I_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1, icmp_ln145_reg_1778, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln145_reg_1778_pp3_iter1_reg, OUTPUT_STREAM_TREADY_int)
    begin
        if ((((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage3)) or ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage2)) or ((icmp_ln145_reg_1778_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1)) or ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1)))) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUTPUT_STREAM_TREADY_int;
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_STREAM_TDATA_int_assign_proc : process(icmp_ln145_reg_1778, zext_ln102_fu_1251_p1, zext_ln102_1_fu_1305_p1, zext_ln102_2_fu_1309_p1, zext_ln102_3_fu_1319_p1, ap_condition_953, ap_condition_958, ap_condition_963, ap_condition_968)
    begin
        if ((icmp_ln145_reg_1778 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_968)) then 
                OUTPUT_STREAM_TDATA_int <= zext_ln102_3_fu_1319_p1;
            elsif ((ap_const_boolean_1 = ap_condition_963)) then 
                OUTPUT_STREAM_TDATA_int <= zext_ln102_2_fu_1309_p1;
            elsif ((ap_const_boolean_1 = ap_condition_958)) then 
                OUTPUT_STREAM_TDATA_int <= zext_ln102_1_fu_1305_p1;
            elsif ((ap_const_boolean_1 = ap_condition_953)) then 
                OUTPUT_STREAM_TDATA_int <= zext_ln102_fu_1251_p1;
            else 
                OUTPUT_STREAM_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUTPUT_STREAM_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_STREAM_TLAST_int_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, icmp_ln145_reg_1778, ap_CS_fsm_pp3_stage2, ap_CS_fsm_pp3_stage3, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln148_reg_1793, icmp_ln148_1_reg_1823, ap_block_pp3_stage1_01001, ap_block_pp3_stage2_01001, ap_block_pp3_stage3_01001, ap_block_pp3_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            OUTPUT_STREAM_TLAST_int <= icmp_ln148_1_reg_1823;
        elsif ((((ap_const_boolean_0 = ap_block_pp3_stage3_01001) and (icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage2_01001) and (icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then 
            OUTPUT_STREAM_TLAST_int <= ap_const_lv1_0;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage1_01001) and (icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1))) then 
            OUTPUT_STREAM_TLAST_int <= icmp_ln148_reg_1793;
        else 
            OUTPUT_STREAM_TLAST_int <= "X";
        end if; 
    end process;

    OUTPUT_STREAM_TVALID <= regslice_both_OUTPUT_STREAM_data_V_U_vld_out;

    OUTPUT_STREAM_TVALID_int_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, icmp_ln145_reg_1778, ap_CS_fsm_pp3_stage2, ap_CS_fsm_pp3_stage3, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001, ap_block_pp3_stage1_11001, ap_block_pp3_stage2_11001, ap_block_pp3_stage3_11001)
    begin
        if ((((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)))) then 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln122_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv9_4) + unsigned(x_0_i_0_reg_461));
    add_ln126_fu_667_p2 <= std_logic_vector(unsigned(zext_ln126_fu_663_p1) + unsigned(zext_ln122_reg_1332));
    add_ln132_fu_874_p2 <= std_logic_vector(unsigned(ap_const_lv9_4) + unsigned(x2_0_i_0_reg_485));
    add_ln136_fu_795_p2 <= std_logic_vector(unsigned(zext_ln136_fu_791_p1) + unsigned(zext_ln132_reg_1361));
    add_ln145_fu_1313_p2 <= std_logic_vector(unsigned(ap_const_lv9_4) + unsigned(x6_0_i_0_reg_542));
    add_ln146_3_fu_1279_p3 <= (trunc_ln146_reg_1763 & or_ln145_2_fu_1274_p2);
    add_ln146_fu_1207_p2 <= std_logic_vector(unsigned(x6_0_i_0_cast4_fu_1203_p1) + unsigned(shl_ln_reg_1768));
    add_ln147_fu_1216_p2 <= std_logic_vector(unsigned(zext_ln147_fu_1212_p1) + unsigned(zext_ln145_reg_1773));
    add_ln54_fu_886_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_501_p4) + unsigned(ap_const_lv16_1));
    add_ln64_1_fu_920_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(ap_phi_mux_y_0_i_i_phi_fu_512_p4));
    add_ln64_2_fu_934_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(ap_phi_mux_y_0_i_i_phi_fu_512_p4));
    add_ln64_fu_906_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_i_i_phi_fu_512_p4));
    add_ln65_fu_948_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(select_ln73_fu_898_p3));
    add_ln79_fu_1078_p2 <= std_logic_vector(unsigned(zext_ln78_fu_1072_p1) + unsigned(zext_ln78_2_fu_1075_p1));
    and_ln83_fu_1151_p2 <= (or_ln83_fu_1147_p2 and grp_fu_576_p2);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(14);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(17);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(21);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(22);
    ap_CS_fsm_pp3_stage3 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state49 <= ap_CS_fsm(18);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(19);
    ap_CS_fsm_state57 <= ap_CS_fsm(24);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001_ignoreCallOp307 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001_ignoreCallOp308 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001_ignoreCallOp310 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001_ignoreCallOp312 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state55_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_block_state55_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state55_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage1_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_state52_io, ap_block_state56_io)
    begin
                ap_block_pp3_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state56_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state52_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp3_stage1_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_state52_io, ap_block_state56_io)
    begin
                ap_block_pp3_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state56_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state52_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage2_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state53_io)
    begin
                ap_block_pp3_stage2_11001 <= ((ap_const_boolean_1 = ap_block_state53_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage2_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state53_io)
    begin
                ap_block_pp3_stage2_subdone <= ((ap_const_boolean_1 = ap_block_state53_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage3_11001_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state54_io)
    begin
                ap_block_pp3_stage3_11001 <= ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage3_subdone_assign_proc : process(ap_enable_reg_pp3_iter0, ap_block_state54_io)
    begin
                ap_block_pp3_stage3_subdone <= ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;

        ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage1_iter0_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage2_iter0_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage3_iter0_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage4_iter0_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage1_iter1_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage2_iter1_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage3_iter1_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage4_iter1_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage1_iter2_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage2_iter2_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage3_iter2_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage4_iter2_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(icmp_ln122_fu_648_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_state3 <= ((icmp_ln122_fu_648_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int));
    end process;

        ap_block_state30_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage1_iter3_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage2_iter3_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage3_iter3_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage4_iter3_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage1_iter4_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage2_iter4_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage3_iter4_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage4_iter4_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage1_iter5_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage2_iter5_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage3_iter5_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage4_iter5_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage1_iter6_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage2_iter6_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage3_iter6_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage4_iter6_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state52_io_assign_proc : process(icmp_ln145_reg_1778, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state52_io <= ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state52_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state53_io_assign_proc : process(icmp_ln145_reg_1778, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state53_io <= ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state53_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_io_assign_proc : process(icmp_ln145_reg_1778, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state54_io <= ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state54_pp3_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state55_io_assign_proc : process(icmp_ln145_reg_1778, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state55_io <= ((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state55_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state56_io_assign_proc : process(icmp_ln145_reg_1778_pp3_iter1_reg, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state56_io <= ((icmp_ln145_reg_1778_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state56_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_assign_proc : process(icmp_ln132_fu_776_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_state9 <= ((icmp_ln132_fu_776_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int));
    end process;


    ap_condition_953_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_01001)
    begin
                ap_condition_953 <= ((ap_const_boolean_0 = ap_block_pp3_stage1_01001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1));
    end process;


    ap_condition_958_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_01001)
    begin
                ap_condition_958 <= ((ap_const_boolean_0 = ap_block_pp3_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_condition_963_assign_proc : process(ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage3, ap_block_pp3_stage3_01001)
    begin
                ap_condition_963 <= ((ap_const_boolean_0 = ap_block_pp3_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage3) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1));
    end process;


    ap_condition_968_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_01001)
    begin
                ap_condition_968 <= ((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0));
    end process;


    ap_condition_pp2_exit_iter0_state14_assign_proc : process(icmp_ln54_fu_880_p2)
    begin
        if ((icmp_ln54_fu_880_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state51_assign_proc : process(icmp_ln145_fu_1193_p2)
    begin
        if ((icmp_ln145_fu_1193_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state51 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln144_fu_1157_p2, ap_CS_fsm_state50, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk)
    begin
        if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln144_fu_1157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_501_p4_assign_proc : process(indvar_flatten_reg_497, icmp_ln54_reg_1381, ap_CS_fsm_pp2_stage0, add_ln54_reg_1385, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_501_p4 <= add_ln54_reg_1385;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_501_p4 <= indvar_flatten_reg_497;
        end if; 
    end process;


    ap_phi_mux_x6_0_i_0_phi_fu_546_p4_assign_proc : process(icmp_ln145_reg_1778, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, x6_0_i_0_reg_542, add_ln145_reg_1848)
    begin
        if (((icmp_ln145_reg_1778 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_x6_0_i_0_phi_fu_546_p4 <= add_ln145_reg_1848;
        else 
            ap_phi_mux_x6_0_i_0_phi_fu_546_p4 <= x6_0_i_0_reg_542;
        end if; 
    end process;


    ap_phi_mux_x_0_i_i_phi_fu_523_p4_assign_proc : process(x_0_i_i_reg_519, icmp_ln54_reg_1381, ap_CS_fsm_pp2_stage0, x_reg_1483, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_x_0_i_i_phi_fu_523_p4 <= x_reg_1483;
        else 
            ap_phi_mux_x_0_i_i_phi_fu_523_p4 <= x_0_i_i_reg_519;
        end if; 
    end process;


    ap_phi_mux_y_0_i_i_phi_fu_512_p4_assign_proc : process(y_0_i_i_reg_508, icmp_ln54_reg_1381, ap_CS_fsm_pp2_stage0, select_ln73_1_reg_1397, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln54_reg_1381 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_y_0_i_i_phi_fu_512_p4 <= select_ln73_1_reg_1397;
        else 
            ap_phi_mux_y_0_i_i_phi_fu_512_p4 <= y_0_i_i_reg_508;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln144_fu_1157_p2, ap_CS_fsm_state50, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk)
    begin
        if (((regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0) and (icmp_ln144_fu_1157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln83_fu_1118_p1 <= R_reg_1733;
    empty_22_fu_654_p1 <= x_0_i_0_reg_461(8 - 1 downto 0);
    empty_31_fu_782_p1 <= x2_0_i_0_reg_485(8 - 1 downto 0);
    empty_42_fu_1199_p1 <= ap_phi_mux_x6_0_i_0_phi_fu_546_p4(8 - 1 downto 0);

    grp_apply_kernel_single_s_fu_554_ap_ce_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage1_11001_ignoreCallOp307, ap_block_pp2_stage2_11001_ignoreCallOp308, ap_block_pp2_stage3_11001_ignoreCallOp310, ap_block_pp2_stage4_11001_ignoreCallOp312)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage4_11001_ignoreCallOp312) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001_ignoreCallOp310) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001_ignoreCallOp308) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001_ignoreCallOp307) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            grp_apply_kernel_single_s_fu_554_ap_ce <= ap_const_logic_1;
        else 
            grp_apply_kernel_single_s_fu_554_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, Ix2_window_0_0_reg_1453, Iy2_window_0_0_reg_1458_pp2_iter1_reg, Ixy_window_0_0_reg_1463_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read <= Ixy_window_0_0_reg_1463_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read <= Iy2_window_0_0_reg_1458_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read <= Ix2_window_0_0_reg_1453;
            else 
                grp_apply_kernel_single_s_fu_554_p_read <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read1_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, Ix2_window_0_1_reg_1468, Iy2_window_0_1_reg_1473_pp2_iter1_reg, Ixy_window_0_1_reg_1478_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read1 <= Ixy_window_0_1_reg_1478_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read1 <= Iy2_window_0_1_reg_1473_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read1 <= Ix2_window_0_1_reg_1468;
            else 
                grp_apply_kernel_single_s_fu_554_p_read1 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read2_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, Ix2_window_0_2_reg_1525, Iy2_window_0_2_reg_1530, Ixy_window_0_2_reg_1535_pp2_iter1_reg, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read2 <= Ixy_window_0_2_reg_1535_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read2 <= Iy2_window_0_2_reg_1530;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read2 <= Ix2_window_0_2_reg_1525;
            else 
                grp_apply_kernel_single_s_fu_554_p_read2 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read2 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read3_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, Ix2_window_1_0_reg_1540, Iy2_window_1_0_reg_1545, Ixy_window_1_0_reg_1550_pp2_iter1_reg, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read3 <= Ixy_window_1_0_reg_1550_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read3 <= Iy2_window_1_0_reg_1545;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read3 <= Ix2_window_1_0_reg_1540;
            else 
                grp_apply_kernel_single_s_fu_554_p_read3 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read3 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read4_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_1_1_reg_1575, Iy2_window_1_1_reg_1580, Ixy_window_1_1_reg_1585, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read4 <= Ixy_window_1_1_reg_1585;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read4 <= Iy2_window_1_1_reg_1580;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read4 <= Ix2_window_1_1_reg_1575;
            else 
                grp_apply_kernel_single_s_fu_554_p_read4 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read4 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read5_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_1_2_reg_1590, Iy2_window_1_2_reg_1595, Ixy_window_1_2_reg_1600, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read5 <= Ixy_window_1_2_reg_1600;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read5 <= Iy2_window_1_2_reg_1595;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read5 <= Ix2_window_1_2_reg_1590;
            else 
                grp_apply_kernel_single_s_fu_554_p_read5 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read5 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read6_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_2_0_reg_1615, Iy2_window_2_0_reg_1620, Ixy_window_2_0_reg_1625, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read6 <= Ixy_window_2_0_reg_1625;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read6 <= Iy2_window_2_0_reg_1620;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read6 <= Ix2_window_2_0_reg_1615;
            else 
                grp_apply_kernel_single_s_fu_554_p_read6 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read6 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read7_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_2_1_reg_1630, Iy2_window_2_1_reg_1635, Ixy_window_2_1_reg_1640, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read7 <= Ixy_window_2_1_reg_1640;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read7 <= Iy2_window_2_1_reg_1635;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read7 <= Ix2_window_2_1_reg_1630;
            else 
                grp_apply_kernel_single_s_fu_554_p_read7 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read7 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_554_p_read8_assign_proc : process(icmp_ln54_reg_1381_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_2_2_reg_1645, ap_enable_reg_pp2_iter1, Iy2_window_2_2_reg_1650, Ixy_window_2_2_reg_1655, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_554_p_read8 <= Ixy_window_2_2_reg_1655;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_554_p_read8 <= Iy2_window_2_2_reg_1650;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_554_p_read8 <= Ix2_window_2_2_reg_1645;
            else 
                grp_apply_kernel_single_s_fu_554_p_read8 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_554_p_read8 <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_567_p0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, tmp_3_reg_1708, ap_enable_reg_pp2_iter3, det_M_reg_1723, ap_enable_reg_pp2_iter5, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_567_p0 <= det_M_reg_1723;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            grp_fu_567_p0 <= tmp_3_reg_1708;
        else 
            grp_fu_567_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_567_p1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter3, tmp_4_reg_1713, tmp_6_reg_1728, ap_enable_reg_pp2_iter5, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_567_p1 <= tmp_6_reg_1728;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            grp_fu_567_p1 <= tmp_4_reg_1713;
        else 
            grp_fu_567_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_571_p0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, trace_M_reg_1702, ap_enable_reg_pp2_iter3, tmp_5_reg_1718, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_571_p0 <= tmp_5_reg_1718;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_571_p0 <= trace_M_reg_1702;
        else 
            grp_fu_571_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_571_p1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, trace_M_reg_1702, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_571_p1 <= ap_const_lv64_3FA47AE147AE147B;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_571_p1 <= trace_M_reg_1702;
        else 
            grp_fu_571_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_581_p0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter1, zext_ln79_fu_1084_p1, zext_ln78_4_fu_1110_p1, zext_ln78_6_fu_1114_p1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_581_p0 <= zext_ln78_6_fu_1114_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_581_p0 <= zext_ln78_4_fu_1110_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            grp_fu_581_p0 <= zext_ln79_fu_1084_p1;
        else 
            grp_fu_581_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_588_p0 <= I_x_q0;
    grp_fu_588_p1 <= I_x_q0;
    grp_fu_588_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_588_p0) * signed(grp_fu_588_p1))), 8));
    grp_fu_594_p0 <= I_y_q0;
    grp_fu_594_p1 <= I_y_q0;
    grp_fu_594_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_594_p0) * signed(grp_fu_594_p1))), 8));
    grp_fu_600_p0 <= I_x_q0;
    grp_fu_600_p1 <= I_y_q0;
    grp_fu_600_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_600_p0) * signed(grp_fu_600_p1))), 8));
    grp_fu_606_p0 <= I_x_q1;
    grp_fu_606_p1 <= I_x_q1;
    grp_fu_606_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_606_p0) * signed(grp_fu_606_p1))), 8));
    grp_fu_612_p0 <= I_y_q1;
    grp_fu_612_p1 <= I_y_q1;
    grp_fu_612_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_612_p0) * signed(grp_fu_612_p1))), 8));
    grp_fu_618_p0 <= I_x_q1;
    grp_fu_618_p1 <= I_y_q1;
    grp_fu_618_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_618_p0) * signed(grp_fu_618_p1))), 8));
    icmp_ln121_fu_624_p2 <= "1" when (y_0_i_reg_449 = ap_const_lv9_100) else "0";
    icmp_ln122_fu_648_p2 <= "1" when (x_0_i_0_reg_461 = ap_const_lv9_100) else "0";
    icmp_ln131_fu_752_p2 <= "1" when (y1_0_i_reg_473 = ap_const_lv9_100) else "0";
    icmp_ln132_fu_776_p2 <= "1" when (x2_0_i_0_reg_485 = ap_const_lv9_100) else "0";
    icmp_ln144_fu_1157_p2 <= "1" when (y5_0_i_reg_530 = ap_const_lv9_100) else "0";
    icmp_ln145_fu_1193_p2 <= "1" when (ap_phi_mux_x6_0_i_0_phi_fu_546_p4 = ap_const_lv9_100) else "0";
    icmp_ln148_1_fu_1299_p2 <= "1" when (add_ln146_3_fu_1279_p3 = ap_const_lv16_FFFF) else "0";
    icmp_ln148_fu_1226_p2 <= "1" when (add_ln146_fu_1207_p2 = ap_const_lv16_FFFF) else "0";
    icmp_ln54_fu_880_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_501_p4 = ap_const_lv16_FC04) else "0";
    icmp_ln55_fu_892_p2 <= "1" when (ap_phi_mux_x_0_i_i_phi_fu_523_p4 = ap_const_lv8_FF) else "0";
    icmp_ln83_1_fu_1141_p2 <= "1" when (trunc_ln83_fu_1131_p1 = ap_const_lv52_0) else "0";
    icmp_ln83_fu_1135_p2 <= "0" when (tmp_12_fu_1121_p4 = ap_const_lv11_7FF) else "1";
    mul_ln78_1_fu_1104_p0 <= zext_ln78_5_fu_1101_p1(5 - 1 downto 0);
    mul_ln78_1_fu_1104_p1 <= zext_ln78_5_fu_1101_p1(5 - 1 downto 0);
    mul_ln78_1_fu_1104_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_1_fu_1104_p0) * unsigned(mul_ln78_1_fu_1104_p1), 10));
    mul_ln78_fu_1095_p0 <= mul_ln78_fu_1095_p00(5 - 1 downto 0);
    mul_ln78_fu_1095_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1660),10));
    mul_ln78_fu_1095_p1 <= mul_ln78_fu_1095_p10(5 - 1 downto 0);
    mul_ln78_fu_1095_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1666),10));
    mul_ln78_fu_1095_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_fu_1095_p0) * unsigned(mul_ln78_fu_1095_p1), 10));
    or_ln122_1_fu_700_p2 <= (empty_22_reg_1340 or ap_const_lv8_2);
    or_ln122_2_fu_723_p2 <= (empty_22_reg_1340 or ap_const_lv8_3);
    or_ln122_fu_677_p2 <= (empty_22_reg_1340 or ap_const_lv8_1);
    or_ln132_1_fu_828_p2 <= (empty_31_reg_1369 or ap_const_lv8_2);
    or_ln132_2_fu_851_p2 <= (empty_31_reg_1369 or ap_const_lv8_3);
    or_ln132_fu_805_p2 <= (empty_31_reg_1369 or ap_const_lv8_1);
    or_ln145_1_fu_1256_p2 <= (empty_42_reg_1782 or ap_const_lv8_2);
    or_ln145_2_fu_1274_p2 <= (empty_42_reg_1782 or ap_const_lv8_3);
    or_ln145_fu_1232_p2 <= (empty_42_fu_1199_p1 or ap_const_lv8_1);
    or_ln83_fu_1147_p2 <= (icmp_ln83_reg_1739 or icmp_ln83_1_reg_1744);

    output_img_address0_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, zext_ln66_4_reg_1500_pp2_iter6_reg, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter6, ap_block_pp2_stage4, zext_ln147_1_fu_1221_p1, zext_ln147_4_fu_1294_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            output_img_address0 <= zext_ln147_4_fu_1294_p1(16 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            output_img_address0 <= zext_ln147_1_fu_1221_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            output_img_address0 <= zext_ln66_4_reg_1500_pp2_iter6_reg(16 - 1 downto 0);
        else 
            output_img_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_img_address1_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, zext_ln147_2_fu_1246_p1, zext_ln147_3_fu_1269_p1)
    begin
        if ((ap_enable_reg_pp3_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
                output_img_address1 <= zext_ln147_3_fu_1269_p1(16 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
                output_img_address1 <= zext_ln147_2_fu_1246_p1(16 - 1 downto 0);
            else 
                output_img_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            output_img_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_img_ce0_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp2_iter6, ap_block_pp3_stage0_11001, ap_block_pp3_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)))) then 
            output_img_ce0 <= ap_const_logic_1;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_img_ce1_assign_proc : process(ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_block_pp3_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage1_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1)))) then 
            output_img_ce1 <= ap_const_logic_1;
        else 
            output_img_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_img_we0_assign_proc : process(icmp_ln54_reg_1381_pp2_iter6_reg, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((icmp_ln54_reg_1381_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            output_img_we0 <= ap_const_logic_1;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln73_1_fu_912_p3 <= 
        add_ln64_fu_906_p2 when (icmp_ln55_fu_892_p2(0) = '1') else 
        ap_phi_mux_y_0_i_i_phi_fu_512_p4;
    select_ln73_2_fu_926_p3 <= 
        ap_phi_mux_y_0_i_i_phi_fu_512_p4 when (icmp_ln55_fu_892_p2(0) = '1') else 
        add_ln64_1_fu_920_p2;
    select_ln73_3_fu_940_p3 <= 
        add_ln64_2_fu_934_p2 when (icmp_ln55_fu_892_p2(0) = '1') else 
        add_ln64_fu_906_p2;
    select_ln73_fu_898_p3 <= 
        ap_const_lv8_1 when (icmp_ln55_fu_892_p2(0) = '1') else 
        ap_phi_mux_x_0_i_i_phi_fu_523_p4;
    shl_ln_fu_1173_p3 <= (trunc_ln146_fu_1169_p1 & ap_const_lv8_0);
    tmp_12_fu_1121_p4 <= bitcast_ln83_fu_1118_p1(62 downto 52);
    tmp_15_fu_636_p3 <= (y_0_i_reg_449 & ap_const_lv8_0);
    tmp_16_fu_764_p3 <= (y1_0_i_reg_473 & ap_const_lv8_0);
    tmp_17_fu_687_p3 <= (y_0_i_reg_449 & or_ln122_fu_677_p2);
    tmp_18_fu_710_p3 <= (y_0_i_reg_449 & or_ln122_1_fu_700_p2);
    tmp_19_fu_733_p3 <= (y_0_i_reg_449 & or_ln122_2_fu_723_p2);
    tmp_20_fu_954_p3 <= (select_ln73_2_fu_926_p3 & add_ln65_fu_948_p2);
    tmp_21_fu_982_p3 <= (select_ln73_1_reg_1397 & add_ln65_reg_1417);
    tmp_22_fu_1036_p3 <= (select_ln73_3_reg_1410 & add_ln65_reg_1417);
    tmp_23_fu_968_p3 <= (select_ln73_2_fu_926_p3 & select_ln73_fu_898_p3);
    tmp_24_fu_1012_p3 <= (select_ln73_1_reg_1397 & select_ln73_reg_1390);
    tmp_25_fu_1048_p3 <= (select_ln73_3_reg_1410 & select_ln73_reg_1390);
    tmp_26_fu_999_p3 <= (select_ln73_2_reg_1405 & x_fu_994_p2);
    tmp_27_fu_1024_p3 <= (select_ln73_1_reg_1397 & x_reg_1483);
    tmp_28_fu_1060_p3 <= (select_ln73_3_reg_1410 & x_reg_1483);
    tmp_29_fu_815_p3 <= (y1_0_i_reg_473 & or_ln132_fu_805_p2);
    tmp_30_fu_838_p3 <= (y1_0_i_reg_473 & or_ln132_1_fu_828_p2);
    tmp_31_fu_861_p3 <= (y1_0_i_reg_473 & or_ln132_2_fu_851_p2);
    tmp_32_fu_1181_p3 <= (y5_0_i_reg_530 & ap_const_lv8_0);
    tmp_33_fu_1238_p3 <= (y5_0_i_reg_530 & or_ln145_fu_1232_p2);
    tmp_34_fu_1261_p3 <= (y5_0_i_reg_530 & or_ln145_1_fu_1256_p2);
    tmp_35_fu_1286_p3 <= (y5_0_i_reg_530 & or_ln145_2_fu_1274_p2);
    trunc_ln146_fu_1169_p1 <= y5_0_i_reg_530(8 - 1 downto 0);
    trunc_ln83_fu_1131_p1 <= bitcast_ln83_fu_1118_p1(52 - 1 downto 0);
    trunc_ln96_1_fu_682_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    trunc_ln96_2_fu_705_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    trunc_ln96_3_fu_728_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    trunc_ln96_4_fu_786_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    trunc_ln96_5_fu_810_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    trunc_ln96_6_fu_833_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    trunc_ln96_7_fu_856_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    trunc_ln96_fu_658_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    x6_0_i_0_cast4_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x6_0_i_0_phi_fu_546_p4),16));
    x_fu_994_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln73_reg_1390));
    y_1_fu_758_p2 <= std_logic_vector(unsigned(y1_0_i_reg_473) + unsigned(ap_const_lv9_1));
    y_2_fu_1163_p2 <= std_logic_vector(unsigned(y5_0_i_reg_530) + unsigned(ap_const_lv9_1));
    y_fu_630_p2 <= std_logic_vector(unsigned(y_0_i_reg_449) + unsigned(ap_const_lv9_1));
    zext_ln102_1_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_load_1_reg_1808),32));
    zext_ln102_2_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_load_2_reg_1833),32));
    zext_ln102_3_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_load_3_reg_1838),32));
    zext_ln102_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_q0),32));
    zext_ln122_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_636_p3),18));
    zext_ln126_1_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_fu_667_p2),64));
    zext_ln126_2_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_687_p3),64));
    zext_ln126_3_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_710_p3),64));
    zext_ln126_4_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_733_p3),64));
    zext_ln126_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_i_0_reg_461),18));
    zext_ln132_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_764_p3),18));
    zext_ln136_1_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_795_p2),64));
    zext_ln136_2_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_815_p3),64));
    zext_ln136_3_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_838_p3),64));
    zext_ln136_4_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_861_p3),64));
    zext_ln136_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x2_0_i_0_reg_485),18));
    zext_ln145_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_1181_p3),18));
    zext_ln147_1_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln147_fu_1216_p2),64));
    zext_ln147_2_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1238_p3),64));
    zext_ln147_3_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_1261_p3),64));
    zext_ln147_4_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1286_p3),64));
    zext_ln147_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x6_0_i_0_phi_fu_546_p4),18));
    zext_ln66_1_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_982_p3),64));
    zext_ln66_2_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1036_p3),64));
    zext_ln66_3_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_968_p3),64));
    zext_ln66_4_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_1012_p3),64));
    zext_ln66_5_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_1048_p3),64));
    zext_ln66_6_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_999_p3),64));
    zext_ln66_7_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1024_p3),64));
    zext_ln66_8_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_1060_p3),64));
    zext_ln66_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_954_p3),64));
    zext_ln78_2_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1666),6));
    zext_ln78_4_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_reg_1682),32));
    zext_ln78_5_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1672),10));
    zext_ln78_6_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_1_reg_1687),32));
    zext_ln78_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1660),6));
    zext_ln79_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_1078_p2),32));
end behav;
