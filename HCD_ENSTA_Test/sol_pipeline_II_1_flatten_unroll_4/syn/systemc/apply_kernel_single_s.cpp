// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "apply_kernel_single_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic apply_kernel_single_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic apply_kernel_single_s::ap_const_logic_0 = sc_dt::Log_0;
const bool apply_kernel_single_s::ap_const_boolean_1 = true;
const bool apply_kernel_single_s::ap_const_boolean_0 = false;
const sc_lv<18> apply_kernel_single_s::ap_const_lv18_1C8 = "111001000";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_C = "1100";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_10 = "10000";

apply_kernel_single_s::apply_kernel_single_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln40_1_fu_96_p2);
    sensitive << ( p_read2 );
    sensitive << ( p_read3 );

    SC_METHOD(thread_add_ln40_2_fu_126_p2);
    sensitive << ( add_ln40_reg_155 );
    sensitive << ( add_ln40_1_reg_160 );

    SC_METHOD(thread_add_ln40_3_fu_102_p2);
    sensitive << ( p_read4 );
    sensitive << ( p_read5 );

    SC_METHOD(thread_add_ln40_4_fu_108_p2);
    sensitive << ( p_read7 );
    sensitive << ( p_read8 );

    SC_METHOD(thread_add_ln40_5_fu_114_p2);
    sensitive << ( p_read6 );
    sensitive << ( add_ln40_4_fu_108_p2 );

    SC_METHOD(thread_add_ln40_6_fu_120_p2);
    sensitive << ( add_ln40_5_fu_114_p2 );
    sensitive << ( add_ln40_3_fu_102_p2 );

    SC_METHOD(thread_add_ln40_fu_90_p2);
    sensitive << ( p_read );
    sensitive << ( p_read1 );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_return);
    sensitive << ( mul_ln43_fu_139_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_int_reg );

    SC_METHOD(thread_mul_ln43_fu_139_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln43_fu_139_p00 );

    SC_METHOD(thread_mul_ln43_fu_139_p00);
    sensitive << ( sum_fu_130_p2 );

    SC_METHOD(thread_mul_ln43_fu_139_p2);
    sensitive << ( mul_ln43_fu_139_p0 );

    SC_METHOD(thread_sum_fu_130_p2);
    sensitive << ( add_ln40_6_reg_165 );
    sensitive << ( add_ln40_2_fu_126_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "apply_kernel_single_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, add_ln40_fu_90_p2, "add_ln40_fu_90_p2");
    sc_trace(mVcdFile, add_ln40_reg_155, "add_ln40_reg_155");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln40_1_fu_96_p2, "add_ln40_1_fu_96_p2");
    sc_trace(mVcdFile, add_ln40_1_reg_160, "add_ln40_1_reg_160");
    sc_trace(mVcdFile, add_ln40_6_fu_120_p2, "add_ln40_6_fu_120_p2");
    sc_trace(mVcdFile, add_ln40_6_reg_165, "add_ln40_6_reg_165");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, add_ln40_4_fu_108_p2, "add_ln40_4_fu_108_p2");
    sc_trace(mVcdFile, add_ln40_5_fu_114_p2, "add_ln40_5_fu_114_p2");
    sc_trace(mVcdFile, add_ln40_3_fu_102_p2, "add_ln40_3_fu_102_p2");
    sc_trace(mVcdFile, add_ln40_2_fu_126_p2, "add_ln40_2_fu_126_p2");
    sc_trace(mVcdFile, sum_fu_130_p2, "sum_fu_130_p2");
    sc_trace(mVcdFile, mul_ln43_fu_139_p0, "mul_ln43_fu_139_p0");
    sc_trace(mVcdFile, mul_ln43_fu_139_p2, "mul_ln43_fu_139_p2");
    sc_trace(mVcdFile, ap_ce_reg, "ap_ce_reg");
    sc_trace(mVcdFile, ap_return_int_reg, "ap_return_int_reg");
    sc_trace(mVcdFile, mul_ln43_fu_139_p00, "mul_ln43_fu_139_p00");
#endif

    }
}

apply_kernel_single_s::~apply_kernel_single_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void apply_kernel_single_s::thread_ap_clk_no_reset_() {
    ap_ce_reg = ap_ce.read();
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1))) {
        add_ln40_1_reg_160 = add_ln40_1_fu_96_p2.read();
        add_ln40_6_reg_165 = add_ln40_6_fu_120_p2.read();
        add_ln40_reg_155 = add_ln40_fu_90_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_int_reg = mul_ln43_fu_139_p2.read().range(16, 12);
    }
}

void apply_kernel_single_s::thread_add_ln40_1_fu_96_p2() {
    add_ln40_1_fu_96_p2 = (!p_read2.read().is_01() || !p_read3.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_read2.read()) + sc_biguint<8>(p_read3.read()));
}

void apply_kernel_single_s::thread_add_ln40_2_fu_126_p2() {
    add_ln40_2_fu_126_p2 = (!add_ln40_1_reg_160.read().is_01() || !add_ln40_reg_155.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln40_1_reg_160.read()) + sc_biguint<8>(add_ln40_reg_155.read()));
}

void apply_kernel_single_s::thread_add_ln40_3_fu_102_p2() {
    add_ln40_3_fu_102_p2 = (!p_read4.read().is_01() || !p_read5.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_read4.read()) + sc_biguint<8>(p_read5.read()));
}

void apply_kernel_single_s::thread_add_ln40_4_fu_108_p2() {
    add_ln40_4_fu_108_p2 = (!p_read7.read().is_01() || !p_read8.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_read7.read()) + sc_biguint<8>(p_read8.read()));
}

void apply_kernel_single_s::thread_add_ln40_5_fu_114_p2() {
    add_ln40_5_fu_114_p2 = (!p_read6.read().is_01() || !add_ln40_4_fu_108_p2.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_read6.read()) + sc_biguint<8>(add_ln40_4_fu_108_p2.read()));
}

void apply_kernel_single_s::thread_add_ln40_6_fu_120_p2() {
    add_ln40_6_fu_120_p2 = (!add_ln40_5_fu_114_p2.read().is_01() || !add_ln40_3_fu_102_p2.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln40_5_fu_114_p2.read()) + sc_biguint<8>(add_ln40_3_fu_102_p2.read()));
}

void apply_kernel_single_s::thread_add_ln40_fu_90_p2() {
    add_ln40_fu_90_p2 = (!p_read1.read().is_01() || !p_read.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_read1.read()) + sc_biguint<8>(p_read.read()));
}

void apply_kernel_single_s::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void apply_kernel_single_s::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void apply_kernel_single_s::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void apply_kernel_single_s::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void apply_kernel_single_s::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return = ap_return_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return = mul_ln43_fu_139_p2.read().range(16, 12);
    }
}

void apply_kernel_single_s::thread_mul_ln43_fu_139_p0() {
    mul_ln43_fu_139_p0 =  (sc_lv<8>) (mul_ln43_fu_139_p00.read());
}

void apply_kernel_single_s::thread_mul_ln43_fu_139_p00() {
    mul_ln43_fu_139_p00 = esl_zext<18,8>(sum_fu_130_p2.read());
}

void apply_kernel_single_s::thread_mul_ln43_fu_139_p2() {
    mul_ln43_fu_139_p2 = (!mul_ln43_fu_139_p0.read().is_01() || !ap_const_lv18_1C8.is_01())? sc_lv<18>(): sc_biguint<8>(mul_ln43_fu_139_p0.read()) * sc_biguint<18>(ap_const_lv18_1C8);
}

void apply_kernel_single_s::thread_sum_fu_130_p2() {
    sum_fu_130_p2 = (!add_ln40_6_reg_165.read().is_01() || !add_ln40_2_fu_126_p2.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln40_6_reg_165.read()) + sc_biguint<8>(add_ln40_2_fu_126_p2.read()));
}

}

