-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_accel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of HLS_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_accel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=519226,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=14,HLS_SYN_FF=2501,HLS_SYN_LUT=4679,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_3FA47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_407F400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001111111010000000000000000000000000000000000000000000000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FC04 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln121_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln131_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln144_reg_1529 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal icmp_ln144_reg_1529_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten18_reg_445 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_0_i_i_reg_456 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_i_reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten30_reg_478 : STD_LOGIC_VECTOR (16 downto 0);
    signal y5_0_i_reg_489 : STD_LOGIC_VECTOR (8 downto 0);
    signal x6_0_i_reg_500 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln121_fu_587_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal select_ln126_1_fu_613_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_fu_653_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_fu_665_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal select_ln136_1_fu_691_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_fu_731_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln54_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state6_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_1156_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1156_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1156_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1156_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1156_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1156_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_743_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln54_reg_1160 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln73_fu_755_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_reg_1165 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_1_fu_769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_1_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_2_fu_783_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_2_reg_1180 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_3_fu_797_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln73_3_reg_1185 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_reg_1192 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state7_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state17_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state22_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_state27_pp2_stage1_iter4 : BOOLEAN;
    signal ap_block_state32_pp2_stage1_iter5 : BOOLEAN;
    signal ap_block_state37_pp2_stage1_iter6 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_0_0_reg_1228 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_0_reg_1233 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_0_reg_1233_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_0_reg_1238 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_0_reg_1238_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_0_1_reg_1243 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_1_reg_1248 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_1_reg_1248_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_1_reg_1253 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_1_reg_1253_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2_fu_851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2_reg_1258 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln66_4_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1275 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state8_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_state18_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_state23_pp2_stage2_iter3 : BOOLEAN;
    signal ap_block_state28_pp2_stage2_iter4 : BOOLEAN;
    signal ap_block_state33_pp2_stage2_iter5 : BOOLEAN;
    signal ap_block_state38_pp2_stage2_iter6 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal zext_ln66_4_reg_1275_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1275_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1275_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1275_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1275_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_4_reg_1275_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Ix2_window_0_2_reg_1300 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_0_2_reg_1305 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_2_reg_1310 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_0_2_reg_1310_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_1_0_reg_1315 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_1_0_reg_1320 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_0_reg_1325 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_0_reg_1325_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state9_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state14_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_state19_pp2_stage3_iter2 : BOOLEAN;
    signal ap_block_state24_pp2_stage3_iter3 : BOOLEAN;
    signal ap_block_state29_pp2_stage3_iter4 : BOOLEAN;
    signal ap_block_state34_pp2_stage3_iter5 : BOOLEAN;
    signal ap_block_state39_pp2_stage3_iter6 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal Ix2_window_1_1_reg_1350 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_1_1_reg_1355 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_1_reg_1360 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_1_2_reg_1365 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_1_2_reg_1370 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_1_2_reg_1375 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_state10_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state15_pp2_stage4_iter1 : BOOLEAN;
    signal ap_block_state20_pp2_stage4_iter2 : BOOLEAN;
    signal ap_block_state25_pp2_stage4_iter3 : BOOLEAN;
    signal ap_block_state30_pp2_stage4_iter4 : BOOLEAN;
    signal ap_block_state35_pp2_stage4_iter5 : BOOLEAN;
    signal ap_block_state40_pp2_stage4_iter6 : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal Ix2_window_2_0_reg_1390 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_2_0_reg_1395 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_2_0_reg_1400 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_2_1_reg_1405 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_2_1_reg_1410 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_2_1_reg_1415 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_2_2_reg_1420 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal Iy2_window_2_2_reg_1425 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_2_2_reg_1430 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_ap_return : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_1435 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_reg_1441 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_1447 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln79_fu_941_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_fu_952_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_reg_1457 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_1_fu_961_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_1_reg_1462 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln78_4_fu_967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln78_6_fu_971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_M_reg_1477 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal tmp_3_reg_1483 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal tmp_4_reg_1488 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1493 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal grp_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal det_M_reg_1498 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1503 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal R_reg_1508 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal icmp_ln83_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1514 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_reg_1519 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_reg_1524 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state42_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state43_io : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln144_fu_1020_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln144_1_fu_1046_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln144_1_reg_1538 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln148_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_3_fu_1109_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state42 : STD_LOGIC;
    signal I_x_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce0 : STD_LOGIC;
    signal I_x_we0 : STD_LOGIC;
    signal I_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce1 : STD_LOGIC;
    signal I_x_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce0 : STD_LOGIC;
    signal I_y_we0 : STD_LOGIC;
    signal I_y_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce1 : STD_LOGIC;
    signal I_y_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_img_ce0 : STD_LOGIC;
    signal output_img_we0 : STD_LOGIC;
    signal output_img_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_p_read8 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_apply_kernel_single_s_fu_511_ap_ce : STD_LOGIC;
    signal ap_block_state7_pp2_stage1_iter0_ignore_call97 : BOOLEAN;
    signal ap_block_state12_pp2_stage1_iter1_ignore_call97 : BOOLEAN;
    signal ap_block_state17_pp2_stage1_iter2_ignore_call97 : BOOLEAN;
    signal ap_block_state22_pp2_stage1_iter3_ignore_call97 : BOOLEAN;
    signal ap_block_state27_pp2_stage1_iter4_ignore_call97 : BOOLEAN;
    signal ap_block_state32_pp2_stage1_iter5_ignore_call97 : BOOLEAN;
    signal ap_block_state37_pp2_stage1_iter6_ignore_call97 : BOOLEAN;
    signal ap_block_pp2_stage1_11001_ignoreCallOp241 : BOOLEAN;
    signal ap_block_state8_pp2_stage2_iter0_ignore_call97 : BOOLEAN;
    signal ap_block_state13_pp2_stage2_iter1_ignore_call97 : BOOLEAN;
    signal ap_block_state18_pp2_stage2_iter2_ignore_call97 : BOOLEAN;
    signal ap_block_state23_pp2_stage2_iter3_ignore_call97 : BOOLEAN;
    signal ap_block_state28_pp2_stage2_iter4_ignore_call97 : BOOLEAN;
    signal ap_block_state33_pp2_stage2_iter5_ignore_call97 : BOOLEAN;
    signal ap_block_state38_pp2_stage2_iter6_ignore_call97 : BOOLEAN;
    signal ap_block_pp2_stage2_11001_ignoreCallOp242 : BOOLEAN;
    signal ap_block_state9_pp2_stage3_iter0_ignore_call98 : BOOLEAN;
    signal ap_block_state14_pp2_stage3_iter1_ignore_call98 : BOOLEAN;
    signal ap_block_state19_pp2_stage3_iter2_ignore_call98 : BOOLEAN;
    signal ap_block_state24_pp2_stage3_iter3_ignore_call98 : BOOLEAN;
    signal ap_block_state29_pp2_stage3_iter4_ignore_call98 : BOOLEAN;
    signal ap_block_state34_pp2_stage3_iter5_ignore_call98 : BOOLEAN;
    signal ap_block_state39_pp2_stage3_iter6_ignore_call98 : BOOLEAN;
    signal ap_block_pp2_stage3_11001_ignoreCallOp244 : BOOLEAN;
    signal ap_block_state10_pp2_stage4_iter0_ignore_call99 : BOOLEAN;
    signal ap_block_state15_pp2_stage4_iter1_ignore_call99 : BOOLEAN;
    signal ap_block_state20_pp2_stage4_iter2_ignore_call99 : BOOLEAN;
    signal ap_block_state25_pp2_stage4_iter3_ignore_call99 : BOOLEAN;
    signal ap_block_state30_pp2_stage4_iter4_ignore_call99 : BOOLEAN;
    signal ap_block_state35_pp2_stage4_iter5_ignore_call99 : BOOLEAN;
    signal ap_block_state40_pp2_stage4_iter6_ignore_call99 : BOOLEAN;
    signal ap_block_pp2_stage4_11001_ignoreCallOp246 : BOOLEAN;
    signal indvar_flatten_reg_379 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_0_i_reg_390 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_0_i_reg_401 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten11_reg_412 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y1_0_i_reg_423 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_0_i_reg_434 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten18_phi_fu_449_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_y_0_i_i_phi_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_x_0_i_i_phi_fu_471_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_y5_0_i_phi_fu_493_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal zext_ln126_1_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_3_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_1_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_6_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_7_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_2_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_5_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_8_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal zext_ln147_1_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal grp_fu_524_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_538_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_545_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_551_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_557_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_563_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_575_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln122_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_593_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_621_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln126_fu_605_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln122_fu_629_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln126_fu_638_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln126_fu_642_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln132_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_671_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_699_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln136_fu_683_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln132_fu_707_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln136_fu_716_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln136_fu_720_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln55_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_763_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln64_1_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln64_2_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_811_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_825_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_839_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_856_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_869_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_881_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_893_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_905_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_917_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln78_fu_929_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln78_2_fu_932_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_fu_935_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln78_fu_952_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln78_fu_952_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln78_1_fu_961_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln78_5_fu_958_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_1_fu_961_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln83_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_978_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln83_fu_988_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln83_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_1026_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln144_fu_1054_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1066_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln144_fu_1038_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln145_fu_1078_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln146_mid2_fu_1058_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln145_1_fu_1074_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln147_fu_1088_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln147_fu_1092_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal idx_fu_1082_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp2_stage2_00001 : BOOLEAN;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_TVALID_int : STD_LOGIC;
    signal INPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TUSER_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDEST_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_TVALID_int : STD_LOGIC;
    signal OUTPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal mul_ln78_fu_952_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_fu_952_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component apply_kernel_single_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component HLS_accel_dsub_64cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dmul_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dcmp_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_sitodp_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_I_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component HLS_accel_output_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    HLS_accel_CONTROL_BUS_s_axi_U : component HLS_accel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    I_x_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_x_address0,
        ce0 => I_x_ce0,
        we0 => I_x_we0,
        d0 => I_x_d0,
        q0 => I_x_q0,
        address1 => I_x_address1,
        ce1 => I_x_ce1,
        q1 => I_x_q1);

    I_y_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_y_address0,
        ce0 => I_y_ce0,
        we0 => I_y_we0,
        d0 => I_y_d0,
        q0 => I_y_q0,
        address1 => I_y_address1,
        ce1 => I_y_ce1,
        q1 => I_y_q1);

    output_img_U : component HLS_accel_output_bkb
    generic map (
        DataWidth => 1,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_img_address0,
        ce0 => output_img_ce0,
        we0 => output_img_we0,
        d0 => and_ln83_reg_1524,
        q0 => output_img_q0);

    grp_apply_kernel_single_s_fu_511 : component apply_kernel_single_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_read => grp_apply_kernel_single_s_fu_511_p_read,
        p_read1 => grp_apply_kernel_single_s_fu_511_p_read1,
        p_read2 => grp_apply_kernel_single_s_fu_511_p_read2,
        p_read3 => grp_apply_kernel_single_s_fu_511_p_read3,
        p_read4 => grp_apply_kernel_single_s_fu_511_p_read4,
        p_read5 => grp_apply_kernel_single_s_fu_511_p_read5,
        p_read6 => grp_apply_kernel_single_s_fu_511_p_read6,
        p_read7 => grp_apply_kernel_single_s_fu_511_p_read7,
        p_read8 => grp_apply_kernel_single_s_fu_511_p_read8,
        ap_return => grp_apply_kernel_single_s_fu_511_ap_return,
        ap_ce => grp_apply_kernel_single_s_fu_511_ap_ce);

    HLS_accel_dsub_64cud_U10 : component HLS_accel_dsub_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_524_p0,
        din1 => grp_fu_524_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_524_p2);

    HLS_accel_dmul_64dEe_U11 : component HLS_accel_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_528_p0,
        din1 => grp_fu_528_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p2);

    HLS_accel_dcmp_64eOg_U12 : component HLS_accel_dcmp_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => R_reg_1508,
        din1 => ap_const_lv64_407F400000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_533_p2);

    HLS_accel_sitodp_fYi_U13 : component HLS_accel_sitodp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_538_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p1);

    regslice_both_INPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDATA,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_data_V_U_ack_in,
        data_out => INPUT_STREAM_TDATA_int,
        vld_out => INPUT_STREAM_TVALID_int,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TKEEP,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_keep_V_U_ack_in,
        data_out => INPUT_STREAM_TKEEP_int,
        vld_out => regslice_both_INPUT_STREAM_keep_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TSTRB,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_strb_V_U_ack_in,
        data_out => INPUT_STREAM_TSTRB_int,
        vld_out => regslice_both_INPUT_STREAM_strb_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TUSER,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_user_V_U_ack_in,
        data_out => INPUT_STREAM_TUSER_int,
        vld_out => regslice_both_INPUT_STREAM_user_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TLAST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_last_V_U_ack_in,
        data_out => INPUT_STREAM_TLAST_int,
        vld_out => regslice_both_INPUT_STREAM_last_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TID,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_id_V_U_ack_in,
        data_out => INPUT_STREAM_TID_int,
        vld_out => regslice_both_INPUT_STREAM_id_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDEST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_dest_V_U_ack_in,
        data_out => INPUT_STREAM_TDEST_int,
        vld_out => regslice_both_INPUT_STREAM_dest_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_STREAM_TDATA_int,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => OUTPUT_STREAM_TREADY_int,
        data_out => OUTPUT_STREAM_TDATA,
        vld_out => regslice_both_OUTPUT_STREAM_data_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TKEEP,
        vld_out => regslice_both_OUTPUT_STREAM_keep_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TSTRB,
        vld_out => regslice_both_OUTPUT_STREAM_strb_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TUSER,
        vld_out => regslice_both_OUTPUT_STREAM_user_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => icmp_ln148_reg_1548,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TLAST,
        vld_out => regslice_both_OUTPUT_STREAM_last_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TID,
        vld_out => regslice_both_OUTPUT_STREAM_id_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TDEST,
        vld_out => regslice_both_OUTPUT_STREAM_dest_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state42);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten11_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten11_reg_412 <= ap_const_lv17_0;
            elsif ((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten11_reg_412 <= add_ln131_fu_665_p2;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten18_reg_445 <= ap_const_lv16_0;
            elsif (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten18_reg_445 <= add_ln54_reg_1160;
            end if; 
        end if;
    end process;

    indvar_flatten30_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                indvar_flatten30_reg_478 <= ap_const_lv17_0;
            elsif (((icmp_ln144_fu_1014_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
                indvar_flatten30_reg_478 <= add_ln144_fu_1020_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_379 <= add_ln121_fu_587_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_379 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    x2_0_i_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x2_0_i_reg_434 <= ap_const_lv9_0;
            elsif ((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x2_0_i_reg_434 <= x_1_fu_731_p2;
            end if; 
        end if;
    end process;

    x6_0_i_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                x6_0_i_reg_500 <= ap_const_lv9_0;
            elsif (((icmp_ln144_fu_1014_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
                x6_0_i_reg_500 <= x_3_fu_1109_p2;
            end if; 
        end if;
    end process;

    x_0_i_i_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_0_i_i_reg_467 <= ap_const_lv8_1;
            elsif (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                x_0_i_i_reg_467 <= x_2_reg_1258;
            end if; 
        end if;
    end process;

    x_0_i_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_i_reg_401 <= x_fu_653_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_i_reg_401 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    y1_0_i_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                y1_0_i_reg_423 <= ap_const_lv9_0;
            elsif ((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y1_0_i_reg_423 <= select_ln136_1_fu_691_p3;
            end if; 
        end if;
    end process;

    y5_0_i_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                y5_0_i_reg_489 <= ap_const_lv9_0;
            elsif (((icmp_ln144_reg_1529 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                y5_0_i_reg_489 <= select_ln144_1_reg_1538;
            end if; 
        end if;
    end process;

    y_0_i_i_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_0_i_i_reg_456 <= ap_const_lv8_1;
            elsif (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                y_0_i_i_reg_456 <= select_ln73_1_reg_1172;
            end if; 
        end if;
    end process;

    y_0_i_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_0_i_reg_390 <= select_ln126_1_fu_613_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_i_reg_390 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_0_0_reg_1228 <= grp_fu_545_p2;
                Ix2_window_0_1_reg_1243 <= grp_fu_563_p2;
                Ixy_window_0_0_reg_1238 <= grp_fu_557_p2;
                Ixy_window_0_1_reg_1253 <= grp_fu_575_p2;
                Iy2_window_0_0_reg_1233 <= grp_fu_551_p2;
                Iy2_window_0_1_reg_1248 <= grp_fu_569_p2;
                x_2_reg_1258 <= x_2_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_0_2_reg_1300 <= grp_fu_563_p2;
                Ix2_window_1_0_reg_1315 <= grp_fu_545_p2;
                Ixy_window_0_2_reg_1310 <= grp_fu_575_p2;
                Ixy_window_1_0_reg_1325 <= grp_fu_557_p2;
                Iy2_window_0_2_reg_1305 <= grp_fu_569_p2;
                Iy2_window_1_0_reg_1320 <= grp_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_1_1_reg_1350 <= grp_fu_563_p2;
                Ix2_window_1_2_reg_1365 <= grp_fu_545_p2;
                Ixy_window_1_1_reg_1360 <= grp_fu_575_p2;
                Ixy_window_1_2_reg_1375 <= grp_fu_557_p2;
                Iy2_window_1_1_reg_1355 <= grp_fu_569_p2;
                Iy2_window_1_2_reg_1370 <= grp_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                Ix2_window_2_0_reg_1390 <= grp_fu_563_p2;
                Ix2_window_2_1_reg_1405 <= grp_fu_545_p2;
                Ixy_window_2_0_reg_1400 <= grp_fu_575_p2;
                Ixy_window_2_1_reg_1415 <= grp_fu_557_p2;
                Iy2_window_2_0_reg_1395 <= grp_fu_569_p2;
                Iy2_window_2_1_reg_1410 <= grp_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                Ix2_window_2_2_reg_1420 <= grp_fu_563_p2;
                Ixy_window_2_2_reg_1430 <= grp_fu_575_p2;
                Iy2_window_2_2_reg_1425 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                Ixy_window_0_0_reg_1238_pp2_iter1_reg <= Ixy_window_0_0_reg_1238;
                Ixy_window_0_1_reg_1253_pp2_iter1_reg <= Ixy_window_0_1_reg_1253;
                Iy2_window_0_0_reg_1233_pp2_iter1_reg <= Iy2_window_0_0_reg_1233;
                Iy2_window_0_1_reg_1248_pp2_iter1_reg <= Iy2_window_0_1_reg_1248;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                Ixy_window_0_2_reg_1310_pp2_iter1_reg <= Ixy_window_0_2_reg_1310;
                Ixy_window_1_0_reg_1325_pp2_iter1_reg <= Ixy_window_1_0_reg_1325;
                    zext_ln66_4_reg_1275_pp2_iter1_reg(15 downto 0) <= zext_ln66_4_reg_1275(15 downto 0);
                    zext_ln66_4_reg_1275_pp2_iter2_reg(15 downto 0) <= zext_ln66_4_reg_1275_pp2_iter1_reg(15 downto 0);
                    zext_ln66_4_reg_1275_pp2_iter3_reg(15 downto 0) <= zext_ln66_4_reg_1275_pp2_iter2_reg(15 downto 0);
                    zext_ln66_4_reg_1275_pp2_iter4_reg(15 downto 0) <= zext_ln66_4_reg_1275_pp2_iter3_reg(15 downto 0);
                    zext_ln66_4_reg_1275_pp2_iter5_reg(15 downto 0) <= zext_ln66_4_reg_1275_pp2_iter4_reg(15 downto 0);
                    zext_ln66_4_reg_1275_pp2_iter6_reg(15 downto 0) <= zext_ln66_4_reg_1275_pp2_iter5_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                R_reg_1508 <= grp_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln54_reg_1160 <= add_ln54_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_737_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln65_reg_1192 <= add_ln65_fu_805_p2;
                select_ln73_2_reg_1180 <= select_ln73_2_fu_783_p3;
                select_ln73_3_reg_1185 <= select_ln73_3_fu_797_p3;
                select_ln73_reg_1165 <= select_ln73_fu_755_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                and_ln83_reg_1524 <= and_ln83_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                det_M_reg_1498 <= grp_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln144_reg_1529 <= icmp_ln144_fu_1014_p2;
                icmp_ln144_reg_1529_pp3_iter1_reg <= icmp_ln144_reg_1529;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_1014_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln148_reg_1548 <= icmp_ln148_fu_1103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln54_reg_1156 <= icmp_ln54_fu_737_p2;
                icmp_ln54_reg_1156_pp2_iter1_reg <= icmp_ln54_reg_1156;
                icmp_ln54_reg_1156_pp2_iter2_reg <= icmp_ln54_reg_1156_pp2_iter1_reg;
                icmp_ln54_reg_1156_pp2_iter3_reg <= icmp_ln54_reg_1156_pp2_iter2_reg;
                icmp_ln54_reg_1156_pp2_iter4_reg <= icmp_ln54_reg_1156_pp2_iter3_reg;
                icmp_ln54_reg_1156_pp2_iter5_reg <= icmp_ln54_reg_1156_pp2_iter4_reg;
                icmp_ln54_reg_1156_pp2_iter6_reg <= icmp_ln54_reg_1156_pp2_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                icmp_ln83_1_reg_1519 <= icmp_ln83_1_fu_998_p2;
                icmp_ln83_reg_1514 <= icmp_ln83_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                mul_ln78_1_reg_1462 <= mul_ln78_1_fu_961_p2;
                mul_ln78_reg_1457 <= mul_ln78_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_1014_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                select_ln144_1_reg_1538 <= select_ln144_1_fu_1046_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_737_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln73_1_reg_1172 <= select_ln73_1_fu_769_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                tmp_10_reg_1447 <= grp_apply_kernel_single_s_fu_511_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_3_reg_1483 <= grp_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                tmp_4_reg_1488 <= grp_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_5_reg_1493 <= grp_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_6_reg_1503 <= grp_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                tmp_7_reg_1435 <= grp_apply_kernel_single_s_fu_511_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                tmp_8_reg_1441 <= grp_apply_kernel_single_s_fu_511_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                trace_M_reg_1477 <= grp_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    zext_ln66_4_reg_1275(15 downto 0) <= zext_ln66_4_fu_875_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln66_4_reg_1275(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1275_pp2_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1275_pp2_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1275_pp2_iter3_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1275_pp2_iter4_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1275_pp2_iter5_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln66_4_reg_1275_pp2_iter6_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln121_fu_581_p2, ap_CS_fsm_state4, icmp_ln131_fu_659_p2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, icmp_ln54_fu_737_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, icmp_ln144_fu_1014_p2, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0_subdone, ap_block_pp2_stage4_subdone, ap_block_pp3_stage0_subdone, ap_CS_fsm_state45, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone, ap_block_pp2_stage3_subdone, INPUT_STREAM_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln121_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln131_fu_659_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln54_fu_737_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln54_fu_737_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) and (ap_const_boolean_0 = ap_block_pp2_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln144_fu_1014_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln144_fu_1014_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln121_fu_581_p2, ap_CS_fsm_state4, icmp_ln131_fu_659_p2, INPUT_STREAM_TVALID_int)
    begin
        if ((((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_TVALID_int;
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_STREAM_TREADY_assign_proc : process(INPUT_STREAM_TVALID, regslice_both_INPUT_STREAM_data_V_U_ack_in)
    begin
        if (((ap_const_logic_1 = INPUT_STREAM_TVALID) and (regslice_both_INPUT_STREAM_data_V_U_ack_in = ap_const_logic_1))) then 
            INPUT_STREAM_TREADY <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln121_fu_581_p2, ap_CS_fsm_state4, icmp_ln131_fu_659_p2, INPUT_STREAM_TVALID_int)
    begin
        if (((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            INPUT_STREAM_TREADY_int <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    I_x_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln126_1_fu_648_p1, zext_ln66_fu_819_p1, zext_ln66_1_fu_845_p1, zext_ln66_7_fu_887_p1, zext_ln66_5_fu_911_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln66_5_fu_911_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln66_7_fu_887_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln66_1_fu_845_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            I_x_address0 <= zext_ln66_fu_819_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            I_x_address0 <= zext_ln126_1_fu_648_p1(16 - 1 downto 0);
        else 
            I_x_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, zext_ln66_4_fu_875_p1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln66_3_fu_833_p1, zext_ln66_6_fu_863_p1, zext_ln66_2_fu_899_p1, zext_ln66_8_fu_923_p1, ap_block_pp2_stage4)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                I_x_address1 <= zext_ln66_8_fu_923_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                I_x_address1 <= zext_ln66_2_fu_899_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                I_x_address1 <= zext_ln66_4_fu_875_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                I_x_address1 <= zext_ln66_6_fu_863_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                I_x_address1 <= zext_ln66_3_fu_833_p1(16 - 1 downto 0);
            else 
                I_x_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            I_x_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln121_fu_581_p2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, INPUT_STREAM_TVALID_int)
    begin
        if (((not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            I_x_ce0 <= ap_const_logic_1;
        else 
            I_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_x_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            I_x_ce1 <= ap_const_logic_1;
        else 
            I_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    I_x_d0 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);

    I_x_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln121_fu_581_p2, INPUT_STREAM_TVALID_int)
    begin
        if ((not(((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            I_x_we0 <= ap_const_logic_1;
        else 
            I_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln136_1_fu_726_p1, zext_ln66_fu_819_p1, zext_ln66_1_fu_845_p1, zext_ln66_7_fu_887_p1, zext_ln66_5_fu_911_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln66_5_fu_911_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln66_7_fu_887_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln66_1_fu_845_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            I_y_address0 <= zext_ln66_fu_819_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_y_address0 <= zext_ln136_1_fu_726_p1(16 - 1 downto 0);
        else 
            I_y_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, zext_ln66_4_fu_875_p1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln66_3_fu_833_p1, zext_ln66_6_fu_863_p1, zext_ln66_2_fu_899_p1, zext_ln66_8_fu_923_p1, ap_block_pp2_stage4)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                I_y_address1 <= zext_ln66_8_fu_923_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                I_y_address1 <= zext_ln66_2_fu_899_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                I_y_address1 <= zext_ln66_4_fu_875_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                I_y_address1 <= zext_ln66_6_fu_863_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                I_y_address1 <= zext_ln66_3_fu_833_p1(16 - 1 downto 0);
            else 
                I_y_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            I_y_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_ce0_assign_proc : process(ap_CS_fsm_state4, icmp_ln131_fu_659_p2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, INPUT_STREAM_TVALID_int)
    begin
        if (((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            I_y_ce0 <= ap_const_logic_1;
        else 
            I_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            I_y_ce1 <= ap_const_logic_1;
        else 
            I_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    I_y_d0 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);

    I_y_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln131_fu_659_p2, INPUT_STREAM_TVALID_int)
    begin
        if ((not(((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int))) and (icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            I_y_we0 <= ap_const_logic_1;
        else 
            I_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln144_reg_1529, ap_enable_reg_pp3_iter2, icmp_ln144_reg_1529_pp3_iter1_reg, OUTPUT_STREAM_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln144_reg_1529_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln144_reg_1529 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUTPUT_STREAM_TREADY_int;
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_STREAM_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_q0),32));
    OUTPUT_STREAM_TVALID <= regslice_both_OUTPUT_STREAM_data_V_U_vld_out;

    OUTPUT_STREAM_TVALID_int_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln144_reg_1529, ap_block_pp3_stage0_11001)
    begin
        if (((icmp_ln144_reg_1529 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln121_fu_587_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_379) + unsigned(ap_const_lv17_1));
    add_ln126_fu_642_p2 <= std_logic_vector(unsigned(zext_ln122_fu_629_p1) + unsigned(zext_ln126_fu_638_p1));
    add_ln131_fu_665_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_412) + unsigned(ap_const_lv17_1));
    add_ln136_fu_720_p2 <= std_logic_vector(unsigned(zext_ln132_fu_707_p1) + unsigned(zext_ln136_fu_716_p1));
    add_ln144_fu_1020_p2 <= std_logic_vector(unsigned(indvar_flatten30_reg_478) + unsigned(ap_const_lv17_1));
    add_ln147_fu_1092_p2 <= std_logic_vector(unsigned(zext_ln145_1_fu_1074_p1) + unsigned(zext_ln147_fu_1088_p1));
    add_ln54_fu_743_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten18_phi_fu_449_p4) + unsigned(ap_const_lv16_1));
    add_ln64_1_fu_777_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(ap_phi_mux_y_0_i_i_phi_fu_460_p4));
    add_ln64_2_fu_791_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(ap_phi_mux_y_0_i_i_phi_fu_460_p4));
    add_ln64_fu_763_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_i_i_phi_fu_460_p4));
    add_ln65_fu_805_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(select_ln73_fu_755_p3));
    add_ln79_fu_935_p2 <= std_logic_vector(unsigned(zext_ln78_fu_929_p1) + unsigned(zext_ln78_2_fu_932_p1));
    and_ln83_fu_1008_p2 <= (or_ln83_fu_1004_p2 and grp_fu_533_p2);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(9);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(10);
    ap_CS_fsm_state45 <= ap_CS_fsm(12);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001_ignoreCallOp241 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001_ignoreCallOp242 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001_ignoreCallOp244 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001_ignoreCallOp246 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state43_io, ap_block_state44_io)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state44_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state43_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state43_io, ap_block_state44_io)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state44_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state43_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage4_iter0_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage1_iter1_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage2_iter1_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage3_iter1_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage4_iter1_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage1_iter2_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage2_iter2_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage3_iter2_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(icmp_ln121_fu_581_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln121_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int));
    end process;

        ap_block_state20_pp2_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage4_iter2_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage1_iter3_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage2_iter3_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage3_iter3_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage4_iter3_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage1_iter4_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage2_iter4_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage3_iter4_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage4_iter4_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage1_iter5_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage2_iter5_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage3_iter5_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage4_iter5_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage1_iter6_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage2_iter6_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage3_iter6_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_assign_proc : process(icmp_ln131_fu_659_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_state4 <= ((icmp_ln131_fu_659_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int));
    end process;

        ap_block_state40_pp2_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage4_iter6_ignore_call99 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_io_assign_proc : process(icmp_ln144_reg_1529, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state43_io <= ((icmp_ln144_reg_1529 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state43_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_io_assign_proc : process(icmp_ln144_reg_1529_pp3_iter1_reg, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state44_io <= ((icmp_ln144_reg_1529_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state44_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage1_iter0_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage2_iter0_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage3_iter0_ignore_call98 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state6_assign_proc : process(icmp_ln54_fu_737_p2)
    begin
        if ((icmp_ln54_fu_737_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state42_assign_proc : process(icmp_ln144_fu_1014_p2)
    begin
        if ((icmp_ln144_fu_1014_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state45, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten18_phi_fu_449_p4_assign_proc : process(indvar_flatten18_reg_445, icmp_ln54_reg_1156, ap_CS_fsm_pp2_stage0, add_ln54_reg_1160, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten18_phi_fu_449_p4 <= add_ln54_reg_1160;
        else 
            ap_phi_mux_indvar_flatten18_phi_fu_449_p4 <= indvar_flatten18_reg_445;
        end if; 
    end process;


    ap_phi_mux_x_0_i_i_phi_fu_471_p4_assign_proc : process(x_0_i_i_reg_467, icmp_ln54_reg_1156, ap_CS_fsm_pp2_stage0, x_2_reg_1258, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_x_0_i_i_phi_fu_471_p4 <= x_2_reg_1258;
        else 
            ap_phi_mux_x_0_i_i_phi_fu_471_p4 <= x_0_i_i_reg_467;
        end if; 
    end process;


    ap_phi_mux_y5_0_i_phi_fu_493_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln144_reg_1529, y5_0_i_reg_489, select_ln144_1_reg_1538)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln144_reg_1529 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_y5_0_i_phi_fu_493_p4 <= select_ln144_1_reg_1538;
        else 
            ap_phi_mux_y5_0_i_phi_fu_493_p4 <= y5_0_i_reg_489;
        end if; 
    end process;


    ap_phi_mux_y_0_i_i_phi_fu_460_p4_assign_proc : process(y_0_i_i_reg_456, icmp_ln54_reg_1156, ap_CS_fsm_pp2_stage0, select_ln73_1_reg_1172, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln54_reg_1156 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_y_0_i_i_phi_fu_460_p4 <= select_ln73_1_reg_1172;
        else 
            ap_phi_mux_y_0_i_i_phi_fu_460_p4 <= y_0_i_i_reg_456;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln83_fu_975_p1 <= R_reg_1508;

    grp_apply_kernel_single_s_fu_511_ap_ce_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage1_11001_ignoreCallOp241, ap_block_pp2_stage2_11001_ignoreCallOp242, ap_block_pp2_stage3_11001_ignoreCallOp244, ap_block_pp2_stage4_11001_ignoreCallOp246)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage4_11001_ignoreCallOp246) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001_ignoreCallOp244) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001_ignoreCallOp242) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001_ignoreCallOp241) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            grp_apply_kernel_single_s_fu_511_ap_ce <= ap_const_logic_1;
        else 
            grp_apply_kernel_single_s_fu_511_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, Ix2_window_0_0_reg_1228, Iy2_window_0_0_reg_1233_pp2_iter1_reg, Ixy_window_0_0_reg_1238_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read <= Ixy_window_0_0_reg_1238_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read <= Iy2_window_0_0_reg_1233_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read <= Ix2_window_0_0_reg_1228;
            else 
                grp_apply_kernel_single_s_fu_511_p_read <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read1_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, Ix2_window_0_1_reg_1243, Iy2_window_0_1_reg_1248_pp2_iter1_reg, Ixy_window_0_1_reg_1253_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read1 <= Ixy_window_0_1_reg_1253_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read1 <= Iy2_window_0_1_reg_1248_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read1 <= Ix2_window_0_1_reg_1243;
            else 
                grp_apply_kernel_single_s_fu_511_p_read1 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read2_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, Ix2_window_0_2_reg_1300, Iy2_window_0_2_reg_1305, Ixy_window_0_2_reg_1310_pp2_iter1_reg, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read2 <= Ixy_window_0_2_reg_1310_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read2 <= Iy2_window_0_2_reg_1305;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read2 <= Ix2_window_0_2_reg_1300;
            else 
                grp_apply_kernel_single_s_fu_511_p_read2 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read2 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read3_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, Ix2_window_1_0_reg_1315, Iy2_window_1_0_reg_1320, Ixy_window_1_0_reg_1325_pp2_iter1_reg, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read3 <= Ixy_window_1_0_reg_1325_pp2_iter1_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read3 <= Iy2_window_1_0_reg_1320;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read3 <= Ix2_window_1_0_reg_1315;
            else 
                grp_apply_kernel_single_s_fu_511_p_read3 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read3 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read4_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_1_1_reg_1350, Iy2_window_1_1_reg_1355, Ixy_window_1_1_reg_1360, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read4 <= Ixy_window_1_1_reg_1360;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read4 <= Iy2_window_1_1_reg_1355;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read4 <= Ix2_window_1_1_reg_1350;
            else 
                grp_apply_kernel_single_s_fu_511_p_read4 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read4 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read5_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_1_2_reg_1365, Iy2_window_1_2_reg_1370, Ixy_window_1_2_reg_1375, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read5 <= Ixy_window_1_2_reg_1375;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read5 <= Iy2_window_1_2_reg_1370;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read5 <= Ix2_window_1_2_reg_1365;
            else 
                grp_apply_kernel_single_s_fu_511_p_read5 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read5 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read6_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_2_0_reg_1390, Iy2_window_2_0_reg_1395, Ixy_window_2_0_reg_1400, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read6 <= Ixy_window_2_0_reg_1400;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read6 <= Iy2_window_2_0_reg_1395;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read6 <= Ix2_window_2_0_reg_1390;
            else 
                grp_apply_kernel_single_s_fu_511_p_read6 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read6 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read7_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_2_1_reg_1405, Iy2_window_2_1_reg_1410, Ixy_window_2_1_reg_1415, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read7 <= Ixy_window_2_1_reg_1415;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read7 <= Iy2_window_2_1_reg_1410;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read7 <= Ix2_window_2_1_reg_1405;
            else 
                grp_apply_kernel_single_s_fu_511_p_read7 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read7 <= "XXXXXXXX";
        end if; 
    end process;


    grp_apply_kernel_single_s_fu_511_p_read8_assign_proc : process(icmp_ln54_reg_1156_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, Ix2_window_2_2_reg_1420, ap_enable_reg_pp2_iter1, Iy2_window_2_2_reg_1425, Ixy_window_2_2_reg_1430, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                grp_apply_kernel_single_s_fu_511_p_read8 <= Ixy_window_2_2_reg_1430;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                grp_apply_kernel_single_s_fu_511_p_read8 <= Iy2_window_2_2_reg_1425;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_apply_kernel_single_s_fu_511_p_read8 <= Ix2_window_2_2_reg_1420;
            else 
                grp_apply_kernel_single_s_fu_511_p_read8 <= "XXXXXXXX";
            end if;
        else 
            grp_apply_kernel_single_s_fu_511_p_read8 <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_524_p0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, tmp_3_reg_1483, ap_enable_reg_pp2_iter3, det_M_reg_1498, ap_enable_reg_pp2_iter5, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_524_p0 <= det_M_reg_1498;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            grp_fu_524_p0 <= tmp_3_reg_1483;
        else 
            grp_fu_524_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_524_p1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter3, tmp_4_reg_1488, tmp_6_reg_1503, ap_enable_reg_pp2_iter5, ap_block_pp2_stage2, ap_block_pp2_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_524_p1 <= tmp_6_reg_1503;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            grp_fu_524_p1 <= tmp_4_reg_1488;
        else 
            grp_fu_524_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_528_p0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, trace_M_reg_1477, ap_enable_reg_pp2_iter3, tmp_5_reg_1493, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_528_p0 <= tmp_5_reg_1493;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_528_p0 <= trace_M_reg_1477;
        else 
            grp_fu_528_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_528_p1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, trace_M_reg_1477, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_528_p1 <= ap_const_lv64_3FA47AE147AE147B;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_528_p1 <= trace_M_reg_1477;
        else 
            grp_fu_528_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_538_p0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter1, zext_ln79_fu_941_p1, zext_ln78_4_fu_967_p1, zext_ln78_6_fu_971_p1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp2_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_538_p0 <= zext_ln78_6_fu_971_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_538_p0 <= zext_ln78_4_fu_967_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            grp_fu_538_p0 <= zext_ln79_fu_941_p1;
        else 
            grp_fu_538_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_545_p0 <= I_x_q0;
    grp_fu_545_p1 <= I_x_q0;
    grp_fu_545_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_545_p0) * signed(grp_fu_545_p1))), 8));
    grp_fu_551_p0 <= I_y_q0;
    grp_fu_551_p1 <= I_y_q0;
    grp_fu_551_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_551_p0) * signed(grp_fu_551_p1))), 8));
    grp_fu_557_p0 <= I_x_q0;
    grp_fu_557_p1 <= I_y_q0;
    grp_fu_557_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_557_p0) * signed(grp_fu_557_p1))), 8));
    grp_fu_563_p0 <= I_x_q1;
    grp_fu_563_p1 <= I_x_q1;
    grp_fu_563_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_563_p0) * signed(grp_fu_563_p1))), 8));
    grp_fu_569_p0 <= I_y_q1;
    grp_fu_569_p1 <= I_y_q1;
    grp_fu_569_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_569_p0) * signed(grp_fu_569_p1))), 8));
    grp_fu_575_p0 <= I_x_q1;
    grp_fu_575_p1 <= I_y_q1;
    grp_fu_575_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_575_p0) * signed(grp_fu_575_p1))), 8));
    icmp_ln121_fu_581_p2 <= "1" when (indvar_flatten_reg_379 = ap_const_lv17_10000) else "0";
    icmp_ln122_fu_599_p2 <= "1" when (x_0_i_reg_401 = ap_const_lv9_100) else "0";
    icmp_ln131_fu_659_p2 <= "1" when (indvar_flatten11_reg_412 = ap_const_lv17_10000) else "0";
    icmp_ln132_fu_677_p2 <= "1" when (x2_0_i_reg_434 = ap_const_lv9_100) else "0";
    icmp_ln144_fu_1014_p2 <= "1" when (indvar_flatten30_reg_478 = ap_const_lv17_10000) else "0";
    icmp_ln145_fu_1032_p2 <= "1" when (x6_0_i_reg_500 = ap_const_lv9_100) else "0";
    icmp_ln148_fu_1103_p2 <= "1" when (idx_fu_1082_p2 = ap_const_lv16_FFFF) else "0";
    icmp_ln54_fu_737_p2 <= "1" when (ap_phi_mux_indvar_flatten18_phi_fu_449_p4 = ap_const_lv16_FC04) else "0";
    icmp_ln55_fu_749_p2 <= "1" when (ap_phi_mux_x_0_i_i_phi_fu_471_p4 = ap_const_lv8_FF) else "0";
    icmp_ln83_1_fu_998_p2 <= "1" when (trunc_ln83_fu_988_p1 = ap_const_lv52_0) else "0";
    icmp_ln83_fu_992_p2 <= "0" when (tmp_11_fu_978_p4 = ap_const_lv11_7FF) else "1";
    idx_fu_1082_p2 <= std_logic_vector(unsigned(zext_ln145_fu_1078_p1) + unsigned(shl_ln146_mid2_fu_1058_p3));
    mul_ln78_1_fu_961_p0 <= zext_ln78_5_fu_958_p1(5 - 1 downto 0);
    mul_ln78_1_fu_961_p1 <= zext_ln78_5_fu_958_p1(5 - 1 downto 0);
    mul_ln78_1_fu_961_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_1_fu_961_p0) * unsigned(mul_ln78_1_fu_961_p1), 10));
    mul_ln78_fu_952_p0 <= mul_ln78_fu_952_p00(5 - 1 downto 0);
    mul_ln78_fu_952_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1435),10));
    mul_ln78_fu_952_p1 <= mul_ln78_fu_952_p10(5 - 1 downto 0);
    mul_ln78_fu_952_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1441),10));
    mul_ln78_fu_952_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_fu_952_p0) * unsigned(mul_ln78_fu_952_p1), 10));
    or_ln83_fu_1004_p2 <= (icmp_ln83_reg_1514 or icmp_ln83_1_reg_1519);

    output_img_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, zext_ln66_4_reg_1275_pp2_iter6_reg, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter6, ap_enable_reg_pp3_iter0, ap_block_pp2_stage4, zext_ln147_1_fu_1098_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            output_img_address0 <= zext_ln147_1_fu_1098_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            output_img_address0 <= zext_ln66_4_reg_1275_pp2_iter6_reg(16 - 1 downto 0);
        else 
            output_img_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_img_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp2_iter6, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)))) then 
            output_img_ce0 <= ap_const_logic_1;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_img_we0_assign_proc : process(icmp_ln54_reg_1156_pp2_iter6_reg, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((icmp_ln54_reg_1156_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            output_img_we0 <= ap_const_logic_1;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln126_1_fu_613_p3 <= 
        y_fu_593_p2 when (icmp_ln122_fu_599_p2(0) = '1') else 
        y_0_i_reg_390;
    select_ln126_fu_605_p3 <= 
        ap_const_lv9_0 when (icmp_ln122_fu_599_p2(0) = '1') else 
        x_0_i_reg_401;
    select_ln136_1_fu_691_p3 <= 
        y_1_fu_671_p2 when (icmp_ln132_fu_677_p2(0) = '1') else 
        y1_0_i_reg_423;
    select_ln136_fu_683_p3 <= 
        ap_const_lv9_0 when (icmp_ln132_fu_677_p2(0) = '1') else 
        x2_0_i_reg_434;
    select_ln144_1_fu_1046_p3 <= 
        y_2_fu_1026_p2 when (icmp_ln145_fu_1032_p2(0) = '1') else 
        ap_phi_mux_y5_0_i_phi_fu_493_p4;
    select_ln144_fu_1038_p3 <= 
        ap_const_lv9_0 when (icmp_ln145_fu_1032_p2(0) = '1') else 
        x6_0_i_reg_500;
    select_ln73_1_fu_769_p3 <= 
        add_ln64_fu_763_p2 when (icmp_ln55_fu_749_p2(0) = '1') else 
        ap_phi_mux_y_0_i_i_phi_fu_460_p4;
    select_ln73_2_fu_783_p3 <= 
        ap_phi_mux_y_0_i_i_phi_fu_460_p4 when (icmp_ln55_fu_749_p2(0) = '1') else 
        add_ln64_1_fu_777_p2;
    select_ln73_3_fu_797_p3 <= 
        add_ln64_2_fu_791_p2 when (icmp_ln55_fu_749_p2(0) = '1') else 
        add_ln64_fu_763_p2;
    select_ln73_fu_755_p3 <= 
        ap_const_lv8_1 when (icmp_ln55_fu_749_p2(0) = '1') else 
        ap_phi_mux_x_0_i_i_phi_fu_471_p4;
    shl_ln146_mid2_fu_1058_p3 <= (trunc_ln144_fu_1054_p1 & ap_const_lv8_0);
    tmp_11_fu_978_p4 <= bitcast_ln83_fu_975_p1(62 downto 52);
    tmp_14_fu_1066_p3 <= (select_ln144_1_fu_1046_p3 & ap_const_lv8_0);
    tmp_1_fu_699_p3 <= (select_ln136_1_fu_691_p3 & ap_const_lv8_0);
    tmp_23_fu_811_p3 <= (select_ln73_2_fu_783_p3 & add_ln65_fu_805_p2);
    tmp_25_fu_839_p3 <= (select_ln73_1_reg_1172 & add_ln65_reg_1192);
    tmp_26_fu_893_p3 <= (select_ln73_3_reg_1185 & add_ln65_reg_1192);
    tmp_27_fu_825_p3 <= (select_ln73_2_fu_783_p3 & select_ln73_fu_755_p3);
    tmp_28_fu_869_p3 <= (select_ln73_1_reg_1172 & select_ln73_reg_1165);
    tmp_29_fu_905_p3 <= (select_ln73_3_reg_1185 & select_ln73_reg_1165);
    tmp_30_fu_856_p3 <= (select_ln73_2_reg_1180 & x_2_fu_851_p2);
    tmp_31_fu_881_p3 <= (select_ln73_1_reg_1172 & x_2_reg_1258);
    tmp_32_fu_917_p3 <= (select_ln73_3_reg_1185 & x_2_reg_1258);
    tmp_fu_621_p3 <= (select_ln126_1_fu_613_p3 & ap_const_lv8_0);
    trunc_ln144_fu_1054_p1 <= select_ln144_1_fu_1046_p3(8 - 1 downto 0);
    trunc_ln83_fu_988_p1 <= bitcast_ln83_fu_975_p1(52 - 1 downto 0);
    x_1_fu_731_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln136_fu_683_p3));
    x_2_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln73_reg_1165));
    x_3_fu_1109_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln144_fu_1038_p3));
    x_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln126_fu_605_p3));
    y_1_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(y1_0_i_reg_423));
    y_2_fu_1026_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(ap_phi_mux_y5_0_i_phi_fu_493_p4));
    y_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(y_0_i_reg_390));
    zext_ln122_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_621_p3),18));
    zext_ln126_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_fu_642_p2),64));
    zext_ln126_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln126_fu_605_p3),18));
    zext_ln132_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_699_p3),18));
    zext_ln136_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_720_p2),64));
    zext_ln136_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln136_fu_683_p3),18));
    zext_ln145_1_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1066_p3),18));
    zext_ln145_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln144_fu_1038_p3),16));
    zext_ln147_1_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln147_fu_1092_p2),64));
    zext_ln147_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln144_fu_1038_p3),18));
    zext_ln66_1_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_839_p3),64));
    zext_ln66_2_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_893_p3),64));
    zext_ln66_3_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_825_p3),64));
    zext_ln66_4_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_869_p3),64));
    zext_ln66_5_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_905_p3),64));
    zext_ln66_6_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_856_p3),64));
    zext_ln66_7_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_881_p3),64));
    zext_ln66_8_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_917_p3),64));
    zext_ln66_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_811_p3),64));
    zext_ln78_2_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1441),6));
    zext_ln78_4_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_reg_1457),32));
    zext_ln78_5_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1447),10));
    zext_ln78_6_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_1_reg_1462),32));
    zext_ln78_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1435),6));
    zext_ln79_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_935_p2),32));
end behav;
