// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _apply_kernel_single_s_HH_
#define _apply_kernel_single_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct apply_kernel_single_s : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<8> > p_read;
    sc_in< sc_lv<8> > p_read1;
    sc_in< sc_lv<8> > p_read2;
    sc_in< sc_lv<8> > p_read3;
    sc_in< sc_lv<8> > p_read4;
    sc_in< sc_lv<8> > p_read5;
    sc_in< sc_lv<8> > p_read6;
    sc_in< sc_lv<8> > p_read7;
    sc_in< sc_lv<8> > p_read8;
    sc_out< sc_lv<5> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    apply_kernel_single_s(sc_module_name name);
    SC_HAS_PROCESS(apply_kernel_single_s);

    ~apply_kernel_single_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > add_ln40_fu_94_p2;
    sc_signal< sc_lv<8> > add_ln40_reg_159;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > add_ln40_1_fu_100_p2;
    sc_signal< sc_lv<8> > add_ln40_1_reg_164;
    sc_signal< sc_lv<8> > add_ln40_6_fu_124_p2;
    sc_signal< sc_lv<8> > add_ln40_6_reg_169;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<8> > add_ln40_4_fu_112_p2;
    sc_signal< sc_lv<8> > add_ln40_5_fu_118_p2;
    sc_signal< sc_lv<8> > add_ln40_3_fu_106_p2;
    sc_signal< sc_lv<8> > add_ln40_2_fu_130_p2;
    sc_signal< sc_lv<8> > sum_fu_134_p2;
    sc_signal< sc_lv<8> > mul_ln43_fu_143_p0;
    sc_signal< sc_lv<18> > mul_ln43_fu_143_p2;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<8> > p_read_int_reg;
    sc_signal< sc_lv<8> > p_read1_int_reg;
    sc_signal< sc_lv<8> > p_read2_int_reg;
    sc_signal< sc_lv<8> > p_read3_int_reg;
    sc_signal< sc_lv<8> > p_read4_int_reg;
    sc_signal< sc_lv<8> > p_read5_int_reg;
    sc_signal< sc_lv<8> > p_read6_int_reg;
    sc_signal< sc_lv<8> > p_read7_int_reg;
    sc_signal< sc_lv<8> > p_read8_int_reg;
    sc_signal< sc_lv<5> > ap_return_int;
    sc_signal< sc_lv<5> > ap_return_int_reg;
    sc_signal< sc_lv<18> > mul_ln43_fu_143_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<18> ap_const_lv18_1C8;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_10;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln40_1_fu_100_p2();
    void thread_add_ln40_2_fu_130_p2();
    void thread_add_ln40_3_fu_106_p2();
    void thread_add_ln40_4_fu_112_p2();
    void thread_add_ln40_5_fu_118_p2();
    void thread_add_ln40_6_fu_124_p2();
    void thread_add_ln40_fu_94_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_return();
    void thread_mul_ln43_fu_143_p0();
    void thread_mul_ln43_fu_143_p00();
    void thread_mul_ln43_fu_143_p2();
    void thread_sum_fu_134_p2();
};

}

using namespace ap_rtl;

#endif
