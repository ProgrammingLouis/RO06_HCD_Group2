// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _apply_kernel_single_s_HH_
#define _apply_kernel_single_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct apply_kernel_single_s : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > input_0_0_read;
    sc_in< sc_lv<8> > input_0_1_read;
    sc_in< sc_lv<8> > input_0_2_read;
    sc_in< sc_lv<8> > input_1_0_read;
    sc_in< sc_lv<8> > input_1_1_read;
    sc_in< sc_lv<8> > input_1_2_read;
    sc_in< sc_lv<8> > input_2_0_read;
    sc_in< sc_lv<8> > input_2_1_read;
    sc_in< sc_lv<8> > input_2_2_read;
    sc_out< sc_lv<5> > ap_return;


    // Module declarations
    apply_kernel_single_s(sc_module_name name);
    SC_HAS_PROCESS(apply_kernel_single_s);

    ~apply_kernel_single_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > add_ln40_4_fu_94_p2;
    sc_signal< sc_lv<8> > add_ln40_4_reg_154;
    sc_signal< sc_lv<8> > add_ln40_fu_100_p2;
    sc_signal< sc_lv<8> > add_ln40_reg_159;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > add_ln40_1_fu_106_p2;
    sc_signal< sc_lv<8> > add_ln40_1_reg_164;
    sc_signal< sc_lv<8> > add_ln40_3_fu_112_p2;
    sc_signal< sc_lv<8> > add_ln40_3_reg_169;
    sc_signal< sc_lv<8> > add_ln40_5_fu_118_p2;
    sc_signal< sc_lv<8> > add_ln40_5_reg_174;
    sc_signal< sc_lv<8> > add_ln40_2_fu_123_p2;
    sc_signal< sc_lv<8> > add_ln40_2_reg_179;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > add_ln40_6_fu_127_p2;
    sc_signal< sc_lv<8> > add_ln40_6_reg_184;
    sc_signal< sc_lv<8> > sum_fu_131_p2;
    sc_signal< sc_lv<8> > sum_reg_189;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > mul_ln43_fu_138_p0;
    sc_signal< sc_lv<18> > mul_ln43_fu_138_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_lv<18> > mul_ln43_fu_138_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<18> ap_const_lv18_1C8;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln40_1_fu_106_p2();
    void thread_add_ln40_2_fu_123_p2();
    void thread_add_ln40_3_fu_112_p2();
    void thread_add_ln40_4_fu_94_p2();
    void thread_add_ln40_5_fu_118_p2();
    void thread_add_ln40_6_fu_127_p2();
    void thread_add_ln40_fu_100_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_mul_ln43_fu_138_p0();
    void thread_mul_ln43_fu_138_p00();
    void thread_mul_ln43_fu_138_p2();
    void thread_sum_fu_131_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
