-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HCD_filter_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    I_x_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    I_x_ce0 : OUT STD_LOGIC;
    I_x_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    I_y_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    I_y_ce0 : OUT STD_LOGIC;
    I_y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_img_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_img_ce0 : OUT STD_LOGIC;
    output_img_we0 : OUT STD_LOGIC;
    output_img_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of HCD_filter_hw is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_3FA47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_407F400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001111111010000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_1C8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_475 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_488 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal y_fu_506_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln55_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal yy_fu_522_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal yy_reg_1022 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln62_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_fu_528_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ky_reg_1027 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln66_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln66_reg_1032 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln63_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kx_fu_581_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kx_reg_1050 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_1_fu_591_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln66_1_reg_1055 : STD_LOGIC_VECTOR (4 downto 0);
    signal I_x_load_reg_1060 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal I_y_load_reg_1067 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_reg_1074 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_8_reg_1079 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_16_reg_1084 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_1_reg_1089 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln40_9_reg_1094 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_17_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_load_3_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal Iy2_window_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_load_3_reg_1109 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_load_3_reg_1114 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_load_4_reg_1119 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Ix2_window_load_5_reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_load_4_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_load_5_reg_1134 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_load_4_reg_1139 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_load_5_reg_1144 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_5_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_5_reg_1149 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln40_13_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_13_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_21_fu_645_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_21_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sum_3_fu_682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_fu_701_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_reg_1174 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1179 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_12_reg_1185 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_1191 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln79_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal mul_ln78_fu_790_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln78_reg_1201 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal mul_ln78_1_fu_800_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln78_1_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln78_2_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln83_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_1226 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln83_1_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_reg_1236 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal x_fu_867_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal Ix2_window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ix2_window_ce0 : STD_LOGIC;
    signal Ix2_window_we0 : STD_LOGIC;
    signal Ix2_window_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ix2_window_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ix2_window_ce1 : STD_LOGIC;
    signal Iy2_window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Iy2_window_ce0 : STD_LOGIC;
    signal Iy2_window_we0 : STD_LOGIC;
    signal Iy2_window_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Iy2_window_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Iy2_window_ce1 : STD_LOGIC;
    signal Ixy_window_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ixy_window_ce0 : STD_LOGIC;
    signal Ixy_window_we0 : STD_LOGIC;
    signal Ixy_window_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ixy_window_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Ixy_window_ce1 : STD_LOGIC;
    signal y_0_reg_391 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln54_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_0_reg_415 : STD_LOGIC_VECTOR (2 downto 0);
    signal kx_0_reg_426 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln66_1_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln66_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_441_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_451_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_454_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln62_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_538_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln66_fu_534_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln63_fu_552_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xx_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_568_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln66_2_fu_587_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_4_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_12_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_20_fu_639_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_3_fu_654_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_6_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_2_fu_650_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_11_fu_673_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_14_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_10_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_19_fu_692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_22_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_18_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_fu_710_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_fu_710_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln43_1_fu_729_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_1_fu_729_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln43_2_fu_748_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_2_fu_748_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln79_fu_764_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln43_fu_773_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln43_1_fu_776_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln78_fu_790_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln78_fu_790_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln43_2_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln78_1_fu_800_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln78_3_fu_796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln78_1_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln83_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_818_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln83_fu_828_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln83_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_854_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln43_1_fu_729_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln43_2_fu_748_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln43_fu_710_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln78_fu_790_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln78_fu_790_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component HLS_accel_dsub_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dmul_64fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dcmp_64g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_sitodp_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HCD_filter_hw_Ix2bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Ix2_window_U : component HCD_filter_hw_Ix2bkb
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Ix2_window_address0,
        ce0 => Ix2_window_ce0,
        we0 => Ix2_window_we0,
        d0 => Ix2_window_d0,
        q0 => Ix2_window_q0,
        address1 => Ix2_window_address1,
        ce1 => Ix2_window_ce1,
        q1 => Ix2_window_q1);

    Iy2_window_U : component HCD_filter_hw_Ix2bkb
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Iy2_window_address0,
        ce0 => Iy2_window_ce0,
        we0 => Iy2_window_we0,
        d0 => Iy2_window_d0,
        q0 => Iy2_window_q0,
        address1 => Iy2_window_address1,
        ce1 => Iy2_window_ce1,
        q1 => Iy2_window_q1);

    Ixy_window_U : component HCD_filter_hw_Ix2bkb
    generic map (
        DataWidth => 8,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Ixy_window_address0,
        ce0 => Ixy_window_ce0,
        we0 => Ixy_window_we0,
        d0 => Ixy_window_d0,
        q0 => Ixy_window_q0,
        address1 => Ixy_window_address1,
        ce1 => Ixy_window_ce1,
        q1 => Ixy_window_q1);

    HLS_accel_dsub_64eOg_U2 : component HLS_accel_dsub_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_437_p0,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    HLS_accel_dmul_64fYi_U3 : component HLS_accel_dmul_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_441_p0,
        din1 => grp_fu_441_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_441_p2);

    HLS_accel_dcmp_64g8j_U4 : component HLS_accel_dcmp_64g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_488,
        din1 => ap_const_lv64_407F400000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_446_p2);

    HLS_accel_sitodp_hbi_U5 : component HLS_accel_sitodp_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_451_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p1);

    HLS_accel_sitodp_hbi_U6 : component HLS_accel_sitodp_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_454_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_454_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    kx_0_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                kx_0_reg_426 <= kx_reg_1050;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_fu_516_p2 = ap_const_lv1_0))) then 
                kx_0_reg_426 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    ky_0_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_556_p2 = ap_const_lv1_1))) then 
                ky_0_reg_415 <= ky_reg_1027;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln55_fu_500_p2 = ap_const_lv1_0))) then 
                ky_0_reg_415 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    x_0_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln54_fu_494_p2 = ap_const_lv1_0))) then 
                x_0_reg_403 <= ap_const_lv8_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                x_0_reg_403 <= x_fu_867_p2;
            end if; 
        end if;
    end process;

    y_0_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln55_fu_500_p2 = ap_const_lv1_1))) then 
                y_0_reg_391 <= y_fu_506_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_reg_391 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                I_x_load_reg_1060 <= I_x_q0;
                I_y_load_reg_1067 <= I_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                Ix2_window_load_3_reg_1104 <= Ix2_window_q1;
                Ixy_window_load_3_reg_1114 <= Ixy_window_q1;
                Iy2_window_load_3_reg_1109 <= Iy2_window_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Ix2_window_load_4_reg_1119 <= Ix2_window_q0;
                Ix2_window_load_5_reg_1124 <= Ix2_window_q1;
                Ixy_window_load_4_reg_1139 <= Ixy_window_q0;
                Ixy_window_load_5_reg_1144 <= Ixy_window_q1;
                Iy2_window_load_4_reg_1129 <= Iy2_window_q0;
                Iy2_window_load_5_reg_1134 <= Iy2_window_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln40_13_reg_1154 <= add_ln40_13_fu_634_p2;
                add_ln40_21_reg_1159 <= add_ln40_21_fu_645_p2;
                add_ln40_5_reg_1149 <= add_ln40_5_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln40_16_reg_1084 <= grp_fu_469_p2;
                add_ln40_8_reg_1079 <= grp_fu_463_p2;
                add_ln40_reg_1074 <= grp_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln40_17_reg_1099 <= grp_fu_469_p2;
                add_ln40_1_reg_1089 <= grp_fu_457_p2;
                add_ln40_9_reg_1094 <= grp_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_556_p2 = ap_const_lv1_0))) then
                add_ln66_1_reg_1055 <= add_ln66_1_fu_591_p2;
                kx_reg_1050 <= kx_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                and_ln83_reg_1236 <= and_ln83_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                icmp_ln83_1_reg_1231 <= icmp_ln83_1_fu_838_p2;
                icmp_ln83_reg_1226 <= icmp_ln83_fu_832_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_fu_516_p2 = ap_const_lv1_0))) then
                ky_reg_1027 <= ky_fu_528_p2;
                sub_ln66_reg_1032 <= sub_ln66_fu_546_p2;
                yy_reg_1022 <= yy_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                mul_ln78_1_reg_1206 <= mul_ln78_1_fu_800_p2;
                mul_ln78_reg_1201 <= mul_ln78_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_475 <= grp_fu_451_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_482 <= grp_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_488 <= grp_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sum_1_reg_1164 <= sum_1_fu_663_p2;
                sum_3_reg_1169 <= sum_3_fu_682_p2;
                sum_5_reg_1174 <= sum_5_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_11_reg_1179 <= mul_ln43_fu_710_p2(17 downto 12);
                tmp_12_reg_1185 <= mul_ln43_1_fu_729_p2(17 downto 12);
                tmp_13_reg_1191 <= mul_ln43_2_fu_748_p2(17 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_4_reg_1221 <= grp_fu_454_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln55_fu_500_p2, ap_CS_fsm_state4, icmp_ln62_fu_516_p2, ap_CS_fsm_state5, icmp_ln63_fu_556_p2, ap_CS_fsm_state2, icmp_ln54_fu_494_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln54_fu_494_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln55_fu_500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_fu_516_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_556_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    I_x_address0 <= zext_ln66_1_fu_575_p1(16 - 1 downto 0);

    I_x_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            I_x_ce0 <= ap_const_logic_1;
        else 
            I_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    I_y_address0 <= zext_ln66_1_fu_575_p1(16 - 1 downto 0);

    I_y_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            I_y_ce0 <= ap_const_logic_1;
        else 
            I_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ix2_window_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state7, sext_ln66_fu_601_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ix2_window_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ix2_window_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Ix2_window_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Ix2_window_address0 <= sext_ln66_fu_601_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Ix2_window_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Ix2_window_address0 <= "XXXX";
        end if; 
    end process;


    Ix2_window_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ix2_window_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ix2_window_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Ix2_window_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Ix2_window_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Ix2_window_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            Ix2_window_address1 <= "XXXX";
        end if; 
    end process;


    Ix2_window_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Ix2_window_ce0 <= ap_const_logic_1;
        else 
            Ix2_window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ix2_window_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Ix2_window_ce1 <= ap_const_logic_1;
        else 
            Ix2_window_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Ix2_window_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_x_load_reg_1060) * signed(I_x_load_reg_1060))), 8));

    Ix2_window_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Ix2_window_we0 <= ap_const_logic_1;
        else 
            Ix2_window_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Ixy_window_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state7, sext_ln66_fu_601_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ixy_window_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ixy_window_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Ixy_window_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Ixy_window_address0 <= sext_ln66_fu_601_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Ixy_window_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Ixy_window_address0 <= "XXXX";
        end if; 
    end process;


    Ixy_window_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Ixy_window_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Ixy_window_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Ixy_window_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Ixy_window_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Ixy_window_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            Ixy_window_address1 <= "XXXX";
        end if; 
    end process;


    Ixy_window_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Ixy_window_ce0 <= ap_const_logic_1;
        else 
            Ixy_window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ixy_window_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Ixy_window_ce1 <= ap_const_logic_1;
        else 
            Ixy_window_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Ixy_window_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_y_load_reg_1067) * signed(I_x_load_reg_1060))), 8));

    Ixy_window_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Ixy_window_we0 <= ap_const_logic_1;
        else 
            Ixy_window_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Iy2_window_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state7, sext_ln66_fu_601_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Iy2_window_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Iy2_window_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Iy2_window_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Iy2_window_address0 <= sext_ln66_fu_601_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Iy2_window_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            Iy2_window_address0 <= "XXXX";
        end if; 
    end process;


    Iy2_window_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Iy2_window_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Iy2_window_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Iy2_window_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Iy2_window_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Iy2_window_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            Iy2_window_address1 <= "XXXX";
        end if; 
    end process;


    Iy2_window_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Iy2_window_ce0 <= ap_const_logic_1;
        else 
            Iy2_window_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Iy2_window_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Iy2_window_ce1 <= ap_const_logic_1;
        else 
            Iy2_window_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Iy2_window_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_y_load_reg_1067) * signed(I_y_load_reg_1067))), 8));

    Iy2_window_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Iy2_window_we0 <= ap_const_logic_1;
        else 
            Iy2_window_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln40_10_fu_669_p2 <= std_logic_vector(unsigned(add_ln40_9_reg_1094) + unsigned(add_ln40_8_reg_1079));
    add_ln40_11_fu_673_p2 <= std_logic_vector(unsigned(Iy2_window_load_3_reg_1109) + unsigned(Iy2_window_load_4_reg_1129));
    add_ln40_12_fu_628_p2 <= std_logic_vector(unsigned(Iy2_window_q0) + unsigned(Iy2_window_q1));
    add_ln40_13_fu_634_p2 <= std_logic_vector(unsigned(add_ln40_12_fu_628_p2) + unsigned(Iy2_window_load_5_reg_1134));
    add_ln40_14_fu_677_p2 <= std_logic_vector(unsigned(add_ln40_13_reg_1154) + unsigned(add_ln40_11_fu_673_p2));
    add_ln40_18_fu_688_p2 <= std_logic_vector(unsigned(add_ln40_17_reg_1099) + unsigned(add_ln40_16_reg_1084));
    add_ln40_19_fu_692_p2 <= std_logic_vector(unsigned(Ixy_window_load_3_reg_1114) + unsigned(Ixy_window_load_4_reg_1139));
    add_ln40_20_fu_639_p2 <= std_logic_vector(unsigned(Ixy_window_q0) + unsigned(Ixy_window_q1));
    add_ln40_21_fu_645_p2 <= std_logic_vector(unsigned(add_ln40_20_fu_639_p2) + unsigned(Ixy_window_load_5_reg_1144));
    add_ln40_22_fu_696_p2 <= std_logic_vector(unsigned(add_ln40_21_reg_1159) + unsigned(add_ln40_19_fu_692_p2));
    add_ln40_2_fu_650_p2 <= std_logic_vector(unsigned(add_ln40_1_reg_1089) + unsigned(add_ln40_reg_1074));
    add_ln40_3_fu_654_p2 <= std_logic_vector(unsigned(Ix2_window_load_3_reg_1104) + unsigned(Ix2_window_load_4_reg_1119));
    add_ln40_4_fu_617_p2 <= std_logic_vector(unsigned(Ix2_window_q0) + unsigned(Ix2_window_q1));
    add_ln40_5_fu_623_p2 <= std_logic_vector(unsigned(add_ln40_4_fu_617_p2) + unsigned(Ix2_window_load_5_reg_1124));
    add_ln40_6_fu_658_p2 <= std_logic_vector(unsigned(add_ln40_5_reg_1149) + unsigned(add_ln40_3_fu_654_p2));
    add_ln66_1_fu_591_p2 <= std_logic_vector(unsigned(sub_ln66_reg_1032) + unsigned(zext_ln66_2_fu_587_p1));
    add_ln79_fu_764_p2 <= std_logic_vector(signed(tmp_11_reg_1179) + signed(tmp_12_reg_1185));
    and_ln83_fu_848_p2 <= (or_ln83_fu_844_p2 and grp_fu_446_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln54_fu_494_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln54_fu_494_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln54_fu_494_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln54_fu_494_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln83_fu_814_p1 <= reg_488;

    grp_fu_437_p0_assign_proc : process(reg_475, reg_488, ap_CS_fsm_state28, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_437_p0 <= reg_488;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_437_p0 <= reg_475;
        else 
            grp_fu_437_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_437_p1_assign_proc : process(reg_482, tmp_4_reg_1221, ap_CS_fsm_state28, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_437_p1 <= reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_437_p1 <= tmp_4_reg_1221;
        else 
            grp_fu_437_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_441_p0_assign_proc : process(reg_475, ap_CS_fsm_state27, reg_482, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_441_p0 <= reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_441_p0 <= reg_475;
        else 
            grp_fu_441_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_441_p1_assign_proc : process(reg_475, ap_CS_fsm_state27, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_441_p1 <= ap_const_lv64_3FA47AE147AE147B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_441_p1 <= reg_475;
        else 
            grp_fu_441_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_451_p0_assign_proc : process(zext_ln79_fu_768_p1, ap_CS_fsm_state15, zext_ln78_2_fu_806_p1, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_451_p0 <= zext_ln78_2_fu_806_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_451_p0 <= zext_ln79_fu_768_p1;
        else 
            grp_fu_451_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_454_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_1_reg_1206),32));
    grp_fu_457_p2 <= std_logic_vector(unsigned(Ix2_window_q1) + unsigned(Ix2_window_q0));
    grp_fu_463_p2 <= std_logic_vector(unsigned(Iy2_window_q1) + unsigned(Iy2_window_q0));
    grp_fu_469_p2 <= std_logic_vector(unsigned(Ixy_window_q1) + unsigned(Ixy_window_q0));
    icmp_ln54_fu_494_p2 <= "1" when (y_0_reg_391 = ap_const_lv8_FF) else "0";
    icmp_ln55_fu_500_p2 <= "1" when (x_0_reg_403 = ap_const_lv8_FF) else "0";
    icmp_ln62_fu_516_p2 <= "1" when (ky_0_reg_415 = ap_const_lv3_2) else "0";
    icmp_ln63_fu_556_p2 <= "1" when (kx_0_reg_426 = ap_const_lv3_2) else "0";
    icmp_ln83_1_fu_838_p2 <= "1" when (trunc_ln83_fu_828_p1 = ap_const_lv52_0) else "0";
    icmp_ln83_fu_832_p2 <= "0" when (tmp_2_fu_818_p4 = ap_const_lv11_7FF) else "1";
    kx_fu_581_p2 <= std_logic_vector(signed(kx_0_reg_426) + signed(ap_const_lv3_1));
    ky_fu_528_p2 <= std_logic_vector(signed(ky_0_reg_415) + signed(ap_const_lv3_1));
    mul_ln43_1_fu_729_p1 <= mul_ln43_1_fu_729_p10(8 - 1 downto 0);
    mul_ln43_1_fu_729_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_reg_1169),18));
    mul_ln43_1_fu_729_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln43_1_fu_729_p1), 18));
    mul_ln43_2_fu_748_p1 <= mul_ln43_2_fu_748_p10(8 - 1 downto 0);
    mul_ln43_2_fu_748_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_reg_1174),18));
    mul_ln43_2_fu_748_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln43_2_fu_748_p1), 18));
    mul_ln43_fu_710_p1 <= mul_ln43_fu_710_p10(8 - 1 downto 0);
    mul_ln43_fu_710_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_reg_1164),18));
    mul_ln43_fu_710_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln43_fu_710_p1), 18));
    mul_ln78_1_fu_800_p0 <= zext_ln78_3_fu_796_p1(8 - 1 downto 0);
    mul_ln78_1_fu_800_p1 <= zext_ln78_3_fu_796_p1(8 - 1 downto 0);
    mul_ln78_1_fu_800_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_1_fu_800_p0) * unsigned(mul_ln78_1_fu_800_p1), 16));
    mul_ln78_fu_790_p0 <= mul_ln78_fu_790_p00(8 - 1 downto 0);
    mul_ln78_fu_790_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln43_fu_773_p1),16));
    mul_ln78_fu_790_p1 <= mul_ln78_fu_790_p10(8 - 1 downto 0);
    mul_ln78_fu_790_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln43_1_fu_776_p1),16));
    mul_ln78_fu_790_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_fu_790_p0) * unsigned(mul_ln78_fu_790_p1), 16));
    or_ln83_fu_844_p2 <= (icmp_ln83_reg_1226 or icmp_ln83_1_reg_1231);
    output_img_address0 <= zext_ln84_fu_862_p1(16 - 1 downto 0);

    output_img_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_img_ce0 <= ap_const_logic_1;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_img_d0 <= and_ln83_reg_1236;

    output_img_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_img_we0 <= ap_const_logic_1;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln43_1_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_reg_1185),8));

        sext_ln43_2_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_1191),8));

        sext_ln43_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_1179),8));

        sext_ln62_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ky_0_reg_415),8));

        sext_ln63_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kx_0_reg_426),8));

        sext_ln66_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln66_1_reg_1055),64));

    sub_ln66_fu_546_p2 <= std_logic_vector(unsigned(tmp_9_fu_538_p3) - unsigned(zext_ln66_fu_534_p1));
    sum_1_fu_663_p2 <= std_logic_vector(unsigned(add_ln40_6_fu_658_p2) + unsigned(add_ln40_2_fu_650_p2));
    sum_3_fu_682_p2 <= std_logic_vector(unsigned(add_ln40_14_fu_677_p2) + unsigned(add_ln40_10_fu_669_p2));
    sum_5_fu_701_p2 <= std_logic_vector(unsigned(add_ln40_22_fu_696_p2) + unsigned(add_ln40_18_fu_688_p2));
    tmp_2_fu_818_p4 <= bitcast_ln83_fu_814_p1(62 downto 52);
    tmp_8_fu_854_p3 <= (y_0_reg_391 & x_0_reg_403);
    tmp_9_fu_538_p3 <= (ky_fu_528_p2 & ap_const_lv2_0);
    tmp_s_fu_568_p3 <= (yy_reg_1022 & xx_fu_562_p2);
    trunc_ln83_fu_828_p1 <= bitcast_ln83_fu_814_p1(52 - 1 downto 0);
    x_fu_867_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(x_0_reg_403));
    xx_fu_562_p2 <= std_logic_vector(signed(sext_ln63_fu_552_p1) + signed(x_0_reg_403));
    y_fu_506_p2 <= std_logic_vector(unsigned(y_0_reg_391) + unsigned(ap_const_lv8_1));
    yy_fu_522_p2 <= std_logic_vector(signed(sext_ln62_fu_512_p1) + signed(y_0_reg_391));
    zext_ln66_1_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_568_p3),64));
    zext_ln66_2_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_fu_581_p2),5));
    zext_ln66_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky_fu_528_p2),5));
    zext_ln78_2_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln78_reg_1201),32));
    zext_ln78_3_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln43_2_fu_779_p1),16));
    zext_ln79_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_764_p2),32));
    zext_ln84_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_854_p3),64));
end behav;
