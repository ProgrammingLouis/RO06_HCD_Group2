-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity wrapped_HCD_filter_h is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of wrapped_HCD_filter_h is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal y_fu_243_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_420 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln122_fu_257_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln122_reg_425 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln121_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_reg_433 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln126_fu_277_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln126_reg_438 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln122_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_292_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_446 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln132_fu_306_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln132_reg_451 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln131_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_316_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_reg_459 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln136_fu_326_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln136_reg_464 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln132_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_341_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_2_reg_472 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal shl_ln_fu_351_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_477 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln144_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln145_1_fu_367_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln145_1_reg_482 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_2_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_2_reg_490 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln145_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_last_V_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_last_V_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal I_x_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce0 : STD_LOGIC;
    signal I_x_we0 : STD_LOGIC;
    signal I_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce0 : STD_LOGIC;
    signal I_y_we0 : STD_LOGIC;
    signal I_y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_img_ce0 : STD_LOGIC;
    signal output_img_we0 : STD_LOGIC;
    signal output_img_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_HCD_filter_hw_fu_222_ap_start : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_ap_done : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_ap_idle : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_ap_ready : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_I_x_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_HCD_filter_hw_fu_222_I_x_ce0 : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_I_y_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_HCD_filter_hw_fu_222_I_y_ce0 : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_output_img_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_HCD_filter_hw_fu_222_output_img_ce0 : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_output_img_we0 : STD_LOGIC;
    signal grp_HCD_filter_hw_fu_222_output_img_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pop_stream_4_5_5_s_fu_229_ap_start : STD_LOGIC;
    signal grp_pop_stream_4_5_5_s_fu_229_ap_done : STD_LOGIC;
    signal grp_pop_stream_4_5_5_s_fu_229_ap_idle : STD_LOGIC;
    signal grp_pop_stream_4_5_5_s_fu_229_ap_ready : STD_LOGIC;
    signal grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_pop_stream_4_5_5_s_fu_229_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal y_0_reg_156 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_0_reg_167 : STD_LOGIC_VECTOR (8 downto 0);
    signal y1_0_reg_178 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_0_reg_189 : STD_LOGIC_VECTOR (8 downto 0);
    signal y5_0_reg_200 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal x6_0_reg_211 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_HCD_filter_hw_fu_222_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln126_1_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_1_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_249_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln126_fu_273_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_298_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln136_fu_322_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln146_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_359_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln145_fu_371_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln147_fu_392_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln147_fu_396_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal idx_fu_387_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component HCD_filter_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        I_x_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_x_ce0 : OUT STD_LOGIC;
        I_x_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        I_y_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_y_ce0 : OUT STD_LOGIC;
        I_y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_img_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_img_ce0 : OUT STD_LOGIC;
        output_img_we0 : OUT STD_LOGIC;
        output_img_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pop_stream_4_5_5_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        INPUT_STREAM_TDATA_blk_n : OUT STD_LOGIC );
    end component;


    component wrapped_HCD_filteibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component wrapped_HCD_filtekbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    I_x_U : component wrapped_HCD_filteibs
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => I_x_address0,
        ce0 => I_x_ce0,
        we0 => I_x_we0,
        d0 => grp_pop_stream_4_5_5_s_fu_229_ap_return,
        q0 => I_x_q0);

    I_y_U : component wrapped_HCD_filteibs
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => I_y_address0,
        ce0 => I_y_ce0,
        we0 => I_y_we0,
        d0 => grp_pop_stream_4_5_5_s_fu_229_ap_return,
        q0 => I_y_q0);

    output_img_U : component wrapped_HCD_filtekbM
    generic map (
        DataWidth => 1,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_img_address0,
        ce0 => output_img_ce0,
        we0 => output_img_we0,
        d0 => grp_HCD_filter_hw_fu_222_output_img_d0,
        q0 => output_img_q0);

    grp_HCD_filter_hw_fu_222 : component HCD_filter_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_HCD_filter_hw_fu_222_ap_start,
        ap_done => grp_HCD_filter_hw_fu_222_ap_done,
        ap_idle => grp_HCD_filter_hw_fu_222_ap_idle,
        ap_ready => grp_HCD_filter_hw_fu_222_ap_ready,
        I_x_address0 => grp_HCD_filter_hw_fu_222_I_x_address0,
        I_x_ce0 => grp_HCD_filter_hw_fu_222_I_x_ce0,
        I_x_q0 => I_x_q0,
        I_y_address0 => grp_HCD_filter_hw_fu_222_I_y_address0,
        I_y_ce0 => grp_HCD_filter_hw_fu_222_I_y_ce0,
        I_y_q0 => I_y_q0,
        output_img_address0 => grp_HCD_filter_hw_fu_222_output_img_address0,
        output_img_ce0 => grp_HCD_filter_hw_fu_222_output_img_ce0,
        output_img_we0 => grp_HCD_filter_hw_fu_222_output_img_we0,
        output_img_d0 => grp_HCD_filter_hw_fu_222_output_img_d0);

    grp_pop_stream_4_5_5_s_fu_229 : component pop_stream_4_5_5_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pop_stream_4_5_5_s_fu_229_ap_start,
        ap_done => grp_pop_stream_4_5_5_s_fu_229_ap_done,
        ap_idle => grp_pop_stream_4_5_5_s_fu_229_ap_idle,
        ap_ready => grp_pop_stream_4_5_5_s_fu_229_ap_ready,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TREADY,
        ap_return => grp_pop_stream_4_5_5_s_fu_229_ap_return,
        INPUT_STREAM_TDATA_blk_n => grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_HCD_filter_hw_fu_222_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_HCD_filter_hw_fu_222_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln131_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_HCD_filter_hw_fu_222_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_HCD_filter_hw_fu_222_ap_ready = ap_const_logic_1)) then 
                    grp_HCD_filter_hw_fu_222_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x2_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                x2_0_reg_189 <= x_1_reg_459;
            elsif (((icmp_ln131_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x2_0_reg_189 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x6_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                x6_0_reg_211 <= x_2_reg_490;
            elsif (((icmp_ln144_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                x6_0_reg_211 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    x_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_reg_167 <= x_reg_433;
            elsif (((icmp_ln121_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_167 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    y1_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y1_0_reg_178 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln132_fu_310_p2 = ap_const_lv1_1))) then 
                y1_0_reg_178 <= y_1_reg_446;
            end if; 
        end if;
    end process;

    y5_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln145_fu_375_p2 = ap_const_lv1_1))) then 
                y5_0_reg_200 <= y_2_reg_472;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_HCD_filter_hw_fu_222_ap_done = ap_const_logic_1))) then 
                y5_0_reg_200 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    y_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_reg_156 <= y_reg_420;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_reg_156 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln126_reg_438 <= add_ln126_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln136_reg_464 <= add_ln136_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                e_last_V_reg_500 <= e_last_V_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    shl_ln_reg_477(15 downto 8) <= shl_ln_fu_351_p3(15 downto 8);
                    zext_ln145_1_reg_482(16 downto 8) <= zext_ln145_1_fu_367_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                x_1_reg_459 <= x_1_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                x_2_reg_490 <= x_2_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_433 <= x_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                y_1_reg_446 <= y_1_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                y_2_reg_472 <= y_2_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_reg_420 <= y_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln122_reg_425(16 downto 8) <= zext_ln122_fu_257_p1(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln132_reg_451(16 downto 8) <= zext_ln132_fu_306_p1(16 downto 8);
            end if;
        end if;
    end process;
    zext_ln122_reg_425(7 downto 0) <= "00000000";
    zext_ln122_reg_425(17) <= '0';
    zext_ln132_reg_451(7 downto 0) <= "00000000";
    zext_ln132_reg_451(17) <= '0';
    shl_ln_reg_477(7 downto 0) <= "00000000";
    zext_ln145_1_reg_482(7 downto 0) <= "00000000";
    zext_ln145_1_reg_482(17) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, OUTPUT_STREAM_TREADY, grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state2, icmp_ln121_fu_237_p2, ap_CS_fsm_state3, icmp_ln122_fu_261_p2, ap_CS_fsm_state5, icmp_ln131_fu_286_p2, ap_CS_fsm_state6, icmp_ln132_fu_310_p2, ap_CS_fsm_state9, icmp_ln144_fu_335_p2, ap_CS_fsm_state10, icmp_ln145_fu_375_p2, grp_HCD_filter_hw_fu_222_ap_done, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln121_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln122_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln131_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln132_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_HCD_filter_hw_fu_222_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln144_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln145_fu_375_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            INPUT_STREAM_TDATA_blk_n <= grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n;
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_STREAM_TREADY_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            INPUT_STREAM_TREADY <= grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    I_x_address0_assign_proc : process(ap_CS_fsm_state4, grp_HCD_filter_hw_fu_222_I_x_address0, ap_CS_fsm_state8, zext_ln126_1_fu_282_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            I_x_address0 <= zext_ln126_1_fu_282_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            I_x_address0 <= grp_HCD_filter_hw_fu_222_I_x_address0;
        else 
            I_x_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_ce0_assign_proc : process(grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n, ap_CS_fsm_state4, grp_HCD_filter_hw_fu_222_I_x_ce0, ap_CS_fsm_state8)
    begin
        if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            I_x_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            I_x_ce0 <= grp_HCD_filter_hw_fu_222_I_x_ce0;
        else 
            I_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_x_we0_assign_proc : process(grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n, ap_CS_fsm_state4)
    begin
        if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            I_x_we0 <= ap_const_logic_1;
        else 
            I_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_address0_assign_proc : process(ap_CS_fsm_state7, grp_HCD_filter_hw_fu_222_I_y_address0, ap_CS_fsm_state8, zext_ln136_1_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            I_y_address0 <= zext_ln136_1_fu_331_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            I_y_address0 <= grp_HCD_filter_hw_fu_222_I_y_address0;
        else 
            I_y_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_ce0_assign_proc : process(grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n, ap_CS_fsm_state7, grp_HCD_filter_hw_fu_222_I_y_ce0, ap_CS_fsm_state8)
    begin
        if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            I_y_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            I_y_ce0 <= grp_HCD_filter_hw_fu_222_I_y_ce0;
        else 
            I_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_we0_assign_proc : process(grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n, ap_CS_fsm_state7)
    begin
        if (((grp_pop_stream_4_5_5_s_fu_229_INPUT_STREAM_TDATA_blk_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            I_y_we0 <= ap_const_logic_1;
        else 
            I_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_q0),32));

    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(OUTPUT_STREAM_TREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUTPUT_STREAM_TREADY;
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_STREAM_TDEST <= ap_const_lv5_0;
    OUTPUT_STREAM_TID <= ap_const_lv5_0;
    OUTPUT_STREAM_TKEEP <= ap_const_lv4_F;
    OUTPUT_STREAM_TLAST <= e_last_V_reg_500;
    OUTPUT_STREAM_TSTRB <= ap_const_lv4_F;
    OUTPUT_STREAM_TUSER <= ap_const_lv4_0;

    OUTPUT_STREAM_TVALID_assign_proc : process(OUTPUT_STREAM_TREADY, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = OUTPUT_STREAM_TREADY) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            OUTPUT_STREAM_TVALID <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    add_ln126_fu_277_p2 <= std_logic_vector(unsigned(zext_ln122_reg_425) + unsigned(zext_ln126_fu_273_p1));
    add_ln136_fu_326_p2 <= std_logic_vector(unsigned(zext_ln132_reg_451) + unsigned(zext_ln136_fu_322_p1));
    add_ln147_fu_396_p2 <= std_logic_vector(unsigned(zext_ln145_1_reg_482) + unsigned(zext_ln147_fu_392_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln144_fu_335_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln144_fu_335_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln144_fu_335_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln144_fu_335_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    e_last_V_fu_406_p2 <= "1" when (idx_fu_387_p2 = ap_const_lv16_FFFF) else "0";
    grp_HCD_filter_hw_fu_222_ap_start <= grp_HCD_filter_hw_fu_222_ap_start_reg;

    grp_pop_stream_4_5_5_s_fu_229_ap_start_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_pop_stream_4_5_5_s_fu_229_ap_start <= ap_const_logic_1;
        else 
            grp_pop_stream_4_5_5_s_fu_229_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln121_fu_237_p2 <= "1" when (y_0_reg_156 = ap_const_lv9_100) else "0";
    icmp_ln122_fu_261_p2 <= "1" when (x_0_reg_167 = ap_const_lv9_100) else "0";
    icmp_ln131_fu_286_p2 <= "1" when (y1_0_reg_178 = ap_const_lv9_100) else "0";
    icmp_ln132_fu_310_p2 <= "1" when (x2_0_reg_189 = ap_const_lv9_100) else "0";
    icmp_ln144_fu_335_p2 <= "1" when (y5_0_reg_200 = ap_const_lv9_100) else "0";
    icmp_ln145_fu_375_p2 <= "1" when (x6_0_reg_211 = ap_const_lv9_100) else "0";
    idx_fu_387_p2 <= std_logic_vector(unsigned(shl_ln_reg_477) + unsigned(zext_ln145_fu_371_p1));

    output_img_address0_assign_proc : process(ap_CS_fsm_state10, grp_HCD_filter_hw_fu_222_output_img_address0, ap_CS_fsm_state8, zext_ln147_1_fu_401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_img_address0 <= zext_ln147_1_fu_401_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_img_address0 <= grp_HCD_filter_hw_fu_222_output_img_address0;
        else 
            output_img_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_img_ce0_assign_proc : process(ap_CS_fsm_state10, grp_HCD_filter_hw_fu_222_output_img_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_img_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_img_ce0 <= grp_HCD_filter_hw_fu_222_output_img_ce0;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_img_we0_assign_proc : process(grp_HCD_filter_hw_fu_222_output_img_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_img_we0 <= grp_HCD_filter_hw_fu_222_output_img_we0;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_351_p3 <= (trunc_ln146_fu_347_p1 & ap_const_lv8_0);
    tmp_2_fu_249_p3 <= (y_0_reg_156 & ap_const_lv8_0);
    tmp_4_fu_298_p3 <= (y1_0_reg_178 & ap_const_lv8_0);
    tmp_6_fu_359_p3 <= (y5_0_reg_200 & ap_const_lv8_0);
    trunc_ln146_fu_347_p1 <= y5_0_reg_200(8 - 1 downto 0);
    x_1_fu_316_p2 <= std_logic_vector(unsigned(x2_0_reg_189) + unsigned(ap_const_lv9_1));
    x_2_fu_381_p2 <= std_logic_vector(unsigned(x6_0_reg_211) + unsigned(ap_const_lv9_1));
    x_fu_267_p2 <= std_logic_vector(unsigned(x_0_reg_167) + unsigned(ap_const_lv9_1));
    y_1_fu_292_p2 <= std_logic_vector(unsigned(y1_0_reg_178) + unsigned(ap_const_lv9_1));
    y_2_fu_341_p2 <= std_logic_vector(unsigned(y5_0_reg_200) + unsigned(ap_const_lv9_1));
    y_fu_243_p2 <= std_logic_vector(unsigned(y_0_reg_156) + unsigned(ap_const_lv9_1));
    zext_ln122_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_249_p3),18));
    zext_ln126_1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_reg_438),64));
    zext_ln126_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_167),18));
    zext_ln132_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_298_p3),18));
    zext_ln136_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_reg_464),64));
    zext_ln136_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x2_0_reg_189),18));
    zext_ln145_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_359_p3),18));
    zext_ln145_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x6_0_reg_211),16));
    zext_ln147_1_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln147_fu_396_p2),64));
    zext_ln147_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x6_0_reg_211),18));
end behav;
