// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "apply_kernel_single_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic apply_kernel_single_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<5> apply_kernel_single_s::ap_ST_fsm_state1 = "1";
const sc_lv<5> apply_kernel_single_s::ap_ST_fsm_state2 = "10";
const sc_lv<5> apply_kernel_single_s::ap_ST_fsm_state3 = "100";
const sc_lv<5> apply_kernel_single_s::ap_ST_fsm_state4 = "1000";
const sc_lv<5> apply_kernel_single_s::ap_ST_fsm_state5 = "10000";
const sc_lv<32> apply_kernel_single_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic apply_kernel_single_s::ap_const_logic_0 = sc_dt::Log_0;

apply_kernel_single_s::apply_kernel_single_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_start);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "apply_kernel_single_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, input_0_0_read, "(port)input_0_0_read");
    sc_trace(mVcdFile, input_0_1_read, "(port)input_0_1_read");
    sc_trace(mVcdFile, input_0_2_read, "(port)input_0_2_read");
    sc_trace(mVcdFile, input_1_0_read, "(port)input_1_0_read");
    sc_trace(mVcdFile, input_1_1_read, "(port)input_1_1_read");
    sc_trace(mVcdFile, input_1_2_read, "(port)input_1_2_read");
    sc_trace(mVcdFile, input_2_0_read, "(port)input_2_0_read");
    sc_trace(mVcdFile, input_2_1_read, "(port)input_2_1_read");
    sc_trace(mVcdFile, input_2_2_read, "(port)input_2_2_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_return, "ap_return");
#endif

    }
}

apply_kernel_single_s::~apply_kernel_single_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void apply_kernel_single_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void apply_kernel_single_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void apply_kernel_single_s::thread_ap_start() {
    ap_start = ap_const_logic_1;
}

void apply_kernel_single_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

