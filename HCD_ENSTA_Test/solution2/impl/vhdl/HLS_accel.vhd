-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_accel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of HLS_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_accel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=1.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.562000,HLS_SYN_LAT=519273,HLS_SYN_TPT=none,HLS_SYN_MEM=70,HLS_SYN_DSP=29,HLS_SYN_FF=4147,HLS_SYN_LUT=5121,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_3FA47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111110100100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_407F400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001111111010000000000000000000000000000000000000000000000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FC04 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv18_1C8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln126_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln136_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln149_reg_1855 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_1855_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal icmp_ln149_reg_1855_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_385 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_0_i_reg_396 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_0_i_reg_408 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten6_reg_420 : STD_LOGIC_VECTOR (16 downto 0);
    signal y1_0_i_reg_431 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_0_i_reg_443 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten13_reg_455 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_0_i_i_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_i_reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten20_reg_489 : STD_LOGIC_VECTOR (16 downto 0);
    signal y5_0_i_reg_500 : STD_LOGIC_VECTOR (8 downto 0);
    signal x6_0_i_reg_512 : STD_LOGIC_VECTOR (8 downto 0);
    signal I_x_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_571 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state14_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state19_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_state24_pp2_stage2_iter2 : BOOLEAN;
    signal ap_block_state29_pp2_stage2_iter3 : BOOLEAN;
    signal ap_block_state34_pp2_stage2_iter4 : BOOLEAN;
    signal ap_block_state39_pp2_stage2_iter5 : BOOLEAN;
    signal ap_block_state44_pp2_stage2_iter6 : BOOLEAN;
    signal ap_block_state49_pp2_stage2_iter7 : BOOLEAN;
    signal ap_block_state54_pp2_stage2_iter8 : BOOLEAN;
    signal ap_block_state59_pp2_stage2_iter9 : BOOLEAN;
    signal ap_block_state64_pp2_stage2_iter10 : BOOLEAN;
    signal ap_block_state69_pp2_stage2_iter11 : BOOLEAN;
    signal ap_block_state74_pp2_stage2_iter12 : BOOLEAN;
    signal ap_block_state79_pp2_stage2_iter13 : BOOLEAN;
    signal ap_block_state84_pp2_stage2_iter14 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal icmp_ln56_reg_1394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state12_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state47_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state52_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state57_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state62_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state67_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state72_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state77_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state82_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal I_y_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_575 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln126_reg_1302 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln126_reg_1302_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_reg_1302_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln126_fu_585_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_fu_591_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_1311 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln127_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_8_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_8_reg_1322 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_8_reg_1322_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_8_reg_1322_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln131_fu_607_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln131_reg_1327 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln131_1_fu_614_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln131_1_reg_1332 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal x_fu_620_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_fu_640_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln131_reg_1343 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln136_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln136_reg_1348_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_1348_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_fu_656_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_2_fu_662_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_2_reg_1357 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln137_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_reg_1362 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_8_1_fu_674_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_8_1_reg_1368 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_8_1_reg_1368_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_8_1_reg_1368_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln141_fu_678_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln141_reg_1373 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln141_1_fu_685_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln141_1_reg_1378 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal x_1_fu_691_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln141_fu_711_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln141_reg_1389 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln56_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1394_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_fu_727_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln56_reg_1398 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln57_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_fu_739_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_reg_1409 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln66_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln66_reg_1416 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln66_1_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln66_1_reg_1421 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_3_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_3_reg_1426 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2_fu_787_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_2_reg_1441 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_1_fu_807_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_1_reg_1458 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state13_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state18_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state23_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state28_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_state33_pp2_stage1_iter4 : BOOLEAN;
    signal ap_block_state38_pp2_stage1_iter5 : BOOLEAN;
    signal ap_block_state43_pp2_stage1_iter6 : BOOLEAN;
    signal ap_block_state48_pp2_stage1_iter7 : BOOLEAN;
    signal ap_block_state53_pp2_stage1_iter8 : BOOLEAN;
    signal ap_block_state58_pp2_stage1_iter9 : BOOLEAN;
    signal ap_block_state63_pp2_stage1_iter10 : BOOLEAN;
    signal ap_block_state68_pp2_stage1_iter11 : BOOLEAN;
    signal ap_block_state73_pp2_stage1_iter12 : BOOLEAN;
    signal ap_block_state78_pp2_stage1_iter13 : BOOLEAN;
    signal ap_block_state83_pp2_stage1_iter14 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal select_ln75_2_fu_813_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_2_reg_1465 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_fu_819_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_reg_1471 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_7_reg_1517 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln69_7_reg_1522 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_7_fu_875_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_7_reg_1527 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state15_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state20_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_state25_pp2_stage3_iter2 : BOOLEAN;
    signal ap_block_state30_pp2_stage3_iter3 : BOOLEAN;
    signal ap_block_state35_pp2_stage3_iter4 : BOOLEAN;
    signal ap_block_state40_pp2_stage3_iter5 : BOOLEAN;
    signal ap_block_state45_pp2_stage3_iter6 : BOOLEAN;
    signal ap_block_state50_pp2_stage3_iter7 : BOOLEAN;
    signal ap_block_state55_pp2_stage3_iter8 : BOOLEAN;
    signal ap_block_state60_pp2_stage3_iter9 : BOOLEAN;
    signal ap_block_state65_pp2_stage3_iter10 : BOOLEAN;
    signal ap_block_state70_pp2_stage3_iter11 : BOOLEAN;
    signal ap_block_state75_pp2_stage3_iter12 : BOOLEAN;
    signal ap_block_state80_pp2_stage3_iter13 : BOOLEAN;
    signal ap_block_state85_pp2_stage3_iter14 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal I_x_load_1_reg_1542 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_load_1_reg_1549 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_load_3_reg_1566 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_load_3_reg_1573 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_4_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_state16_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state21_pp2_stage4_iter1 : BOOLEAN;
    signal ap_block_state26_pp2_stage4_iter2 : BOOLEAN;
    signal ap_block_state31_pp2_stage4_iter3 : BOOLEAN;
    signal ap_block_state36_pp2_stage4_iter4 : BOOLEAN;
    signal ap_block_state41_pp2_stage4_iter5 : BOOLEAN;
    signal ap_block_state46_pp2_stage4_iter6 : BOOLEAN;
    signal ap_block_state51_pp2_stage4_iter7 : BOOLEAN;
    signal ap_block_state56_pp2_stage4_iter8 : BOOLEAN;
    signal ap_block_state61_pp2_stage4_iter9 : BOOLEAN;
    signal ap_block_state66_pp2_stage4_iter10 : BOOLEAN;
    signal ap_block_state71_pp2_stage4_iter11 : BOOLEAN;
    signal ap_block_state76_pp2_stage4_iter12 : BOOLEAN;
    signal ap_block_state81_pp2_stage4_iter13 : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal zext_ln68_4_reg_1580_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_4_reg_1580_pp2_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal I_x_load_5_reg_1595 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_load_5_reg_1602 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_load_6_reg_1609 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_load_6_reg_1616 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_reg_1628 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_load_2_reg_1633 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_2_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_load_2_reg_1643 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln69_2_reg_1648 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_x_load_4_reg_1653 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_4_reg_1658 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_y_load_4_reg_1663 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln69_4_reg_1668 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1216_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_4_reg_1673 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1223_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_12_reg_1678 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1230_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_20_reg_1683 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_fu_917_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_reg_1688 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_2_fu_923_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_2_reg_1693 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_4_fu_927_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_4_reg_1698 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_reg_1703 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1247_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_1_reg_1708 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_8_reg_1713 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_2_fu_931_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln41_2_fu_931_p2 : signal is "no";
    signal add_ln41_2_reg_1718 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1257_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_3_reg_1723 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1252_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_9_reg_1728 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1262_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_11_reg_1733 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_fu_939_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_1738 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_fu_952_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_1743 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_16_reg_1748 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal tmp_20_fu_967_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_reg_1753 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_986_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_reg_1758 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln81_fu_996_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln81_reg_1763 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln41_18_fu_1002_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln41_18_fu_1002_p2 : signal is "no";
    signal add_ln41_18_reg_1768 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_22_fu_1006_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln41_22_fu_1006_p2 : signal is "no";
    signal add_ln41_22_reg_1773 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1783 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln80_fu_1052_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_reg_1788 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln80_2_fu_1061_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln80_1_fu_1069_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_1_reg_1798 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln80_4_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trace_M_reg_1808 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal tmp_reg_1814 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal tmp_1_reg_1819 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal grp_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal det_M_reg_1829 : STD_LOGIC_VECTOR (63 downto 0);
    signal det_M_reg_1829_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal det_M_reg_1829_pp2_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal det_M_reg_1829_pp2_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal R_reg_1839 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal icmp_ln85_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1845 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_1_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_1_reg_1850 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state87_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state88_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state89_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state90_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state91_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state92_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state92_io : BOOLEAN;
    signal ap_block_state93_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state93_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln149_reg_1855_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_1855_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_1855_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln149_fu_1125_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal y_4_fu_1131_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_4_reg_1864 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln150_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_1869 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln149_fu_1143_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln149_reg_1875 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln149_1_fu_1150_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln149_1_reg_1881 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal trunc_ln149_fu_1156_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln149_reg_1887 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_3_fu_1160_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_fu_1187_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_reg_1897 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln152_fu_1196_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln152_reg_1902 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln153_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_1912 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln153_reg_1912_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state12 : STD_LOGIC;
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state87 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal I_x_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce0 : STD_LOGIC;
    signal I_x_we0 : STD_LOGIC;
    signal I_x_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_x_ce1 : STD_LOGIC;
    signal I_y_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce0 : STD_LOGIC;
    signal I_y_we0 : STD_LOGIC;
    signal I_y_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal I_y_ce1 : STD_LOGIC;
    signal output_img_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_img_ce0 : STD_LOGIC;
    signal output_img_we0 : STD_LOGIC;
    signal output_img_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_img_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_y_0_i_phi_fu_400_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_x_0_i_phi_fu_412_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_y1_0_i_phi_fu_435_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_x2_0_i_phi_fu_447_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten13_phi_fu_459_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_y_0_i_i_phi_fu_470_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_x_0_i_i_phi_fu_482_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_y5_0_i_phi_fu_504_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_x6_0_i_phi_fu_516_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln131_1_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_1_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_5_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_8_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_1_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln68_3_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_2_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal zext_ln68_7_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal zext_ln68_6_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal zext_ln152_1_fu_1202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal grp_fu_524_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_540_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_547_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_553_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_553_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_559_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_559_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_626_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln127_fu_633_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln131_fu_637_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_697_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln137_fu_704_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln141_fu_708_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln66_2_fu_759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_773_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_793_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_824_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_838_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_851_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln70_7_fu_875_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln70_7_fu_875_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_881_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_893_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_905_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1272_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_6_fu_935_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln41_6_fu_935_p2 : signal is "no";
    signal grp_fu_1278_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln41_14_fu_948_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln41_14_fu_948_p2 : signal is "no";
    signal add_ln41_10_fu_944_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 of add_ln41_10_fu_944_p2 : signal is "no";
    signal mul_ln44_fu_961_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln44_fu_961_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln44_1_fu_980_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln44_1_fu_980_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1284_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1296_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1290_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_fu_1020_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln44_2_fu_1028_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln44_2_fu_1028_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln44_fu_1014_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln44_1_fu_1017_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln80_fu_1052_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln80_fu_1052_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln44_2_fu_1058_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln80_1_fu_1069_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln80_3_fu_1065_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_1_fu_1069_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln85_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_1082_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln85_fu_1092_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln85_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1173_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln150_fu_1184_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln151_mid2_fu_1166_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln150_1_fu_1180_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln152_fu_1193_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp2_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_TVALID_int : STD_LOGIC;
    signal INPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TUSER_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDEST_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_INPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_TVALID_int : STD_LOGIC;
    signal OUTPUT_STREAM_TREADY_int : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_dest_V_U_vld_out : STD_LOGIC;
    signal mul_ln44_1_fu_980_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln44_2_fu_1028_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln44_fu_961_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln80_fu_1052_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_fu_1052_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component HLS_accel_dsub_64cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dmul_64dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_dcmp_64eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_sitodp_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component HLS_accel_mac_mulg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component HLS_accel_mac_mulhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component HLS_accel_I_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component HLS_accel_output_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component HLS_accel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    HLS_accel_CONTROL_BUS_s_axi_U : component HLS_accel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    I_x_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_x_address0,
        ce0 => I_x_ce0,
        we0 => I_x_we0,
        d0 => pixel_8_reg_1322_pp0_iter2_reg,
        q0 => I_x_q0,
        address1 => I_x_address1,
        ce1 => I_x_ce1,
        q1 => I_x_q1);

    I_y_U : component HLS_accel_I_x
    generic map (
        DataWidth => 8,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => I_y_address0,
        ce0 => I_y_ce0,
        we0 => I_y_we0,
        d0 => pixel_8_1_reg_1368_pp1_iter2_reg,
        q0 => I_y_q0,
        address1 => I_y_address1,
        ce1 => I_y_ce1,
        q1 => I_y_q1);

    output_img_U : component HLS_accel_output_bkb
    generic map (
        DataWidth => 1,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_img_address0,
        ce0 => output_img_ce0,
        we0 => output_img_we0,
        d0 => output_img_d0,
        q0 => output_img_q0);

    HLS_accel_dsub_64cud_U1 : component HLS_accel_dsub_64cud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_524_p0,
        din1 => grp_fu_524_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_524_p2);

    HLS_accel_dmul_64dEe_U2 : component HLS_accel_dmul_64dEe
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_528_p0,
        din1 => grp_fu_528_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p2);

    HLS_accel_dcmp_64eOg_U3 : component HLS_accel_dcmp_64eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => R_reg_1839,
        din1 => ap_const_lv64_407F400000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_535_p2);

    HLS_accel_sitodp_fYi_U4 : component HLS_accel_sitodp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_540_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_540_p1);

    HLS_accel_mac_mulg8j_U5 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_q1,
        din1 => I_x_q1,
        din2 => mul_ln68_7_reg_1517,
        ce => ap_const_logic_1,
        dout => grp_fu_1216_p3);

    HLS_accel_mac_mulg8j_U6 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_y_q1,
        din1 => I_y_q1,
        din2 => mul_ln69_7_reg_1522,
        ce => ap_const_logic_1,
        dout => grp_fu_1223_p3);

    HLS_accel_mac_mulg8j_U7 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_q1,
        din1 => I_y_q1,
        din2 => mul_ln70_7_reg_1527,
        ce => ap_const_logic_1,
        dout => grp_fu_1230_p3);

    HLS_accel_mac_mulg8j_U8 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_1_reg_1542,
        din1 => I_x_load_1_reg_1542,
        din2 => sum_reg_1623,
        ce => ap_const_logic_1,
        dout => grp_fu_1237_p3);

    HLS_accel_mac_mulg8j_U9 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_y_load_1_reg_1549,
        din1 => I_y_load_1_reg_1549,
        din2 => sum_2_reg_1628,
        ce => ap_const_logic_1,
        dout => grp_fu_1242_p3);

    HLS_accel_mac_mulg8j_U10 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_3_reg_1566,
        din1 => I_x_load_3_reg_1566,
        din2 => mul_ln68_2_reg_1638,
        ce => ap_const_logic_1,
        dout => grp_fu_1247_p3);

    HLS_accel_mac_mulg8j_U11 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_y_load_3_reg_1573,
        din1 => I_y_load_3_reg_1573,
        din2 => mul_ln69_2_reg_1648,
        ce => ap_const_logic_1,
        dout => grp_fu_1252_p3);

    HLS_accel_mac_mulg8j_U12 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_5_reg_1595,
        din1 => I_x_load_5_reg_1595,
        din2 => mul_ln68_4_reg_1658,
        ce => ap_const_logic_1,
        dout => grp_fu_1257_p3);

    HLS_accel_mac_mulg8j_U13 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_y_load_5_reg_1602,
        din1 => I_y_load_5_reg_1602,
        din2 => mul_ln69_4_reg_1668,
        ce => ap_const_logic_1,
        dout => grp_fu_1262_p3);

    HLS_accel_mac_mulg8j_U14 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_1_reg_1542,
        din1 => I_y_load_1_reg_1549,
        din2 => sum_4_reg_1688,
        ce => ap_const_logic_1,
        dout => grp_fu_1267_p3);

    HLS_accel_mac_mulhbi_U15 : component HLS_accel_mac_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_6_reg_1609,
        din1 => I_x_load_6_reg_1609,
        din2 => add_ln41_4_reg_1673,
        ce => ap_const_logic_1,
        dout => grp_fu_1272_p3);

    HLS_accel_mac_mulhbi_U16 : component HLS_accel_mac_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_y_load_6_reg_1616,
        din1 => I_y_load_6_reg_1616,
        din2 => add_ln41_12_reg_1678,
        ce => ap_const_logic_1,
        dout => grp_fu_1278_p3);

    HLS_accel_mac_mulg8j_U17 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_3_reg_1566,
        din1 => I_y_load_3_reg_1573,
        din2 => mul_ln70_2_reg_1693,
        ce => ap_const_logic_1,
        dout => grp_fu_1284_p3);

    HLS_accel_mac_mulg8j_U18 : component HLS_accel_mac_mulg8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_5_reg_1595,
        din1 => I_y_load_5_reg_1602,
        din2 => mul_ln70_4_reg_1698,
        ce => ap_const_logic_1,
        dout => grp_fu_1290_p3);

    HLS_accel_mac_mulhbi_U19 : component HLS_accel_mac_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => I_x_load_6_reg_1609,
        din1 => I_y_load_6_reg_1616,
        din2 => add_ln41_20_reg_1683,
        ce => ap_const_logic_1,
        dout => grp_fu_1296_p3);

    regslice_both_INPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDATA,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_data_V_U_ack_in,
        data_out => INPUT_STREAM_TDATA_int,
        vld_out => INPUT_STREAM_TVALID_int,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TKEEP,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_keep_V_U_ack_in,
        data_out => INPUT_STREAM_TKEEP_int,
        vld_out => regslice_both_INPUT_STREAM_keep_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TSTRB,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_strb_V_U_ack_in,
        data_out => INPUT_STREAM_TSTRB_int,
        vld_out => regslice_both_INPUT_STREAM_strb_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TUSER,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_user_V_U_ack_in,
        data_out => INPUT_STREAM_TUSER_int,
        vld_out => regslice_both_INPUT_STREAM_user_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TLAST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_last_V_U_ack_in,
        data_out => INPUT_STREAM_TLAST_int,
        vld_out => regslice_both_INPUT_STREAM_last_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TID,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_id_V_U_ack_in,
        data_out => INPUT_STREAM_TID_int,
        vld_out => regslice_both_INPUT_STREAM_id_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDEST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_dest_V_U_ack_in,
        data_out => INPUT_STREAM_TDEST_int,
        vld_out => regslice_both_INPUT_STREAM_dest_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int,
        apdone_blk => regslice_both_INPUT_STREAM_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => OUTPUT_STREAM_TDATA_int,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => OUTPUT_STREAM_TREADY_int,
        data_out => OUTPUT_STREAM_TDATA,
        vld_out => regslice_both_OUTPUT_STREAM_data_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TKEEP,
        vld_out => regslice_both_OUTPUT_STREAM_keep_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TSTRB,
        vld_out => regslice_both_OUTPUT_STREAM_strb_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_user_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_user_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TUSER,
        vld_out => regslice_both_OUTPUT_STREAM_user_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_user_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => icmp_ln153_reg_1912_pp3_iter4_reg,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_last_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TLAST,
        vld_out => regslice_both_OUTPUT_STREAM_last_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_last_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_id_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TID,
        vld_out => regslice_both_OUTPUT_STREAM_id_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_id_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_dest_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => OUTPUT_STREAM_TVALID_int,
        ack_in => regslice_both_OUTPUT_STREAM_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TDEST,
        vld_out => regslice_both_OUTPUT_STREAM_dest_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)))) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state87) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state87)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state87);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten13_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten13_reg_455 <= ap_const_lv16_0;
            elsif (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten13_reg_455 <= add_ln56_reg_1398;
            end if; 
        end if;
    end process;

    indvar_flatten20_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                indvar_flatten20_reg_489 <= ap_const_lv17_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_fu_1119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar_flatten20_reg_489 <= add_ln149_fu_1125_p2;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten6_reg_420 <= ap_const_lv17_0;
            elsif (((icmp_ln136_fu_650_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten6_reg_420 <= add_ln136_fu_656_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_579_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_385 <= add_ln126_fu_585_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_385 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    x2_0_i_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x2_0_i_reg_443 <= ap_const_lv9_0;
            elsif (((icmp_ln136_reg_1348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                x2_0_i_reg_443 <= x_1_fu_691_p2;
            end if; 
        end if;
    end process;

    x6_0_i_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                x6_0_i_reg_512 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_reg_1855 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                x6_0_i_reg_512 <= x_3_fu_1160_p2;
            end if; 
        end if;
    end process;

    x_0_i_i_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                x_0_i_i_reg_478 <= ap_const_lv8_1;
            elsif (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                x_0_i_i_reg_478 <= x_2_reg_1441;
            end if; 
        end if;
    end process;

    x_0_i_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_reg_1302 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_0_i_reg_408 <= x_fu_620_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_i_reg_408 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    y1_0_i_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                y1_0_i_reg_431 <= ap_const_lv9_0;
            elsif (((icmp_ln136_reg_1348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                y1_0_i_reg_431 <= select_ln141_1_fu_685_p3;
            end if; 
        end if;
    end process;

    y5_0_i_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                y5_0_i_reg_500 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_reg_1855 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                y5_0_i_reg_500 <= select_ln149_1_fu_1150_p3;
            end if; 
        end if;
    end process;

    y_0_i_i_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                y_0_i_i_reg_466 <= ap_const_lv8_1;
            elsif (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_0_i_i_reg_466 <= select_ln75_1_reg_1458;
            end if; 
        end if;
    end process;

    y_0_i_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_reg_1302 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                y_0_i_reg_396 <= select_ln131_1_fu_614_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_i_reg_396 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                I_x_load_1_reg_1542 <= I_x_q1;
                I_x_load_3_reg_1566 <= I_x_q0;
                I_y_load_1_reg_1549 <= I_y_q1;
                I_y_load_3_reg_1573 <= I_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                I_x_load_2_reg_1633 <= I_x_q0;
                I_y_load_2_reg_1643 <= I_y_q0;
                mul_ln68_2_reg_1638 <= grp_fu_547_p2;
                mul_ln69_2_reg_1648 <= grp_fu_553_p2;
                sum_2_reg_1628 <= grp_fu_565_p2;
                sum_reg_1623 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
                I_x_load_4_reg_1653 <= I_x_q1;
                I_y_load_4_reg_1663 <= I_y_q1;
                add_ln41_12_reg_1678 <= grp_fu_1223_p3;
                add_ln41_20_reg_1683 <= grp_fu_1230_p3;
                add_ln41_4_reg_1673 <= grp_fu_1216_p3;
                mul_ln68_4_reg_1658 <= grp_fu_559_p2;
                mul_ln69_4_reg_1668 <= grp_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                I_x_load_5_reg_1595 <= I_x_q1;
                I_x_load_6_reg_1609 <= I_x_q0;
                I_y_load_5_reg_1602 <= I_y_q1;
                I_y_load_6_reg_1616 <= I_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                R_reg_1839 <= grp_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_reg_1302_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln131_reg_1343 <= add_ln131_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_reg_1348_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln141_reg_1389 <= add_ln141_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_reg_1855_pp3_iter1_reg = ap_const_lv1_0))) then
                add_ln152_reg_1902 <= add_ln152_fu_1196_p2;
                idx_reg_1897 <= idx_fu_1187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
                add_ln41_11_reg_1733 <= grp_fu_1262_p3;
                add_ln41_3_reg_1723 <= grp_fu_1257_p3;
                add_ln41_9_reg_1728 <= grp_fu_1252_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln41_16_reg_1748 <= grp_fu_1267_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                add_ln41_18_reg_1768 <= add_ln41_18_fu_1002_p2;
                add_ln41_22_reg_1773 <= add_ln41_22_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
                add_ln41_1_reg_1708 <= grp_fu_1247_p3;
                add_ln41_8_reg_1713 <= grp_fu_1242_p3;
                add_ln41_reg_1703 <= grp_fu_1237_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                add_ln41_2_reg_1718 <= add_ln41_2_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                add_ln56_reg_1398 <= add_ln56_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln66_1_reg_1421 <= add_ln66_1_fu_753_p2;
                add_ln66_reg_1416 <= add_ln66_fu_747_p2;
                icmp_ln57_reg_1403 <= icmp_ln57_fu_733_p2;
                select_ln75_3_reg_1426 <= select_ln75_3_fu_765_p3;
                select_ln75_reg_1409 <= select_ln75_fu_739_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln67_reg_1471 <= add_ln67_fu_819_p2;
                select_ln75_2_reg_1465 <= select_ln75_2_fu_813_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln81_reg_1763 <= add_ln81_fu_996_p2;
                tmp_20_reg_1753 <= mul_ln44_fu_961_p2(17 downto 12);
                tmp_21_reg_1758 <= mul_ln44_1_fu_980_p2(17 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                det_M_reg_1829 <= grp_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                det_M_reg_1829_pp2_iter10_reg <= det_M_reg_1829_pp2_iter9_reg;
                det_M_reg_1829_pp2_iter8_reg <= det_M_reg_1829;
                det_M_reg_1829_pp2_iter9_reg <= det_M_reg_1829_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln126_reg_1302 <= icmp_ln126_fu_579_p2;
                icmp_ln126_reg_1302_pp0_iter1_reg <= icmp_ln126_reg_1302;
                pixel_8_reg_1322_pp0_iter1_reg <= pixel_8_reg_1322;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln126_reg_1302_pp0_iter2_reg <= icmp_ln126_reg_1302_pp0_iter1_reg;
                pixel_8_reg_1322_pp0_iter2_reg <= pixel_8_reg_1322_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_579_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln127_reg_1316 <= icmp_ln127_fu_597_p2;
                pixel_8_reg_1322 <= pixel_8_fu_603_p1;
                y_reg_1311 <= y_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln136_reg_1348 <= icmp_ln136_fu_650_p2;
                icmp_ln136_reg_1348_pp1_iter1_reg <= icmp_ln136_reg_1348;
                pixel_8_1_reg_1368_pp1_iter1_reg <= pixel_8_1_reg_1368;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln136_reg_1348_pp1_iter2_reg <= icmp_ln136_reg_1348_pp1_iter1_reg;
                pixel_8_1_reg_1368_pp1_iter2_reg <= pixel_8_1_reg_1368_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_650_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln137_reg_1362 <= icmp_ln137_fu_668_p2;
                pixel_8_1_reg_1368 <= pixel_8_1_fu_674_p1;
                y_2_reg_1357 <= y_2_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln149_reg_1855 <= icmp_ln149_fu_1119_p2;
                icmp_ln149_reg_1855_pp3_iter1_reg <= icmp_ln149_reg_1855;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln149_reg_1855_pp3_iter2_reg <= icmp_ln149_reg_1855_pp3_iter1_reg;
                icmp_ln149_reg_1855_pp3_iter3_reg <= icmp_ln149_reg_1855_pp3_iter2_reg;
                icmp_ln149_reg_1855_pp3_iter4_reg <= icmp_ln149_reg_1855_pp3_iter3_reg;
                icmp_ln149_reg_1855_pp3_iter5_reg <= icmp_ln149_reg_1855_pp3_iter4_reg;
                icmp_ln153_reg_1912_pp3_iter4_reg <= icmp_ln153_reg_1912;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_fu_1119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln150_reg_1869 <= icmp_ln150_fu_1137_p2;
                y_4_reg_1864 <= y_4_fu_1131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_reg_1855_pp3_iter2_reg = ap_const_lv1_0))) then
                icmp_ln153_reg_1912 <= icmp_ln153_fu_1206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln56_reg_1394 <= icmp_ln56_fu_721_p2;
                icmp_ln56_reg_1394_pp2_iter10_reg <= icmp_ln56_reg_1394_pp2_iter9_reg;
                icmp_ln56_reg_1394_pp2_iter11_reg <= icmp_ln56_reg_1394_pp2_iter10_reg;
                icmp_ln56_reg_1394_pp2_iter12_reg <= icmp_ln56_reg_1394_pp2_iter11_reg;
                icmp_ln56_reg_1394_pp2_iter13_reg <= icmp_ln56_reg_1394_pp2_iter12_reg;
                icmp_ln56_reg_1394_pp2_iter14_reg <= icmp_ln56_reg_1394_pp2_iter13_reg;
                icmp_ln56_reg_1394_pp2_iter1_reg <= icmp_ln56_reg_1394;
                icmp_ln56_reg_1394_pp2_iter2_reg <= icmp_ln56_reg_1394_pp2_iter1_reg;
                icmp_ln56_reg_1394_pp2_iter3_reg <= icmp_ln56_reg_1394_pp2_iter2_reg;
                icmp_ln56_reg_1394_pp2_iter4_reg <= icmp_ln56_reg_1394_pp2_iter3_reg;
                icmp_ln56_reg_1394_pp2_iter5_reg <= icmp_ln56_reg_1394_pp2_iter4_reg;
                icmp_ln56_reg_1394_pp2_iter6_reg <= icmp_ln56_reg_1394_pp2_iter5_reg;
                icmp_ln56_reg_1394_pp2_iter7_reg <= icmp_ln56_reg_1394_pp2_iter6_reg;
                icmp_ln56_reg_1394_pp2_iter8_reg <= icmp_ln56_reg_1394_pp2_iter7_reg;
                icmp_ln56_reg_1394_pp2_iter9_reg <= icmp_ln56_reg_1394_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln85_1_reg_1850 <= icmp_ln85_1_fu_1102_p2;
                icmp_ln85_reg_1845 <= icmp_ln85_fu_1096_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                mul_ln68_7_reg_1517 <= grp_fu_547_p2;
                mul_ln69_7_reg_1522 <= grp_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                mul_ln70_2_reg_1693 <= mul_ln70_2_fu_923_p2;
                mul_ln70_4_reg_1698 <= mul_ln70_4_fu_927_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                mul_ln70_7_reg_1527 <= mul_ln70_7_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                mul_ln80_1_reg_1798 <= mul_ln80_1_fu_1069_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                mul_ln80_reg_1788 <= mul_ln80_fu_1052_p2;
                tmp_23_reg_1783 <= mul_ln44_2_fu_1028_p2(17 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)))) then
                reg_571 <= I_x_q1;
                reg_575 <= I_y_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_reg_1302 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln131_1_reg_1332 <= select_ln131_1_fu_614_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_reg_1302 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln131_reg_1327 <= select_ln131_fu_607_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_reg_1348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                select_ln141_1_reg_1378 <= select_ln141_1_fu_685_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_reg_1348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln141_reg_1373 <= select_ln141_fu_678_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_reg_1855 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln149_1_reg_1881 <= select_ln149_1_fu_1150_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_reg_1855 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln149_reg_1875 <= select_ln149_fu_1143_p3;
                trunc_ln149_reg_1887 <= trunc_ln149_fu_1156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                select_ln75_1_reg_1458 <= select_ln75_1_fu_807_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                sum_1_reg_1738 <= sum_1_fu_939_p2;
                sum_3_reg_1743 <= sum_3_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                sum_4_reg_1688 <= sum_4_fu_917_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                tmp_1_reg_1819 <= grp_fu_540_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                tmp_reg_1814 <= grp_fu_540_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                trace_M_reg_1808 <= grp_fu_540_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_721_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                x_2_reg_1441 <= x_2_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                    zext_ln68_4_reg_1580(15 downto 0) <= zext_ln68_4_fu_911_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then
                    zext_ln68_4_reg_1580_pp2_iter10_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter9_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter11_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter10_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter12_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter11_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter13_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter12_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter1_reg(15 downto 0) <= zext_ln68_4_reg_1580(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter2_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter1_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter3_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter2_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter4_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter3_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter5_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter4_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter6_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter5_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter7_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter6_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter8_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter7_reg(15 downto 0);
                    zext_ln68_4_reg_1580_pp2_iter9_reg(15 downto 0) <= zext_ln68_4_reg_1580_pp2_iter8_reg(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln68_4_reg_1580(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter3_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter4_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter5_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter6_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter7_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter8_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter9_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter10_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter11_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter12_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln68_4_reg_1580_pp2_iter13_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln126_fu_579_p2, ap_enable_reg_pp1_iter0, icmp_ln136_fu_650_p2, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, icmp_ln56_fu_721_p2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter13, icmp_ln149_fu_1119_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0_subdone, ap_block_pp2_stage4_subdone, ap_block_pp2_stage3_subdone, ap_enable_reg_pp2_iter14, ap_block_pp3_stage0_subdone, ap_CS_fsm_state94, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk, ap_block_pp2_stage1_subdone, ap_block_pp2_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln126_fu_579_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln126_fu_579_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln136_fu_650_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((icmp_ln136_fu_650_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln56_fu_721_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln56_fu_721_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) and (ap_const_boolean_0 = ap_block_pp2_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage3_subdone) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln149_fu_1119_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln149_fu_1119_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln126_fu_579_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln136_fu_650_p2, INPUT_STREAM_TVALID_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln136_fu_650_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln126_fu_579_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_TVALID_int;
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_STREAM_TREADY_assign_proc : process(INPUT_STREAM_TVALID, regslice_both_INPUT_STREAM_data_V_U_ack_in)
    begin
        if (((ap_const_logic_1 = INPUT_STREAM_TVALID) and (regslice_both_INPUT_STREAM_data_V_U_ack_in = ap_const_logic_1))) then 
            INPUT_STREAM_TREADY <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln126_fu_579_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln136_fu_650_p2, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((icmp_ln136_fu_650_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln126_fu_579_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            INPUT_STREAM_TREADY_int <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    I_x_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp0_iter3, ap_block_pp2_stage0, zext_ln131_1_fu_646_p1, zext_ln68_5_fu_781_p1, zext_ln68_1_fu_832_p1, ap_block_pp2_stage1, zext_ln68_2_fu_857_p1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln68_6_fu_899_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln68_6_fu_899_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            I_x_address0 <= zext_ln68_2_fu_857_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln68_1_fu_832_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln68_5_fu_781_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            I_x_address0 <= zext_ln131_1_fu_646_p1(16 - 1 downto 0);
        else 
            I_x_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_address1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage3, zext_ln68_4_fu_911_p1, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage0, zext_ln68_8_fu_801_p1, ap_block_pp2_stage1, zext_ln68_3_fu_845_p1, ap_block_pp2_stage2, zext_ln68_7_fu_869_p1, zext_ln68_fu_887_p1, ap_block_pp2_stage3, ap_block_pp2_stage4)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                I_x_address1 <= zext_ln68_4_fu_911_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                I_x_address1 <= zext_ln68_fu_887_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                I_x_address1 <= zext_ln68_7_fu_869_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                I_x_address1 <= zext_ln68_3_fu_845_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                I_x_address1 <= zext_ln68_8_fu_801_p1(16 - 1 downto 0);
            else 
                I_x_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            I_x_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_x_ce0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)))) then 
            I_x_ce0 <= ap_const_logic_1;
        else 
            I_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_x_ce1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)))) then 
            I_x_ce1 <= ap_const_logic_1;
        else 
            I_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    I_x_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_1302_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln126_reg_1302_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            I_x_we0 <= ap_const_logic_1;
        else 
            I_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0, zext_ln141_1_fu_717_p1, zext_ln68_5_fu_781_p1, zext_ln68_1_fu_832_p1, ap_block_pp2_stage1, zext_ln68_2_fu_857_p1, ap_block_pp2_stage2, ap_block_pp2_stage3, zext_ln68_6_fu_899_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln68_6_fu_899_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            I_y_address0 <= zext_ln68_2_fu_857_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln68_1_fu_832_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln68_5_fu_781_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            I_y_address0 <= zext_ln141_1_fu_717_p1(16 - 1 downto 0);
        else 
            I_y_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_address1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage3, zext_ln68_4_fu_911_p1, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage0, zext_ln68_8_fu_801_p1, ap_block_pp2_stage1, zext_ln68_3_fu_845_p1, ap_block_pp2_stage2, zext_ln68_7_fu_869_p1, zext_ln68_fu_887_p1, ap_block_pp2_stage3, ap_block_pp2_stage4)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                I_y_address1 <= zext_ln68_4_fu_911_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
                I_y_address1 <= zext_ln68_fu_887_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                I_y_address1 <= zext_ln68_7_fu_869_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                I_y_address1 <= zext_ln68_3_fu_845_p1(16 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                I_y_address1 <= zext_ln68_8_fu_801_p1(16 - 1 downto 0);
            else 
                I_y_address1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            I_y_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    I_y_ce0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)))) then 
            I_y_ce0 <= ap_const_logic_1;
        else 
            I_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_ce1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp2_stage4, ap_block_pp2_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)))) then 
            I_y_ce1 <= ap_const_logic_1;
        else 
            I_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    I_y_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln136_reg_1348_pp1_iter2_reg, ap_enable_reg_pp1_iter3)
    begin
        if (((icmp_ln136_reg_1348_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            I_y_we0 <= ap_const_logic_1;
        else 
            I_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp3_iter5, ap_block_pp3_stage0, icmp_ln149_reg_1855_pp3_iter4_reg, ap_enable_reg_pp3_iter6, icmp_ln149_reg_1855_pp3_iter5_reg, OUTPUT_STREAM_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln149_reg_1855_pp3_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln149_reg_1855_pp3_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1)))) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUTPUT_STREAM_TREADY_int;
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_STREAM_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_img_q0),32));
    OUTPUT_STREAM_TVALID <= regslice_both_OUTPUT_STREAM_data_V_U_vld_out;

    OUTPUT_STREAM_TVALID_int_assign_proc : process(ap_enable_reg_pp3_iter5, icmp_ln149_reg_1855_pp3_iter4_reg, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln149_reg_1855_pp3_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1))) then 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    add_ln126_fu_585_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_385) + unsigned(ap_const_lv17_1));
    add_ln131_fu_640_p2 <= std_logic_vector(unsigned(zext_ln127_fu_633_p1) + unsigned(zext_ln131_fu_637_p1));
    add_ln136_fu_656_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_420) + unsigned(ap_const_lv17_1));
    add_ln141_fu_711_p2 <= std_logic_vector(unsigned(zext_ln137_fu_704_p1) + unsigned(zext_ln141_fu_708_p1));
    add_ln149_fu_1125_p2 <= std_logic_vector(unsigned(indvar_flatten20_reg_489) + unsigned(ap_const_lv17_1));
    add_ln152_fu_1196_p2 <= std_logic_vector(unsigned(zext_ln150_1_fu_1180_p1) + unsigned(zext_ln152_fu_1193_p1));
    add_ln41_10_fu_944_p2 <= std_logic_vector(signed(add_ln41_9_reg_1728) + signed(add_ln41_8_reg_1713));
    add_ln41_14_fu_948_p2 <= std_logic_vector(signed(grp_fu_1278_p3) + signed(add_ln41_11_reg_1733));
    add_ln41_18_fu_1002_p2 <= std_logic_vector(signed(grp_fu_1284_p3) + signed(add_ln41_16_reg_1748));
    add_ln41_22_fu_1006_p2 <= std_logic_vector(signed(grp_fu_1296_p3) + signed(grp_fu_1290_p3));
    add_ln41_2_fu_931_p2 <= std_logic_vector(signed(add_ln41_1_reg_1708) + signed(add_ln41_reg_1703));
    add_ln41_6_fu_935_p2 <= std_logic_vector(signed(grp_fu_1272_p3) + signed(add_ln41_3_reg_1723));
    add_ln56_fu_727_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten13_phi_fu_459_p4) + unsigned(ap_const_lv16_1));
    add_ln66_1_fu_753_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(ap_phi_mux_y_0_i_i_phi_fu_470_p4));
    add_ln66_2_fu_759_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(ap_phi_mux_y_0_i_i_phi_fu_470_p4));
    add_ln66_fu_747_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_i_i_phi_fu_470_p4));
    add_ln67_fu_819_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(select_ln75_reg_1409));
    add_ln81_fu_996_p2 <= std_logic_vector(signed(tmp_20_fu_967_p4) + signed(tmp_21_fu_986_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(9);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
    ap_CS_fsm_state86 <= ap_CS_fsm(10);
    ap_CS_fsm_state94 <= ap_CS_fsm(12);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln126_fu_579_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln126_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln126_fu_579_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln126_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln136_fu_650_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln136_fu_650_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln136_fu_650_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln136_fu_650_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_block_state92_io, ap_block_state93_io)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state93_io) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state92_io) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_block_state92_io, ap_block_state93_io)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state93_io) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state92_io) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln126_fu_579_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln126_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int));
    end process;

        ap_block_state30_pp2_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage4_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp2_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp2_stage3_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp2_stage4_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp2_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp2_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp2_stage3_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp2_stage4_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp2_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp2_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp2_stage3_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp2_stage4_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp2_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp2_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp2_stage3_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp2_stage4_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp2_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp2_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp1_stage0_iter0_assign_proc : process(icmp_ln136_fu_650_p2, INPUT_STREAM_TVALID_int)
    begin
                ap_block_state7_pp1_stage0_iter0 <= ((icmp_ln136_fu_650_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_TVALID_int));
    end process;

        ap_block_state80_pp2_stage3_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp2_stage4_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp2_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp2_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp2_stage3_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state92_io_assign_proc : process(icmp_ln149_reg_1855_pp3_iter4_reg, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state92_io <= ((icmp_ln149_reg_1855_pp3_iter4_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state92_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state93_io_assign_proc : process(icmp_ln149_reg_1855_pp3_iter5_reg, OUTPUT_STREAM_TREADY_int)
    begin
                ap_block_state93_io <= ((icmp_ln149_reg_1855_pp3_iter5_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_TREADY_int));
    end process;

        ap_block_state93_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln126_fu_579_p2)
    begin
        if ((icmp_ln126_fu_579_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln136_fu_650_p2)
    begin
        if ((icmp_ln136_fu_650_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state12_assign_proc : process(icmp_ln56_fu_721_p2)
    begin
        if ((icmp_ln56_fu_721_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state87_assign_proc : process(icmp_ln149_fu_1119_p2)
    begin
        if ((icmp_ln149_fu_1119_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state87 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state87 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state94, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter14)
    begin
        if (((ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4)
    begin
        if (((ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten13_phi_fu_459_p4_assign_proc : process(indvar_flatten13_reg_455, icmp_ln56_reg_1394, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, add_ln56_reg_1398, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten13_phi_fu_459_p4 <= add_ln56_reg_1398;
        else 
            ap_phi_mux_indvar_flatten13_phi_fu_459_p4 <= indvar_flatten13_reg_455;
        end if; 
    end process;


    ap_phi_mux_x2_0_i_phi_fu_447_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, x2_0_i_reg_443, icmp_ln136_reg_1348, ap_enable_reg_pp1_iter1, x_1_fu_691_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln136_reg_1348 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x2_0_i_phi_fu_447_p4 <= x_1_fu_691_p2;
        else 
            ap_phi_mux_x2_0_i_phi_fu_447_p4 <= x2_0_i_reg_443;
        end if; 
    end process;


    ap_phi_mux_x6_0_i_phi_fu_516_p4_assign_proc : process(ap_block_pp3_stage0, icmp_ln149_reg_1855, x6_0_i_reg_512, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, x_3_fu_1160_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln149_reg_1855 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_x6_0_i_phi_fu_516_p4 <= x_3_fu_1160_p2;
        else 
            ap_phi_mux_x6_0_i_phi_fu_516_p4 <= x6_0_i_reg_512;
        end if; 
    end process;


    ap_phi_mux_x_0_i_i_phi_fu_482_p4_assign_proc : process(x_0_i_i_reg_478, icmp_ln56_reg_1394, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, x_2_reg_1441, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_x_0_i_i_phi_fu_482_p4 <= x_2_reg_1441;
        else 
            ap_phi_mux_x_0_i_i_phi_fu_482_p4 <= x_0_i_i_reg_478;
        end if; 
    end process;


    ap_phi_mux_x_0_i_phi_fu_412_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_0_i_reg_408, icmp_ln126_reg_1302, ap_enable_reg_pp0_iter1, x_fu_620_p2)
    begin
        if (((icmp_ln126_reg_1302 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_0_i_phi_fu_412_p4 <= x_fu_620_p2;
        else 
            ap_phi_mux_x_0_i_phi_fu_412_p4 <= x_0_i_reg_408;
        end if; 
    end process;


    ap_phi_mux_y1_0_i_phi_fu_435_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, y1_0_i_reg_431, icmp_ln136_reg_1348, select_ln141_1_fu_685_p3, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln136_reg_1348 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_y1_0_i_phi_fu_435_p4 <= select_ln141_1_fu_685_p3;
        else 
            ap_phi_mux_y1_0_i_phi_fu_435_p4 <= y1_0_i_reg_431;
        end if; 
    end process;


    ap_phi_mux_y5_0_i_phi_fu_504_p4_assign_proc : process(ap_block_pp3_stage0, icmp_ln149_reg_1855, y5_0_i_reg_500, ap_CS_fsm_pp3_stage0, select_ln149_1_fu_1150_p3, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln149_reg_1855 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_y5_0_i_phi_fu_504_p4 <= select_ln149_1_fu_1150_p3;
        else 
            ap_phi_mux_y5_0_i_phi_fu_504_p4 <= y5_0_i_reg_500;
        end if; 
    end process;


    ap_phi_mux_y_0_i_i_phi_fu_470_p4_assign_proc : process(y_0_i_i_reg_466, icmp_ln56_reg_1394, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, select_ln75_1_reg_1458, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln56_reg_1394 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_y_0_i_i_phi_fu_470_p4 <= select_ln75_1_reg_1458;
        else 
            ap_phi_mux_y_0_i_i_phi_fu_470_p4 <= y_0_i_i_reg_466;
        end if; 
    end process;


    ap_phi_mux_y_0_i_phi_fu_400_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_0_i_reg_396, icmp_ln126_reg_1302, select_ln131_1_fu_614_p3, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln126_reg_1302 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_y_0_i_phi_fu_400_p4 <= select_ln131_1_fu_614_p3;
        else 
            ap_phi_mux_y_0_i_phi_fu_400_p4 <= y_0_i_reg_396;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state94, regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) and (regslice_both_OUTPUT_STREAM_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln85_fu_1079_p1 <= R_reg_1839;

    grp_fu_524_p0_assign_proc : process(ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, tmp_reg_1814, ap_enable_reg_pp2_iter4, det_M_reg_1829_pp2_iter10_reg, ap_enable_reg_pp2_iter10, ap_block_pp2_stage3, ap_block_pp2_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            grp_fu_524_p0 <= det_M_reg_1829_pp2_iter10_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            grp_fu_524_p0 <= tmp_reg_1814;
        else 
            grp_fu_524_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_524_p1_assign_proc : process(ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter4, tmp_1_reg_1819, grp_fu_528_p2, ap_enable_reg_pp2_iter10, ap_block_pp2_stage3, ap_block_pp2_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            grp_fu_524_p1 <= grp_fu_528_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            grp_fu_524_p1 <= tmp_1_reg_1819;
        else 
            grp_fu_524_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_528_p0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage0, trace_M_reg_1808, ap_enable_reg_pp2_iter4, grp_fu_528_p2, ap_enable_reg_pp2_iter7, ap_block_pp2_stage0, ap_block_pp2_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_528_p0 <= grp_fu_528_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_528_p0 <= trace_M_reg_1808;
        else 
            grp_fu_528_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_528_p1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage0, trace_M_reg_1808, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter7, ap_block_pp2_stage0, ap_block_pp2_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_528_p1 <= ap_const_lv64_3FA47AE147AE147B;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_528_p1 <= trace_M_reg_1808;
        else 
            grp_fu_528_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_540_p0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage4, ap_enable_reg_pp2_iter2, zext_ln81_fu_1010_p1, zext_ln80_2_fu_1061_p1, zext_ln80_4_fu_1075_p1, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, ap_block_pp2_stage2, ap_block_pp2_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_540_p0 <= zext_ln80_4_fu_1075_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage4) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
            grp_fu_540_p0 <= zext_ln80_2_fu_1061_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            grp_fu_540_p0 <= zext_ln81_fu_1010_p1;
        else 
            grp_fu_540_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_547_p0 <= I_x_q0;
    grp_fu_547_p1 <= I_x_q0;
    grp_fu_547_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_547_p0) * signed(grp_fu_547_p1))), 8));
    grp_fu_553_p0 <= I_y_q0;
    grp_fu_553_p1 <= I_y_q0;
    grp_fu_553_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_553_p0) * signed(grp_fu_553_p1))), 8));
    grp_fu_559_p0 <= I_x_q1;
    grp_fu_559_p1 <= I_x_q1;
    grp_fu_559_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_559_p0) * signed(grp_fu_559_p1))), 8));
    grp_fu_565_p0 <= I_y_q1;
    grp_fu_565_p1 <= I_y_q1;
    grp_fu_565_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_565_p0) * signed(grp_fu_565_p1))), 8));
    icmp_ln126_fu_579_p2 <= "1" when (indvar_flatten_reg_385 = ap_const_lv17_10000) else "0";
    icmp_ln127_fu_597_p2 <= "1" when (ap_phi_mux_x_0_i_phi_fu_412_p4 = ap_const_lv9_100) else "0";
    icmp_ln136_fu_650_p2 <= "1" when (indvar_flatten6_reg_420 = ap_const_lv17_10000) else "0";
    icmp_ln137_fu_668_p2 <= "1" when (ap_phi_mux_x2_0_i_phi_fu_447_p4 = ap_const_lv9_100) else "0";
    icmp_ln149_fu_1119_p2 <= "1" when (indvar_flatten20_reg_489 = ap_const_lv17_10000) else "0";
    icmp_ln150_fu_1137_p2 <= "1" when (ap_phi_mux_x6_0_i_phi_fu_516_p4 = ap_const_lv9_100) else "0";
    icmp_ln153_fu_1206_p2 <= "1" when (idx_reg_1897 = ap_const_lv16_FFFF) else "0";
    icmp_ln56_fu_721_p2 <= "1" when (ap_phi_mux_indvar_flatten13_phi_fu_459_p4 = ap_const_lv16_FC04) else "0";
    icmp_ln57_fu_733_p2 <= "1" when (ap_phi_mux_x_0_i_i_phi_fu_482_p4 = ap_const_lv8_FF) else "0";
    icmp_ln85_1_fu_1102_p2 <= "1" when (trunc_ln85_fu_1092_p1 = ap_const_lv52_0) else "0";
    icmp_ln85_fu_1096_p2 <= "0" when (tmp_4_fu_1082_p4 = ap_const_lv11_7FF) else "1";
    idx_fu_1187_p2 <= std_logic_vector(unsigned(zext_ln150_fu_1184_p1) + unsigned(shl_ln151_mid2_fu_1166_p3));
    mul_ln44_1_fu_980_p1 <= mul_ln44_1_fu_980_p10(8 - 1 downto 0);
    mul_ln44_1_fu_980_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_reg_1743),18));
    mul_ln44_1_fu_980_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln44_1_fu_980_p1), 18));
    mul_ln44_2_fu_1028_p1 <= mul_ln44_2_fu_1028_p10(8 - 1 downto 0);
    mul_ln44_2_fu_1028_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_fu_1020_p2),18));
    mul_ln44_2_fu_1028_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln44_2_fu_1028_p1), 18));
    mul_ln44_fu_961_p1 <= mul_ln44_fu_961_p10(8 - 1 downto 0);
    mul_ln44_fu_961_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_reg_1738),18));
    mul_ln44_fu_961_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv18_1C8) * unsigned(mul_ln44_fu_961_p1), 18));
    mul_ln70_2_fu_923_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_x_load_2_reg_1633) * signed(I_y_load_2_reg_1643))), 8));
    mul_ln70_4_fu_927_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(I_x_load_4_reg_1653) * signed(I_y_load_4_reg_1663))), 8));
    mul_ln70_7_fu_875_p0 <= I_x_q0;
    mul_ln70_7_fu_875_p1 <= I_y_q0;
    mul_ln70_7_fu_875_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln70_7_fu_875_p0) * signed(mul_ln70_7_fu_875_p1))), 8));
    mul_ln80_1_fu_1069_p0 <= zext_ln80_3_fu_1065_p1(8 - 1 downto 0);
    mul_ln80_1_fu_1069_p1 <= zext_ln80_3_fu_1065_p1(8 - 1 downto 0);
    mul_ln80_1_fu_1069_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_1_fu_1069_p0) * unsigned(mul_ln80_1_fu_1069_p1), 16));
    mul_ln80_fu_1052_p0 <= mul_ln80_fu_1052_p00(8 - 1 downto 0);
    mul_ln80_fu_1052_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_fu_1014_p1),16));
    mul_ln80_fu_1052_p1 <= mul_ln80_fu_1052_p10(8 - 1 downto 0);
    mul_ln80_fu_1052_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_1_fu_1017_p1),16));
    mul_ln80_fu_1052_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_fu_1052_p0) * unsigned(mul_ln80_fu_1052_p1), 16));
    or_ln85_fu_1108_p2 <= (icmp_ln85_reg_1845 or icmp_ln85_1_reg_1850);

    output_img_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp2_stage3, zext_ln68_4_reg_1580_pp2_iter13_reg, ap_enable_reg_pp2_iter14, ap_enable_reg_pp3_iter3, ap_block_pp2_stage3, zext_ln152_1_fu_1202_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_img_address0 <= zext_ln152_1_fu_1202_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage3) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            output_img_address0 <= zext_ln68_4_reg_1580_pp2_iter13_reg(16 - 1 downto 0);
        else 
            output_img_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_img_ce0_assign_proc : process(ap_enable_reg_pp3_iter5, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter14, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)))) then 
            output_img_ce0 <= ap_const_logic_1;
        else 
            output_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_img_d0 <= (or_ln85_fu_1108_p2 and grp_fu_535_p2);

    output_img_we0_assign_proc : process(icmp_ln56_reg_1394_pp2_iter14_reg, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter14)
    begin
        if (((icmp_ln56_reg_1394_pp2_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage3_11001) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3))) then 
            output_img_we0 <= ap_const_logic_1;
        else 
            output_img_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pixel_8_1_fu_674_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    pixel_8_fu_603_p1 <= INPUT_STREAM_TDATA_int(8 - 1 downto 0);
    select_ln131_1_fu_614_p3 <= 
        y_reg_1311 when (icmp_ln127_reg_1316(0) = '1') else 
        y_0_i_reg_396;
    select_ln131_fu_607_p3 <= 
        ap_const_lv9_0 when (icmp_ln127_reg_1316(0) = '1') else 
        x_0_i_reg_408;
    select_ln141_1_fu_685_p3 <= 
        y_2_reg_1357 when (icmp_ln137_reg_1362(0) = '1') else 
        y1_0_i_reg_431;
    select_ln141_fu_678_p3 <= 
        ap_const_lv9_0 when (icmp_ln137_reg_1362(0) = '1') else 
        x2_0_i_reg_443;
    select_ln149_1_fu_1150_p3 <= 
        y_4_reg_1864 when (icmp_ln150_reg_1869(0) = '1') else 
        y5_0_i_reg_500;
    select_ln149_fu_1143_p3 <= 
        ap_const_lv9_0 when (icmp_ln150_reg_1869(0) = '1') else 
        x6_0_i_reg_512;
    select_ln75_1_fu_807_p3 <= 
        add_ln66_reg_1416 when (icmp_ln57_reg_1403(0) = '1') else 
        y_0_i_i_reg_466;
    select_ln75_2_fu_813_p3 <= 
        y_0_i_i_reg_466 when (icmp_ln57_reg_1403(0) = '1') else 
        add_ln66_1_reg_1421;
    select_ln75_3_fu_765_p3 <= 
        add_ln66_2_fu_759_p2 when (icmp_ln57_fu_733_p2(0) = '1') else 
        add_ln66_fu_747_p2;
    select_ln75_fu_739_p3 <= 
        ap_const_lv8_1 when (icmp_ln57_fu_733_p2(0) = '1') else 
        ap_phi_mux_x_0_i_i_phi_fu_482_p4;
        sext_ln44_1_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_reg_1758),8));

        sext_ln44_2_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_reg_1783),8));

        sext_ln44_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_reg_1753),8));

    shl_ln151_mid2_fu_1166_p3 <= (trunc_ln149_reg_1887 & ap_const_lv8_0);
    sum_1_fu_939_p2 <= std_logic_vector(unsigned(add_ln41_6_fu_935_p2) + unsigned(add_ln41_2_reg_1718));
    sum_3_fu_952_p2 <= std_logic_vector(unsigned(add_ln41_14_fu_948_p2) + unsigned(add_ln41_10_fu_944_p2));
    sum_4_fu_917_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_571) * signed(reg_575))), 8));
    sum_5_fu_1020_p2 <= std_logic_vector(unsigned(add_ln41_22_reg_1773) + unsigned(add_ln41_18_reg_1768));
    tmp_10_fu_697_p3 <= (select_ln141_1_reg_1378 & ap_const_lv8_0);
    tmp_11_fu_881_p3 <= (select_ln75_2_reg_1465 & add_ln67_reg_1471);
    tmp_12_fu_824_p3 <= (select_ln75_1_fu_807_p3 & add_ln67_fu_819_p2);
    tmp_13_fu_851_p3 <= (select_ln75_3_reg_1426 & add_ln67_reg_1471);
    tmp_14_fu_838_p3 <= (select_ln75_2_fu_813_p3 & select_ln75_reg_1409);
    tmp_15_fu_905_p3 <= (select_ln75_1_reg_1458 & select_ln75_reg_1409);
    tmp_16_fu_773_p3 <= (select_ln75_3_fu_765_p3 & select_ln75_fu_739_p3);
    tmp_17_fu_893_p3 <= (select_ln75_2_reg_1465 & x_2_reg_1441);
    tmp_18_fu_863_p3 <= (select_ln75_1_reg_1458 & x_2_reg_1441);
    tmp_19_fu_793_p3 <= (select_ln75_3_fu_765_p3 & x_2_fu_787_p2);
    tmp_20_fu_967_p4 <= mul_ln44_fu_961_p2(17 downto 12);
    tmp_21_fu_986_p4 <= mul_ln44_1_fu_980_p2(17 downto 12);
    tmp_22_fu_1173_p3 <= (select_ln149_1_reg_1881 & ap_const_lv8_0);
    tmp_4_fu_1082_p4 <= bitcast_ln85_fu_1079_p1(62 downto 52);
    tmp_5_fu_626_p3 <= (select_ln131_1_reg_1332 & ap_const_lv8_0);
    trunc_ln149_fu_1156_p1 <= select_ln149_1_fu_1150_p3(8 - 1 downto 0);
    trunc_ln85_fu_1092_p1 <= bitcast_ln85_fu_1079_p1(52 - 1 downto 0);
    x_1_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln141_fu_678_p3));
    x_2_fu_787_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln75_fu_739_p3));
    x_3_fu_1160_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln149_fu_1143_p3));
    x_fu_620_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln131_fu_607_p3));
    y_2_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(ap_phi_mux_y1_0_i_phi_fu_435_p4));
    y_4_fu_1131_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(ap_phi_mux_y5_0_i_phi_fu_504_p4));
    y_fu_591_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(ap_phi_mux_y_0_i_phi_fu_400_p4));
    zext_ln127_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_626_p3),18));
    zext_ln131_1_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_reg_1343),64));
    zext_ln131_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln131_reg_1327),18));
    zext_ln137_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_697_p3),18));
    zext_ln141_1_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln141_reg_1389),64));
    zext_ln141_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln141_reg_1373),18));
    zext_ln150_1_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1173_p3),18));
    zext_ln150_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln149_reg_1875),16));
    zext_ln152_1_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln152_reg_1902),64));
    zext_ln152_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln149_reg_1875),18));
    zext_ln68_1_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_824_p3),64));
    zext_ln68_2_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_851_p3),64));
    zext_ln68_3_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_838_p3),64));
    zext_ln68_4_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_905_p3),64));
    zext_ln68_5_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_773_p3),64));
    zext_ln68_6_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_893_p3),64));
    zext_ln68_7_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_863_p3),64));
    zext_ln68_8_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_793_p3),64));
    zext_ln68_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_881_p3),64));
    zext_ln80_2_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_reg_1788),32));
    zext_ln80_3_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_2_fu_1058_p1),16));
    zext_ln80_4_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln80_1_reg_1798),32));
    zext_ln81_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_reg_1763),32));
end behav;
