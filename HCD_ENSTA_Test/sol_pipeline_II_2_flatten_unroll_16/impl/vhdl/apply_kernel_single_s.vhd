-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply_kernel_single_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of apply_kernel_single_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv18_1C8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln40_fu_92_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_1_fu_98_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_1_reg_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_6_fu_122_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_6_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_4_fu_110_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_5_fu_116_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_3_fu_104_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln40_2_fu_128_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_fu_141_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_fu_141_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln43_fu_141_p00 : STD_LOGIC_VECTOR (17 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln40_1_reg_162 <= add_ln40_1_fu_98_p2;
                add_ln40_6_reg_167 <= add_ln40_6_fu_122_p2;
                add_ln40_reg_157 <= add_ln40_fu_92_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln40_1_fu_98_p2 <= std_logic_vector(unsigned(p_read2) + unsigned(p_read3));
    add_ln40_2_fu_128_p2 <= std_logic_vector(unsigned(add_ln40_1_reg_162) + unsigned(add_ln40_reg_157));
    add_ln40_3_fu_104_p2 <= std_logic_vector(unsigned(p_read4) + unsigned(p_read5));
    add_ln40_4_fu_110_p2 <= std_logic_vector(unsigned(p_read7) + unsigned(p_read8));
    add_ln40_5_fu_116_p2 <= std_logic_vector(unsigned(p_read6) + unsigned(add_ln40_4_fu_110_p2));
    add_ln40_6_fu_122_p2 <= std_logic_vector(unsigned(add_ln40_5_fu_116_p2) + unsigned(add_ln40_3_fu_104_p2));
    add_ln40_fu_92_p2 <= std_logic_vector(unsigned(p_read1) + unsigned(p_read));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= mul_ln43_fu_141_p2(16 downto 12);
    mul_ln43_fu_141_p0 <= mul_ln43_fu_141_p00(8 - 1 downto 0);
    mul_ln43_fu_141_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_132_p2),18));
    mul_ln43_fu_141_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln43_fu_141_p0) * unsigned(ap_const_lv18_1C8), 18));
    sum_fu_132_p2 <= std_logic_vector(unsigned(add_ln40_6_reg_167) + unsigned(add_ln40_2_fu_128_p2));
end behav;
