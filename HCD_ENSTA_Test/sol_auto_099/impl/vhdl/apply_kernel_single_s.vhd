-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply_kernel_single_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (4 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of apply_kernel_single_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv18_1C8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal add_ln40_fu_94_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_reg_159 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln40_1_fu_100_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_1_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_6_fu_124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_6_reg_169 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln40_4_fu_112_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_5_fu_118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_3_fu_106_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_2_fu_130_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_134_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_fu_143_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_fu_143_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal p_read_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read8_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_int : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln43_fu_143_p00 : STD_LOGIC_VECTOR (17 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln40_1_reg_164 <= add_ln40_1_fu_100_p2;
                add_ln40_6_reg_169 <= add_ln40_6_fu_124_p2;
                add_ln40_reg_159 <= add_ln40_fu_94_p2;
                ap_return_int <= mul_ln43_fu_143_p2(16 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= ap_return_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
                p_read8_int_reg <= p_read8;
                p_read_int_reg <= p_read;
            end if;
        end if;
    end process;
    add_ln40_1_fu_100_p2 <= std_logic_vector(unsigned(p_read2_int_reg) + unsigned(p_read3_int_reg));
    add_ln40_2_fu_130_p2 <= std_logic_vector(unsigned(add_ln40_1_reg_164) + unsigned(add_ln40_reg_159));
    add_ln40_3_fu_106_p2 <= std_logic_vector(unsigned(p_read4_int_reg) + unsigned(p_read5_int_reg));
    add_ln40_4_fu_112_p2 <= std_logic_vector(unsigned(p_read7_int_reg) + unsigned(p_read8_int_reg));
    add_ln40_5_fu_118_p2 <= std_logic_vector(unsigned(p_read6_int_reg) + unsigned(add_ln40_4_fu_112_p2));
    add_ln40_6_fu_124_p2 <= std_logic_vector(unsigned(add_ln40_5_fu_118_p2) + unsigned(add_ln40_3_fu_106_p2));
    add_ln40_fu_94_p2 <= std_logic_vector(unsigned(p_read1_int_reg) + unsigned(p_read_int_reg));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(ap_ce_reg, ap_return_int, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= ap_return_int;
        end if; 
    end process;

    mul_ln43_fu_143_p0 <= mul_ln43_fu_143_p00(8 - 1 downto 0);
    mul_ln43_fu_143_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_134_p2),18));
    mul_ln43_fu_143_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln43_fu_143_p0) * unsigned(ap_const_lv18_1C8), 18));
    sum_fu_134_p2 <= std_logic_vector(unsigned(add_ln40_6_reg_169) + unsigned(add_ln40_2_fu_130_p2));
end behav;
